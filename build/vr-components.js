/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.BinaryLoader = function ( showStatus ) {

  THREE.Loader.call( this, showStatus );

};

THREE.BinaryLoader.prototype = Object.create( THREE.Loader.prototype );
THREE.BinaryLoader.prototype.constructor = THREE.BinaryLoader;

// Load models generated by slim OBJ converter with BINARY option (converter_obj_three_slim.py -t binary)
//  - binary models consist of two files: JS and BIN
//  - parameters
//    - url (required)
//    - callback (required)
//    - texturePath (optional: if not specified, textures will be assumed to be in the same folder as JS model file)
//    - binaryPath (optional: if not specified, binary file will be assumed to be in the same folder as JS model file)

THREE.BinaryLoader.prototype.load = function ( url, callback, texturePath, binaryPath ) {

  // todo: unify load API to for easier SceneLoader use

  texturePath = texturePath || this.extractUrlBase( url );
  binaryPath = binaryPath || this.extractUrlBase( url );

  var callbackProgress = this.showProgress ? THREE.Loader.prototype.updateProgress : undefined;

  this.onLoadStart();

  // #1 load JS part via web worker

  this.loadAjaxJSON( this, url, callback, texturePath, binaryPath, callbackProgress );

};

THREE.BinaryLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, binaryPath, callbackProgress ) {

  var xhr = new XMLHttpRequest();

  texturePath = texturePath && ( typeof texturePath === "string" ) ? texturePath : this.extractUrlBase( url );
  binaryPath = binaryPath && ( typeof binaryPath === "string" ) ? binaryPath : this.extractUrlBase( url );

  xhr.onreadystatechange = function () {

    if ( xhr.readyState == 4 ) {

      if ( xhr.status == 200 || xhr.status == 0 ) {

        var json = JSON.parse( xhr.responseText );
        context.loadAjaxBuffers( json, callback, binaryPath, texturePath, callbackProgress );

      } else {

        console.error( "THREE.BinaryLoader: Couldn't load [" + url + "] [" + xhr.status + "]" );

      }

    }

  };

  xhr.open( "GET", url, true );
  xhr.send( null );

};

THREE.BinaryLoader.prototype.loadAjaxBuffers = function ( json, callback, binaryPath, texturePath, callbackProgress ) {

  var scope = this;

  var xhr = new XMLHttpRequest(),
    url = binaryPath + json.buffers;

  xhr.addEventListener( 'load', function ( event ) {

    var buffer = xhr.response;

    if ( buffer === undefined ) {

      // IEWEBGL needs this
      buffer = ( new Uint8Array( xhr.responseBody ) ).buffer;

    }

    if ( buffer.byteLength == 0 ) {  // iOS and other XMLHttpRequest level 1

      var buffer = new ArrayBuffer( xhr.responseText.length );

      var bufView = new Uint8Array( buffer );

      for ( var i = 0, l = xhr.responseText.length; i < l; i ++ ) {

        bufView[ i ] = xhr.responseText.charCodeAt( i ) & 0xff;

      }

    }

    scope.createBinModel( buffer, callback, texturePath, json.materials );

  }, false );

  if ( callbackProgress !== undefined ) {

    xhr.addEventListener( 'progress', function ( event ) {

      if ( event.lengthComputable ) {

        callbackProgress( event );

      }

    }, false );

  }

  xhr.addEventListener( 'error', function ( event ) {

    console.error( "THREE.BinaryLoader: Couldn't load [" + url + "] [" + xhr.status + "]" );

  }, false );


  xhr.open( "GET", url, true );
  xhr.responseType = "arraybuffer";
  if ( xhr.overrideMimeType ) xhr.overrideMimeType( "text/plain; charset=x-user-defined" );
  xhr.send( null );

};

// Binary AJAX parser

THREE.BinaryLoader.prototype.createBinModel = function ( data, callback, texturePath, jsonMaterials ) {

  var Model = function ( texturePath ) {

    var scope = this,
      currentOffset = 0,
      md,
      normals = [],
      uvs = [],
      start_tri_flat, start_tri_smooth, start_tri_flat_uv, start_tri_smooth_uv,
      start_quad_flat, start_quad_smooth, start_quad_flat_uv, start_quad_smooth_uv,
      tri_size, quad_size,
      len_tri_flat, len_tri_smooth, len_tri_flat_uv, len_tri_smooth_uv,
      len_quad_flat, len_quad_smooth, len_quad_flat_uv, len_quad_smooth_uv;


    THREE.Geometry.call( this );

    md = parseMetaData( data, currentOffset );

    currentOffset += md.header_bytes;
/*
    md.vertex_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
    md.material_index_bytes = Uint16Array.BYTES_PER_ELEMENT;
    md.normal_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
    md.uv_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
*/
    // buffers sizes

    tri_size =  md.vertex_index_bytes * 3 + md.material_index_bytes;
    quad_size = md.vertex_index_bytes * 4 + md.material_index_bytes;

    len_tri_flat      = md.ntri_flat      * ( tri_size );
    len_tri_smooth    = md.ntri_smooth    * ( tri_size + md.normal_index_bytes * 3 );
    len_tri_flat_uv   = md.ntri_flat_uv   * ( tri_size + md.uv_index_bytes * 3 );
    len_tri_smooth_uv = md.ntri_smooth_uv * ( tri_size + md.normal_index_bytes * 3 + md.uv_index_bytes * 3 );

    len_quad_flat      = md.nquad_flat      * ( quad_size );
    len_quad_smooth    = md.nquad_smooth    * ( quad_size + md.normal_index_bytes * 4 );
    len_quad_flat_uv   = md.nquad_flat_uv   * ( quad_size + md.uv_index_bytes * 4 );
    len_quad_smooth_uv = md.nquad_smooth_uv * ( quad_size + md.normal_index_bytes * 4 + md.uv_index_bytes * 4 );

    // read buffers

    currentOffset += init_vertices( currentOffset );

    currentOffset += init_normals( currentOffset );
    currentOffset += handlePadding( md.nnormals * 3 );

    currentOffset += init_uvs( currentOffset );

    start_tri_flat    = currentOffset;
    start_tri_smooth    = start_tri_flat    + len_tri_flat    + handlePadding( md.ntri_flat * 2 );
    start_tri_flat_uv   = start_tri_smooth  + len_tri_smooth  + handlePadding( md.ntri_smooth * 2 );
    start_tri_smooth_uv = start_tri_flat_uv + len_tri_flat_uv + handlePadding( md.ntri_flat_uv * 2 );

    start_quad_flat     = start_tri_smooth_uv + len_tri_smooth_uv  + handlePadding( md.ntri_smooth_uv * 2 );
    start_quad_smooth   = start_quad_flat     + len_quad_flat    + handlePadding( md.nquad_flat * 2 );
    start_quad_flat_uv  = start_quad_smooth   + len_quad_smooth    + handlePadding( md.nquad_smooth * 2 );
    start_quad_smooth_uv= start_quad_flat_uv  + len_quad_flat_uv   + handlePadding( md.nquad_flat_uv * 2 );

    // have to first process faces with uvs
    // so that face and uv indices match

    init_triangles_flat_uv( start_tri_flat_uv );
    init_triangles_smooth_uv( start_tri_smooth_uv );

    init_quads_flat_uv( start_quad_flat_uv );
    init_quads_smooth_uv( start_quad_smooth_uv );

    // now we can process untextured faces

    init_triangles_flat( start_tri_flat );
    init_triangles_smooth( start_tri_smooth );

    init_quads_flat( start_quad_flat );
    init_quads_smooth( start_quad_smooth );

    this.computeFaceNormals();

    function handlePadding( n ) {

      return ( n % 4 ) ? ( 4 - n % 4 ) : 0;

    };

    function parseMetaData( data, offset ) {

      var metaData = {

        'signature'               :parseString( data, offset,  12 ),
        'header_bytes'            :parseUChar8( data, offset + 12 ),

        'vertex_coordinate_bytes' :parseUChar8( data, offset + 13 ),
        'normal_coordinate_bytes' :parseUChar8( data, offset + 14 ),
        'uv_coordinate_bytes'     :parseUChar8( data, offset + 15 ),

        'vertex_index_bytes'      :parseUChar8( data, offset + 16 ),
        'normal_index_bytes'      :parseUChar8( data, offset + 17 ),
        'uv_index_bytes'          :parseUChar8( data, offset + 18 ),
        'material_index_bytes'    :parseUChar8( data, offset + 19 ),

        'nvertices'    :parseUInt32( data, offset + 20 ),
        'nnormals'     :parseUInt32( data, offset + 20 + 4*1 ),
        'nuvs'         :parseUInt32( data, offset + 20 + 4*2 ),

        'ntri_flat'      :parseUInt32( data, offset + 20 + 4*3 ),
        'ntri_smooth'    :parseUInt32( data, offset + 20 + 4*4 ),
        'ntri_flat_uv'   :parseUInt32( data, offset + 20 + 4*5 ),
        'ntri_smooth_uv' :parseUInt32( data, offset + 20 + 4*6 ),

        'nquad_flat'      :parseUInt32( data, offset + 20 + 4*7 ),
        'nquad_smooth'    :parseUInt32( data, offset + 20 + 4*8 ),
        'nquad_flat_uv'   :parseUInt32( data, offset + 20 + 4*9 ),
        'nquad_smooth_uv' :parseUInt32( data, offset + 20 + 4*10 )

      };
/*
      console.log( "signature: " + metaData.signature );

      console.log( "header_bytes: " + metaData.header_bytes );
      console.log( "vertex_coordinate_bytes: " + metaData.vertex_coordinate_bytes );
      console.log( "normal_coordinate_bytes: " + metaData.normal_coordinate_bytes );
      console.log( "uv_coordinate_bytes: " + metaData.uv_coordinate_bytes );

      console.log( "vertex_index_bytes: " + metaData.vertex_index_bytes );
      console.log( "normal_index_bytes: " + metaData.normal_index_bytes );
      console.log( "uv_index_bytes: " + metaData.uv_index_bytes );
      console.log( "material_index_bytes: " + metaData.material_index_bytes );

      console.log( "nvertices: " + metaData.nvertices );
      console.log( "nnormals: " + metaData.nnormals );
      console.log( "nuvs: " + metaData.nuvs );

      console.log( "ntri_flat: " + metaData.ntri_flat );
      console.log( "ntri_smooth: " + metaData.ntri_smooth );
      console.log( "ntri_flat_uv: " + metaData.ntri_flat_uv );
      console.log( "ntri_smooth_uv: " + metaData.ntri_smooth_uv );

      console.log( "nquad_flat: " + metaData.nquad_flat );
      console.log( "nquad_smooth: " + metaData.nquad_smooth );
      console.log( "nquad_flat_uv: " + metaData.nquad_flat_uv );
      console.log( "nquad_smooth_uv: " + metaData.nquad_smooth_uv );

      var total = metaData.header_bytes
            + metaData.nvertices * metaData.vertex_coordinate_bytes * 3
            + metaData.nnormals * metaData.normal_coordinate_bytes * 3
            + metaData.nuvs * metaData.uv_coordinate_bytes * 2
            + metaData.ntri_flat * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes )
            + metaData.ntri_smooth * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes + metaData.normal_index_bytes*3 )
            + metaData.ntri_flat_uv * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes + metaData.uv_index_bytes*3 )
            + metaData.ntri_smooth_uv * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes + metaData.normal_index_bytes*3 + metaData.uv_index_bytes*3 )
            + metaData.nquad_flat * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes )
            + metaData.nquad_smooth * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes + metaData.normal_index_bytes*4 )
            + metaData.nquad_flat_uv * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes + metaData.uv_index_bytes*4 )
            + metaData.nquad_smooth_uv * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes + metaData.normal_index_bytes*4 + metaData.uv_index_bytes*4 );
      console.log( "total bytes: " + total );
*/

      return metaData;

    };

    function parseString( data, offset, length ) {

      var charArray = new Uint8Array( data, offset, length );

      var text = "";

      for ( var i = 0; i < length; i ++ ) {

        text += String.fromCharCode( charArray[ offset + i ] );

      }

      return text;

    };

    function parseUChar8( data, offset ) {

      var charArray = new Uint8Array( data, offset, 1 );

      return charArray[ 0 ];

    };

    function parseUInt32( data, offset ) {

      var intArray = new Uint32Array( data, offset, 1 );

      return intArray[ 0 ];

    };

    function init_vertices( start ) {

      var nElements = md.nvertices;

      var coordArray = new Float32Array( data, start, nElements * 3 );

      var i, x, y, z;

      for( i = 0; i < nElements; i ++ ) {

        x = coordArray[ i * 3 ];
        y = coordArray[ i * 3 + 1 ];
        z = coordArray[ i * 3 + 2 ];

        scope.vertices.push( new THREE.Vector3( x, y, z ) );

      }

      return nElements * 3 * Float32Array.BYTES_PER_ELEMENT;

    };

    function init_normals( start ) {

      var nElements = md.nnormals;

      if ( nElements ) {

        var normalArray = new Int8Array( data, start, nElements * 3 );

        var i, x, y, z;

        for( i = 0; i < nElements; i ++ ) {

          x = normalArray[ i * 3 ];
          y = normalArray[ i * 3 + 1 ];
          z = normalArray[ i * 3 + 2 ];

          normals.push( x/127, y/127, z/127 );

        }

      }

      return nElements * 3 * Int8Array.BYTES_PER_ELEMENT;

    };

    function init_uvs( start ) {

      var nElements = md.nuvs;

      if ( nElements ) {

        var uvArray = new Float32Array( data, start, nElements * 2 );

        var i, u, v;

        for( i = 0; i < nElements; i ++ ) {

          u = uvArray[ i * 2 ];
          v = uvArray[ i * 2 + 1 ];

          uvs.push( u, v );

        }

      }

      return nElements * 2 * Float32Array.BYTES_PER_ELEMENT;

    };

    function init_uvs3( nElements, offset ) {

      var i, uva, uvb, uvc, u1, u2, u3, v1, v2, v3;

      var uvIndexBuffer = new Uint32Array( data, offset, 3 * nElements );

      for( i = 0; i < nElements; i ++ ) {

        uva = uvIndexBuffer[ i * 3 ];
        uvb = uvIndexBuffer[ i * 3 + 1 ];
        uvc = uvIndexBuffer[ i * 3 + 2 ];

        u1 = uvs[ uva*2 ];
        v1 = uvs[ uva*2 + 1 ];

        u2 = uvs[ uvb*2 ];
        v2 = uvs[ uvb*2 + 1 ];

        u3 = uvs[ uvc*2 ];
        v3 = uvs[ uvc*2 + 1 ];

        scope.faceVertexUvs[ 0 ].push( [
          new THREE.Vector2( u1, v1 ),
          new THREE.Vector2( u2, v2 ),
          new THREE.Vector2( u3, v3 )
        ] );

      }

    };

    function init_uvs4( nElements, offset ) {

      var i, uva, uvb, uvc, uvd, u1, u2, u3, u4, v1, v2, v3, v4;

      var uvIndexBuffer = new Uint32Array( data, offset, 4 * nElements );

      for( i = 0; i < nElements; i ++ ) {

        uva = uvIndexBuffer[ i * 4 ];
        uvb = uvIndexBuffer[ i * 4 + 1 ];
        uvc = uvIndexBuffer[ i * 4 + 2 ];
        uvd = uvIndexBuffer[ i * 4 + 3 ];

        u1 = uvs[ uva*2 ];
        v1 = uvs[ uva*2 + 1 ];

        u2 = uvs[ uvb*2 ];
        v2 = uvs[ uvb*2 + 1 ];

        u3 = uvs[ uvc*2 ];
        v3 = uvs[ uvc*2 + 1 ];

        u4 = uvs[ uvd*2 ];
        v4 = uvs[ uvd*2 + 1 ];

        scope.faceVertexUvs[ 0 ].push( [
          new THREE.Vector2( u1, v1 ),
          new THREE.Vector2( u2, v2 ),
          new THREE.Vector2( u4, v4 )
        ] );

        scope.faceVertexUvs[ 0 ].push( [
          new THREE.Vector2( u2, v2 ),
          new THREE.Vector2( u3, v3 ),
          new THREE.Vector2( u4, v4 )
        ] );

      }

    };

    function init_faces3_flat( nElements, offsetVertices, offsetMaterials ) {

      var i, a, b, c, m;

      var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 3 * nElements );
      var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

      for( i = 0; i < nElements; i ++ ) {

        a = vertexIndexBuffer[ i * 3 ];
        b = vertexIndexBuffer[ i * 3 + 1 ];
        c = vertexIndexBuffer[ i * 3 + 2 ];

        m = materialIndexBuffer[ i ];

        scope.faces.push( new THREE.Face3( a, b, c, null, null, m ) );

      }

    };

    function init_faces4_flat( nElements, offsetVertices, offsetMaterials ) {

      var i, a, b, c, d, m;

      var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 4 * nElements );
      var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

      for( i = 0; i < nElements; i ++ ) {

        a = vertexIndexBuffer[ i * 4 ];
        b = vertexIndexBuffer[ i * 4 + 1 ];
        c = vertexIndexBuffer[ i * 4 + 2 ];
        d = vertexIndexBuffer[ i * 4 + 3 ];

        m = materialIndexBuffer[ i ];

        scope.faces.push( new THREE.Face3( a, b, d, null, null, m ) );
        scope.faces.push( new THREE.Face3( b, c, d, null, null, m ) );

      }

    };

    function init_faces3_smooth( nElements, offsetVertices, offsetNormals, offsetMaterials ) {

      var i, a, b, c, m;
      var na, nb, nc;

      var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 3 * nElements );
      var normalIndexBuffer = new Uint32Array( data, offsetNormals, 3 * nElements );
      var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

      for( i = 0; i < nElements; i ++ ) {

        a = vertexIndexBuffer[ i * 3 ];
        b = vertexIndexBuffer[ i * 3 + 1 ];
        c = vertexIndexBuffer[ i * 3 + 2 ];

        na = normalIndexBuffer[ i * 3 ];
        nb = normalIndexBuffer[ i * 3 + 1 ];
        nc = normalIndexBuffer[ i * 3 + 2 ];

        m = materialIndexBuffer[ i ];

        var nax = normals[ na*3     ],
          nay = normals[ na*3 + 1 ],
          naz = normals[ na*3 + 2 ],

          nbx = normals[ nb*3     ],
          nby = normals[ nb*3 + 1 ],
          nbz = normals[ nb*3 + 2 ],

          ncx = normals[ nc*3     ],
          ncy = normals[ nc*3 + 1 ],
          ncz = normals[ nc*3 + 2 ];

        scope.faces.push( new THREE.Face3( a, b, c, [
          new THREE.Vector3( nax, nay, naz ),
          new THREE.Vector3( nbx, nby, nbz ),
          new THREE.Vector3( ncx, ncy, ncz )
        ], null, m ) );

      }

    };

    function init_faces4_smooth( nElements, offsetVertices, offsetNormals, offsetMaterials ) {

      var i, a, b, c, d, m;
      var na, nb, nc, nd;

      var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 4 * nElements );
      var normalIndexBuffer = new Uint32Array( data, offsetNormals, 4 * nElements );
      var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

      for( i = 0; i < nElements; i ++ ) {

        a = vertexIndexBuffer[ i * 4 ];
        b = vertexIndexBuffer[ i * 4 + 1 ];
        c = vertexIndexBuffer[ i * 4 + 2 ];
        d = vertexIndexBuffer[ i * 4 + 3 ];

        na = normalIndexBuffer[ i * 4 ];
        nb = normalIndexBuffer[ i * 4 + 1 ];
        nc = normalIndexBuffer[ i * 4 + 2 ];
        nd = normalIndexBuffer[ i * 4 + 3 ];

        m = materialIndexBuffer[ i ];

        var nax = normals[ na*3     ],
          nay = normals[ na*3 + 1 ],
          naz = normals[ na*3 + 2 ],

          nbx = normals[ nb*3     ],
          nby = normals[ nb*3 + 1 ],
          nbz = normals[ nb*3 + 2 ],

          ncx = normals[ nc*3     ],
          ncy = normals[ nc*3 + 1 ],
          ncz = normals[ nc*3 + 2 ],

          ndx = normals[ nd*3     ],
          ndy = normals[ nd*3 + 1 ],
          ndz = normals[ nd*3 + 2 ];

        scope.faces.push( new THREE.Face3( a, b, d, [
          new THREE.Vector3( nax, nay, naz ),
          new THREE.Vector3( nbx, nby, nbz ),
          new THREE.Vector3( ndx, ndy, ndz )
        ], null, m ) );

        scope.faces.push( new THREE.Face3( b, c, d, [
          new THREE.Vector3( nbx, nby, nbz ),
          new THREE.Vector3( ncx, ncy, ncz ),
          new THREE.Vector3( ndx, ndy, ndz )
        ], null, m ) );

      }

    };

    function init_triangles_flat( start ) {

      var nElements = md.ntri_flat;

      if ( nElements ) {

        var offsetMaterials = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
        init_faces3_flat( nElements, start, offsetMaterials );

      }

    };

    function init_triangles_flat_uv( start ) {

      var nElements = md.ntri_flat_uv;

      if ( nElements ) {

        var offsetUvs = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
        var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

        init_faces3_flat( nElements, start, offsetMaterials );
        init_uvs3( nElements, offsetUvs );

      }

    };

    function init_triangles_smooth( start ) {

      var nElements = md.ntri_smooth;

      if ( nElements ) {

        var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
        var offsetMaterials = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

        init_faces3_smooth( nElements, start, offsetNormals, offsetMaterials );

      }

    };

    function init_triangles_smooth_uv( start ) {

      var nElements = md.ntri_smooth_uv;

      if ( nElements ) {

        var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
        var offsetUvs = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
        var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

        init_faces3_smooth( nElements, start, offsetNormals, offsetMaterials );
        init_uvs3( nElements, offsetUvs );

      }

    };

    function init_quads_flat( start ) {

      var nElements = md.nquad_flat;

      if ( nElements ) {

        var offsetMaterials = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
        init_faces4_flat( nElements, start, offsetMaterials );

      }

    };

    function init_quads_flat_uv( start ) {

      var nElements = md.nquad_flat_uv;

      if ( nElements ) {

        var offsetUvs = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
        var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

        init_faces4_flat( nElements, start, offsetMaterials );
        init_uvs4( nElements, offsetUvs );

      }

    };

    function init_quads_smooth( start ) {

      var nElements = md.nquad_smooth;

      if ( nElements ) {

        var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
        var offsetMaterials = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

        init_faces4_smooth( nElements, start, offsetNormals, offsetMaterials );

      }

    };

    function init_quads_smooth_uv( start ) {

      var nElements = md.nquad_smooth_uv;

      if ( nElements ) {

        var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
        var offsetUvs = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
        var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

        init_faces4_smooth( nElements, start, offsetNormals, offsetMaterials );
        init_uvs4( nElements, offsetUvs );

      }

    };

  };

  Model.prototype = Object.create( THREE.Geometry.prototype );
  Model.prototype.constructor = Model;

  var geometry = new Model( texturePath );
  var materials = this.initMaterials( jsonMaterials, texturePath );

  if ( this.needsTangents( materials ) ) geometry.computeTangents();

  callback( geometry, materials );

};

/* globals define */
;(function(define){'use strict';define(function(require,exports,module){
/**
 * Locals
 */
var textContent = Object.getOwnPropertyDescriptor(Node.prototype,
    'textContent');
var innerHTML = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML');
var removeAttribute = Element.prototype.removeAttribute;
var setAttribute = Element.prototype.setAttribute;
var noop  = function() {};

/**
 * Register a new component.
 *
 * @param  {String} name
 * @param  {Object} props
 * @return {constructor}
 * @public
 */
exports.register = function(name, props) {
  var baseProto = getBaseProto(props.extends);
  var template = props.template || baseProto.templateString;

  // Components are extensible by default but can be declared
  // as non extensible as an optimization to avoid
  // storing the template strings
  var extensible = props.extensible = props.hasOwnProperty('extensible')?
    props.extensible : true;

  // Clean up
  delete props.extends;

  // Pull out CSS that needs to be in the light-dom
  if (template) {
    // Stores the string to be reprocessed when
    // a new component extends this one
    if (extensible && props.template) {
      props.templateString = props.template;
    }

    var output = processCss(template, name);

    props.template = document.createElement('template');
    props.template.innerHTML = output.template;
    props.lightCss = output.lightCss;

    props.globalCss = props.globalCss || '';
    props.globalCss += output.globalCss;
  }

  // Inject global CSS into the document,
  // and delete as no longer needed
  injectGlobalCss(props.globalCss);
  delete props.globalCss;

  // Merge base getter/setter attributes with the user's,
  // then define the property descriptors on the prototype.
  var descriptors = mixin(props.attrs || {}, base.descriptors);

  // Store the orginal descriptors somewhere
  // a little more private and delete the original
  props._attrs = props.attrs;
  delete props.attrs;

  // Create the prototype, extended from base and
  // define the descriptors directly on the prototype
  var proto = createProto(baseProto, props);
  Object.defineProperties(proto, descriptors);

  // Register the custom-element and return the constructor
  try {
    return document.registerElement(name, { prototype: proto });
  } catch (e) {
    if (e.name !== 'NotSupportedError') {
      throw e;
    }
  }
};

var base = {
  properties: {
    GaiaComponent: true,
    attributeChanged: noop,
    attached: noop,
    detached: noop,
    created: noop,

    createdCallback: function() {
      if (this.rtl) { addDirObserver(); }
      injectLightCss(this);
      this.created();
    },

    /**
     * It is very common to want to keep object
     * properties in-sync with attributes,
     * for example:
     *
     *   el.value = 'foo';
     *   el.setAttribute('value', 'foo');
     *
     * So we support an object on the prototype
     * named 'attrs' to provide a consistent
     * way for component authors to define
     * these properties. When an attribute
     * changes we keep the attr[name]
     * up-to-date.
     *
     * @param  {String} name
     * @param  {String||null} from
     * @param  {String||null} to
     */
    attributeChangedCallback: function(name, from, to) {
      var prop = toCamelCase(name);
      if (this._attrs && this._attrs[prop]) { this[prop] = to; }
      this.attributeChanged(name, from, to);
    },

    attachedCallback: function() { this.attached(); },
    detachedCallback: function() { this.detached(); },

    /**
     * A convenient method for setting up
     * a shadow-root using the defined template.
     *
     * @return {ShadowRoot}
     */
    setupShadowRoot: function() {
      if (!this.template) { return; }
      var node = document.importNode(this.template.content, true);
      this.createShadowRoot().appendChild(node);
      return this.shadowRoot;
    },

    /**
     * Sets an attribute internally
     * and externally. This is so that
     * we can style internal shadow-dom
     * content.
     *
     * @param {String} name
     * @param {String} value
     */
    setAttr: function(name, value) {
      var internal = this.shadowRoot.firstElementChild;
      setAttribute.call(internal, name, value);
      setAttribute.call(this, name, value);
    },

    /**
     * Removes an attribute internally
     * and externally. This is so that
     * we can style internal shadow-dom
     * content.
     *
     * @param {String} name
     * @param {String} value
     */
    removeAttr: function(name) {
      var internal = this.shadowRoot.firstElementChild;
      removeAttribute.call(internal, name);
      removeAttribute.call(this, name);
    }
  },

  descriptors: {
    textContent: {
      set: function(value) {
        textContent.set.call(this, value);
        if (this.lightStyle) { this.appendChild(this.lightStyle); }
      },

      get: function() {
        return textContent.get();
      }
    },

    innerHTML: {
      set: function(value) {
        innerHTML.set.call(this, value);
        if (this.lightStyle) { this.appendChild(this.lightStyle); }
      },

      get: innerHTML.get
    }
  }
};

/**
 * The default base prototype to use
 * when `extends` is undefined.
 *
 * @type {Object}
 */
var defaultPrototype = createProto(HTMLElement.prototype, base.properties);

/**
 * Returns a suitable prototype based
 * on the object passed.
 *
 * @private
 * @param  {HTMLElementPrototype|undefined} proto
 * @return {HTMLElementPrototype}
 */
function getBaseProto(proto) {
  if (!proto) { return defaultPrototype; }
  proto = proto.prototype || proto;
  return !proto.GaiaComponent ?
    createProto(proto, base.properties) : proto;
}

/**
 * Extends the given proto and mixes
 * in the given properties.
 *
 * @private
 * @param  {Object} proto
 * @param  {Object} props
 * @return {Object}
 */
function createProto(proto, props) {
  return mixin(Object.create(proto), props);
}

/**
 * Detects presence of shadow-dom
 * CSS selectors.
 *
 * @private
 * @return {Boolean}
 */
var hasShadowCSS = (function() {
  var div = document.createElement('div');
  try { div.querySelector(':host'); return true; }
  catch (e) { return false; }
})();

/**
 * Regexs used to extract shadow-css
 *
 * @type {Object}
 */
var regex = {
  shadowCss: /(?:\:host|\:\:content)[^{]*\{[^}]*\}/g,
  ':host': /(?:\:host)/g,
  ':host()': /\:host\((.+)\)(?: \:\:content)?/g,
  ':host-context': /\:host-context\((.+)\)([^{,]+)?/g,
  '::content': /(?:\:\:content)/g
};

/**
 * Extracts the :host and ::content rules
 * from the shadow-dom CSS and rewrites
 * them to work from the <style scoped>
 * injected at the root of the component.
 *
 * @private
 * @return {String}
 */
function processCss(template, name) {
  var globalCss = '';
  var lightCss = '';

  if (!hasShadowCSS) {
    template = template.replace(regex.shadowCss, function(match) {
      var hostContext = regex[':host-context'].exec(match);

      if (hostContext) {
        globalCss += match
          .replace(regex['::content'], '')
          .replace(regex[':host-context'], '$1 ' + name + '$2')
          .replace(/ +/g, ' '); // excess whitespace
      } else {
        lightCss += match
          .replace(regex[':host()'], name + '$1')
          .replace(regex[':host'], name)
          .replace(regex['::content'], name);
      }

      return '';
    });
  }

  return {
    template: template,
    lightCss: lightCss,
    globalCss: globalCss
  };
}

/**
 * Some CSS rules, such as @keyframes
 * and @font-face don't work inside
 * scoped or shadow <style>. So we
 * have to put them into 'global'
 * <style> in the head of the
 * document.
 *
 * @private
 * @param  {String} css
 */
function injectGlobalCss(css) {
  if (!css) {return;}
  var style = document.createElement('style');
  style.innerHTML = css.trim();
  headReady().then(function() {
    document.head.appendChild(style);
  });
}


/**
 * Resolves a promise once document.head is ready.
 *
 * @private
 */
function headReady() {
  return new Promise(function(resolve) {
    if (document.head) { return resolve(); }
    window.addEventListener('load', function fn() {
      window.removeEventListener('load', fn);
      resolve();
    });
  });
}


/**
 * The Gecko platform doesn't yet have
 * `::content` or `:host`, selectors,
 * without these we are unable to style
 * user-content in the light-dom from
 * within our shadow-dom style-sheet.
 *
 * To workaround this, we clone the <style>
 * node into the root of the component,
 * so our selectors are able to target
 * light-dom content.
 *
 * @private
 */
function injectLightCss(el) {
  if (hasShadowCSS) { return; }
  el.lightStyle = document.createElement('style');
  el.lightStyle.setAttribute('scoped', '');
  el.lightStyle.innerHTML = el.lightCss;
  el.appendChild(el.lightStyle);
}

/**
 * Convert hyphen separated
 * string to camel-case.
 *
 * Example:
 *
 *   toCamelCase('foo-bar'); //=> 'fooBar'
 *
 * @private
 * @param  {Sring} string
 * @return {String}
 */
function toCamelCase(string) {
  return string.replace(/-(.)/g, function replacer(string, p1) {
    return p1.toUpperCase();
  });
}

/**
 * Observer (singleton)
 *
 * @type {MutationObserver|undefined}
 */
var dirObserver;

/**
 * Observes the document `dir` (direction)
 * attribute and dispatches a global event
 * when it changes.
 *
 * Components can listen to this event and
 * make internal changes if need be.
 *
 * @private
 */
function addDirObserver() {
  if (dirObserver) { return; }

  dirObserver = new MutationObserver(onChanged);
  dirObserver.observe(document.documentElement, {
    attributeFilter: ['dir'],
    attributes: true
  });

  function onChanged(mutations) {
    document.dispatchEvent(new Event('dirchanged'));
  }
}

/**
 * Copy the values of all properties from
 * source object `target` to a target object `source`.
 * It will return the target object.
 *
 * @private
 * @param   {Object} target
 * @param   {Object} source
 * @returns {Object}
 */
function mixin(target, source) {
  for (var key in source) {
    target[key] = source[key];
  }
  return target;
}

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('gaia-component',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-scene', {
  extends: HTMLDivElement.prototype,

  created: function() {
    this.setupEventHandlers();
    this.setupShadowRoot();
    this.setupRenderer();
    this.setupScene();
    this.setupCamera();
  },

  setupEventHandlers: function() {
    var processDevices = this.processDevices.bind(this);
    var onfullscreenchange = this.onfullscreenchange.bind(this);
    document.addEventListener("webkitfullscreenchange", onfullscreenchange);
    document.addEventListener("mozfullscreenchange",    onfullscreenchange);
    document.addEventListener("fullscreenchange",       onfullscreenchange);
    this.getVRDevices().then(processDevices)['catch'](function (err) {
      console.warn(err);
    });
  },

  onfullscreenchange: function() {
    if ( !document.mozFullScreenElement && !document.webkitFullScreenElement ) {
      this.viewporTransform = this.cameraProjectionTransform;
      this.vrMode = false;
      this.vrEffect.scale = 1;
    } else {
      this.vrMode = true;
      this.viewporTransform = "translate3d(-50%, -50%, 0px)";
      this.vrEffect.scale = 2500;
    }
    this.resizeCanvas();
  },

  addObject: function(el, provided_obj) {
    var obj = el.object3D;
    var objParent = el.parentNode;
    if (obj && this.scene.getObjectById(obj.id)) {
      return obj;
    }
    obj = el.object3D = el.object3D || provided_obj || new THREE.Object3D();
    obj.scene = this;
    if (objParent && objParent !== this) {
      objParent = this.addObject(el.parentNode);
      objParent.add(obj);
    } else {
      this.scene.add(obj);
    }
    return obj;
  },

  epsilon: function ( value ) {
    return Math.abs( value ) < 0.000001 ? 0 : value;
  },

  getCSSMatrix: function (matrix) {
    var epsilon = this.epsilon;
    var elements = matrix.elements;

    return 'matrix3d(' +
      epsilon( elements[ 0 ] ) + ',' +
      epsilon( elements[ 1 ] ) + ',' +
      epsilon( elements[ 2 ] ) + ',' +
      epsilon( elements[ 3 ] ) + ',' +
      epsilon( elements[ 4 ] ) + ',' +
      epsilon( elements[ 5 ] ) + ',' +
      epsilon( elements[ 6 ] ) + ',' +
      epsilon( elements[ 7 ] ) + ',' +
      epsilon( elements[ 8 ] ) + ',' +
      epsilon( elements[ 9 ] ) + ',' +
      epsilon( elements[ 10 ] ) + ',' +
      epsilon( elements[ 11 ] ) + ',' +
      epsilon( elements[ 12 ] ) + ',' +
      epsilon( elements[ 13 ] ) + ',' +
      epsilon( elements[ 14 ] ) + ',' +
      epsilon( elements[ 15 ] ) +
    ')';
  },

  setupCamera: function() {
    var fov = this.style.getPropertyValue('--fov') || 45;
    var viewport = this.viewport = this.shadowRoot.querySelector('.viewport');

    // DOM camera
    var perspectiveMatrix = this.perspectiveMatrix(THREE.Math.degToRad(45), this.offsetWidth / this.offsetHeight, 1, 10000);
    var scaled = perspectiveMatrix.clone().scale(new THREE.Vector3(this.offsetWidth, this.offsetHeight, 1));
    var style = this.cameraProjectionTransform = this.getCSSMatrix(scaled);
    this.viewporTransform = style;

    // WebGL camera
    var camera = this.camera = new THREE.PerspectiveCamera(45, this.offsetWidth / this.offsetHeight, 1, 10000);
    this.vrControls = new THREE.VRControls( camera );

  },

  perspectiveMatrix: function(fov, aspect, nearz, farz) {
    var matrix = new THREE.Matrix4();
    var range = Math.tan(fov * 0.5) * nearz;

    matrix.elements[0] = (2 * nearz) / ((range * aspect) - (-range * aspect));
    matrix.elements[1] = 0;
    matrix.elements[2] = 0;
    matrix.elements[3] = 0;
    matrix.elements[4] = 0;
    matrix.elements[5] = (2 * nearz) / (2 * range);
    matrix.elements[6] = 0;
    matrix.elements[7] = 0;
    matrix.elements[8] = 0;
    matrix.elements[9] = 0;
    matrix.elements[10] = -(farz + nearz) / (farz - nearz);
    matrix.elements[11] = -1;
    matrix.elements[12] = 0;
    matrix.elements[13] = 0;
    matrix.elements[14] = -(2 * farz * nearz) / (farz - nearz);
    matrix.elements[15] = 0;
    return matrix.transpose();
  },

  setupRenderer: function() {
    // All WebGL setup
    var canvas = this.canvas = this.shadowRoot.querySelector('canvas');

    this.resizeCanvas();
    window.addEventListener('resize', this.resizeCanvas.bind(this), false);

    var renderer = this.renderer = new THREE.WebGLRenderer( { canvas: canvas, antialias: true, alpha: true } );
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( this.canvas.width, this.canvas.height );
    renderer.sortObjects = false;
    this.vrEffect = new THREE.VREffect(renderer);
  },

  setupScene: function() {
    /// All WebGL Setup
    var scene = this.scene = new THREE.Scene();
    createLights();
    function createLights() {
      var directionalLight = new THREE.DirectionalLight(0xffffff);
      directionalLight.position.set(1, 1, 1).normalize();
      scene.add(directionalLight);
    }
  },

  updateChildren: function() {
    var child;
    var i;
    for (i = 0; i < this.children.length; ++i) {
      child = this.children[i];
      if (typeof child.update == 'function') { child.update(); }
      if (typeof child.updateChildren == 'function') { child.updateChildren(); }
    }
  },

  resizeCanvas: function(renderer, camera){
    var canvas = this.canvas;
    // Make it visually fill the positioned parent
    canvas.style.width ='100%';
    canvas.style.height='100%';
    // ...then set the internal size to match
    canvas.width  = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;

    if (this.camera) {
      this.camera.aspect = canvas.width / canvas.height;
      this.camera.updateProjectionMatrix();
    }

    if (this.renderer) {
      // notify the renderer of the size change
      this.renderer.setSize( canvas.width, canvas.height );
    }

  },

  animate: function() {
    var renderer = this.vrMode? this.vrEffect : this.renderer;
    this.updateChildren();
    this.vrControls.update();
    var orientation = this.vrControls.state.orientation;
    var orientationMatrix;
    var quaternion;
    if (orientation) {
      quaternion = new THREE.Quaternion(orientation.x, -orientation.y, orientation.z, orientation.w);
      orientationMatrix = new THREE.Matrix4().makeRotationFromQuaternion(quaternion);
      this.viewport.style.transform = this.viewporTransform + ' ' + this.getCSSMatrix(orientationMatrix);
    } else {
      this.viewport.style.transform = this.viewporTransform;
    }
    renderer.render(this.scene, this.camera);
  },

  attributeChanged: function(name, from, to) {
    if (name === "angle") {
      this.style.transform = 'rotateY( ' + this.angle + 'deg )';
    }
  },

  filterInvalidDevices: function(devices) {
    var oculusDevices = devices.filter(function (device) {
      return device.deviceName.toLowerCase().indexOf('oculus') !== -1;
    });

    if (oculusDevices.length >= 1) {
      return devices.filter(function (device) {
        return device.deviceName.toLowerCase().indexOf('cardboard') === -1;
      });
    } else {
      return devices;
    }
  },

   processDevices: function(devices) {
      devices = this.filterInvalidDevices(devices);

      var headset = undefined;
      var position = undefined;

      for (var i = 0; i < devices.length; i++) {
        var device = devices[i];
        if (device instanceof HMDVRDevice) {
          headset = device;
        }
        if (device instanceof PositionSensorVRDevice) {
          position = device;
        }
        if (position && headset) {
          this.vr = {
            headset: headset,
            position: position
          };
        }
      }
  },

  getVRDevices: function(callback) {
    return new Promise(function (resolve, reject) {
      if (navigator.getVRDevices) {
        navigator.getVRDevices().then(function (devices) {
          resolve(devices);
        }, reject);
      } else {
        reject('No VR devices found.');
      }
    });
  },

  startVR: function() {
    this.mozRequestFullScreen({
      vrDisplay: this.vr.headset
    });
  },

  resetSensor: function() {
    if (this.vr.position) {
      this.vr.position.resetSensor();
    }
  },

  template: `
    <canvas width="100%" height="100%"></canvas>
    <div class="viewport">
      <content></content>
    </div>

    <style>
      :host {
        position: absolute;
        display: inline-block;
        width: 100%;
        height: 100%;
        background-image:
          radial-gradient(
            #0B6790,
            #14364A
          );
      }

      .viewport {
        position: absolute;
        display: inline-block;
        width: 100%;
        height: 100%;
        transform-style: preserve-3d;
      }

      canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
    </style>`
});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRSCene',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-object', {
  extends: HTMLDivElement.prototype,

  created: function() {
    var dummy;
    this.setupShadowRoot();
    this.findScene();
    this.scene.addObject(this);
    this.updateTransform();
    //this.reportSize();
  },

  getChildren: function() {
    var children = this.childNodes;
    var objs = [];
    var i;
    var child;
    for (i=0; i<children.length; ++i) {
      child = children[i];
      if (child.tagName === "VR-OBJECT") {
        objs.push(child);
      }
    }
    return objs;
  },

  updateSize: function() {
    var elRect;
    var children = this.getChildren();
    var rect = {};
    var i;
    for (i = 0; i < children.length; ++i) {
      elRect = children[i].getBoundingClientRect();
      if (typeof rect.top === 'undefined' ||
          elRect.top < rect.top) {
        rect.top = elRect.top;
      }
      if (typeof rect.left === 'undefined' ||
          elRect.left < rect.left) {
        rect.left = elRect.left;
      }
      if (typeof rect.bottom === 'undefined' ||
          elRect.bottom > rect.bottom) {
        rect.bottom = elRect.bottom;
      }
      if (typeof rect.right === 'undefined' ||
         elRect.right > rect.right) {
        rect.right = elRect.right;
      }
    }
    this.style.top = rect.top;
    this.style.left = rect.left;
    this.style.width = (rect.right - rect.left) + 'px';
    this.style.height = (rect.bottom - rect.top) + 'px';
    //this.reportSize();
    return rect;
  },

  reportSize: function() {
    if (this.parentNode && this.parentNode.tagName === "VR-OBJECT") {
      this.parentNode.updateSize();
    }
  },

  attributeChanged: function(name, from, to) {
    this.updateTransform();
  },

  epsilon: function ( value ) {
    return Math.abs( value ) < 0.000001 ? 0 : value;
  },

  update: function() { /* NOOP */ },

  updateChildren: function() {
    var child;
    var i;
    for (i = 0; i < this.children.length; ++i) {
      child = this.children[i];
      if (typeof child.update == 'function') { child.update(); }
      if (typeof child.updateChildren == 'function') { child.updateChildren(); }
    }
  },

  getCSSMatrix: function (matrix) {
    var epsilon = this.epsilon;
    var elements = matrix.elements;

    return 'matrix3d(' +
      epsilon( elements[ 0 ] ) + ',' +
      epsilon( elements[ 1 ] ) + ',' +
      epsilon( elements[ 2 ] ) + ',' +
      epsilon( elements[ 3 ] ) + ',' +
      epsilon( elements[ 4 ] ) + ',' +
      epsilon( elements[ 5 ] ) + ',' +
      epsilon( elements[ 6 ] ) + ',' +
      epsilon( elements[ 7 ] ) + ',' +
      epsilon( elements[ 8 ] ) + ',' +
      epsilon( elements[ 9 ] ) + ',' +
      epsilon( elements[ 10 ] ) + ',' +
      epsilon( elements[ 11 ] ) + ',' +
      epsilon( elements[ 12 ] ) + ',' +
      epsilon( elements[ 13 ] ) + ',' +
      epsilon( elements[ 14 ] ) + ',' +
      epsilon( elements[ 15 ] ) +
    ')';
  },

  updateTransform: function() {
    var previousPosition = this.previousPosition = this.previousPosition || {};
    // Position
    var x = this.style.getPropertyValue('--x') || 0;
    var y = this.style.getPropertyValue('--y') || 0;
    var z = this.style.getPropertyValue('--z') || 0;
    var translation = new THREE.Matrix4().makeTranslation(x, y, -z);

    // Orientation
    var orientationX = this.style.getPropertyValue('--rotX') || 0;
    var orientationY = this.style.getPropertyValue('--rotY') || 0;
    var orientationZ = this.style.getPropertyValue('--rotZ') || 0;

    var rotX = THREE.Math.degToRad(orientationX);
    var rotY = THREE.Math.degToRad(orientationY);
    var rotZ = THREE.Math.degToRad(orientationZ);
    var rotationX = new THREE.Matrix4().makeRotationX(rotX);
    var rotationY = new THREE.Matrix4().makeRotationY(rotY);
    var rotationZ = new THREE.Matrix4().makeRotationZ(rotZ);
    this.style.transform = "translate3d(-50%, -50%, 0) " + this.getCSSMatrix(translation.multiply(rotationZ.multiply(rotationY.multiply(rotationX))));
    this.object3D.position.set(x, -y, -z);
    this.object3D.rotation.order = 'YXZ';
    this.object3D.rotation.set(-rotX, rotY, rotZ);

    // Report position? Only if changed
    // if (x !== previousPosition.x ||
    //     y !== previousPosition.y ||
    //     z !== previousPosition.z ) {
    //   debugger;
    //   this.reportSize();
    //   this.previousPosition = {
    //     x: x,
    //     y: y,
    //     z: z
    //   };
    // }
  },

  findScene: function() {
    var scenes = document.querySelectorAll('vr-scene');
    var perspective;
    for (var i=0; i < scenes.length; ++i) {
      this.scene = scenes[i];
    }
  },

  template: `
    <content></content>
    <style>
      :host {
        left: 50%;
        top: 50%;
        position: absolute;
        transform-style: preserve-3d;
      }

      .dummy {
        display: inline-block;
      }
    </style>
  `
});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRObject',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-camera', {
  extends: VRObject.prototype,

  updateTransform: function() {
    var elStyles = window.getComputedStyle(this);
    // Position
    var x = elStyles.getPropertyValue('--x') || 0;
    var y = elStyles.getPropertyValue('--y') || 0;
    var z = elStyles.getPropertyValue('--z') || 0;
    var translation = new THREE.Matrix4().makeTranslation(x, y, -z);

    // Orientation
    var orientationX = elStyles.getPropertyValue('--rotX') || 0;
    var orientationY = elStyles.getPropertyValue('--rotY') || 0;
    var orientationZ = elStyles.getPropertyValue('--rotZ') || 0;
    var rotX = THREE.Math.degToRad(orientationX);
    var rotY = THREE.Math.degToRad(orientationY);
    var rotZ = THREE.Math.degToRad(orientationZ);
    var rotationX = new THREE.Matrix4().makeRotationX(rotX);
    var rotationY = new THREE.Matrix4().makeRotationY(rotY);
    var rotationZ = new THREE.Matrix4().makeRotationX(rotZ);
    var matrixCSS = rotationZ.multiply(rotationY.multiply(rotationX.multiply(translation)));

    this.style.transform = 'translate3d(-50%, -50%, 0) ' + this.getCSSMatrix(matrixCSS);

    // Matrix threejs
    rotationX = new THREE.Matrix4().makeRotationX(-rotX);
    rotationY = new THREE.Matrix4().makeRotationY(rotY);
    rotationZ = new THREE.Matrix4().makeRotationX(rotZ);
    translation = new THREE.Matrix4().makeTranslation(x, -y, -z);
    var matrix = rotationZ.multiply(rotationY.multiply(rotationX.multiply(translation)));

    var object3D = this.object3D;
    object3D.matrix = matrix;
    object3D.matrixAutoUpdate = false;
    object3D.matrixWorldNeedsUpdate = true;
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRCamera',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-model', {
  extends: VRObject.prototype,

  created: function() {
    this.setupScene();
    VRObject.prototype.created.call(this);
  },

  setupScene: function() {
    var material = new THREE.MeshLambertMaterial({ color: 'magenta' });
    var model = this.model = new THREE.Mesh(new THREE.BoxGeometry(250, 250, 250), material);
    var x = this.style.getPropertyValue('--x') || 0;
    var y = this.style.getPropertyValue('--y') || 0;
    var z = this.style.getPropertyValue('--z');
    this.raycaster = new THREE.Raycaster();
    model.overdraw = true;
    model.position.set(x, y, -z);
    this.object3D = model;
    this.attachClickHandler();
    //this.animate();
  },

  attachClickHandler: function() {
    var self = this;
    self.mousePos = new THREE.Vector2(0, 0);
    //this.scene.addEventListener('mousemove', onMouseMoved, false);
    //document.addEventListener( 'mousedown', onDocumentMouseDown, false );

    function onMouseMoved ( e ) {
      e.preventDefault();
      self.mousePos.x = ( e.clientX / window.innerWidth ) * 2 - 1;
      self.mousePos.y = - ( e.clientY / window.innerHeight ) * 2 + 1;
    }

    function onDocumentMouseDown( e ) {
      if (self.intersected) {
        self.explode();
      }
      // e.preventDefault();
      // var mouseVector = new THREE.Vector3();
      // mouseVector.x = 2 * (e.clientX / SCREEN_WIDTH) - 1;
      // mouseVector.y = 1 - 2 * ( e.clientY / SCREEN_HEIGHT );
      // var raycaster = projector.pickingRay( mouseVector.clone(), camera );
      // var intersects = raycaster.intersectObject( TARGET );
      // for( var i = 0; i < intersects.length; i++ ) {
      //   var intersection = intersects[ i ],
      //   obj = intersection.object;
      //   cons ole.log("Intersected object", obj);
      // }
    }
  },

  explode: function() {

    var box = this.object3D;
    var scene = this.scene;
    var duration = 8000;
    this.exploding = true;

    // explode geometry into objects
    var pieces = explode( box.geometry, box.material );

    box.material.visible = false;

    // animate objects
    for ( var i = 0; i < pieces.children.length; i ++ ) {

      var object = pieces.children[ i ];

      object.geometry.computeFaceNormals();
      var normal = object.geometry.faces[0].normal.clone();
      var targetPosition = object.position.clone().add( normal.multiplyScalar( 3000 ) );
      //removeBoxFromList( box );
      new TWEEN.Tween( object.position )
        .to( targetPosition, duration )
        .onComplete( deleteBox )
        .start();

      object.material.opacity = 0;
      new TWEEN.Tween( object.material )
        .to( { opacity: 1 }, duration )
        .start();

      var rotation = 2 * Math.PI;
      var targetRotation = { x: rotation, y: rotation, z:rotation };
      new TWEEN.Tween( object.rotation )
        .to( targetRotation, duration )
        .start();

    }

    box.add( pieces );

    function removeBoxFromList( box ) {
      for (var i = 0; i < objects.length; i++) {
        if (objects[i] === box) {
          objects.splice(i, 1);
          return;
        }
      }
    }

    function deleteBox() {
      box.remove( pieces )
      //scene.remove( box );
    }

    function explode( geometry, material ) {

      var pieces = new THREE.Group();
      var material = material.clone();
      material.side = THREE.DoubleSide;

      for ( var i = 0; i < geometry.faces.length; i ++ ) {

        var face = geometry.faces[ i ];

        var vertexA = geometry.vertices[ face.a ].clone();
        var vertexB = geometry.vertices[ face.b ].clone();
        var vertexC = geometry.vertices[ face.c ].clone();

        var geometry2 = new THREE.Geometry();
        geometry2.vertices.push( vertexA, vertexB, vertexC );
        geometry2.faces.push( new THREE.Face3( 0, 1, 2 ) );

        var mesh = new THREE.Mesh( geometry2, material );
        mesh.position.sub( geometry2.center() );
        pieces.add( mesh );

      }

      //sort the pieces
      pieces.children.sort( function ( a, b ) {

        return a.position.z - b.position.z;
        //return a.position.x - b.position.x;     // sort x
        //return b.position.y - a.position.y;   // sort y

      } );

      pieces.rotation.set( 0, 0, 0 )

      return pieces;

    }

  },

  animate: function() {
    var self = this;
    var lastTime = self.lastTime || 0;
    var angularSpeed = self.angularSpeed || 0.2;
    requestAnimationFrame(function() {
      self.animate();
      TWEEN.update();
    });

    if (!this.exploding) {
      var time = (new Date()).getTime();
      var timeDiff = time - lastTime;
      var angleChange = angularSpeed * timeDiff * 2 * Math.PI / 1000;
      self.model.rotation.y += angleChange;
      self.lastTime = time;
      //this.intersectMouse();
    }
  },

  // find intersections
  intersectMouse: function intersect() {
    var raycaster = this.raycaster;
    var objects = [this.object3D];
    raycaster.setFromCamera( this.mousePos, this.scene.camera );
    var intersects = raycaster.intersectObjects( objects );

    if ( intersects.length > 0 ) {

      if ( this.object3D == intersects[ 0 ].object && !this.intersected) {

        this.intersected = this.object3D.material.emissive.getHex();
        this.object3D.material.emissive.setHex( 0xffff00 );

      }

    } else {

      if ( this.intersected ) this.object3D.material.emissive.set( 'black' );
      this.intersected = null;

    }
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRModel',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-billboard', {
  extends: VRObject.prototype,

  created: function() {
    VRObject.prototype.created.call(this);
    this.updateTransform();
  },

  update: function() {
    this.updateTransform();
  },

  updateTransform: function() {
    var camera = document.querySelector('vr-camera');
    var matrix = new THREE.Matrix4();
    matrix.copy( matrix.getInverse(camera.object3D.matrixWorld) );
    matrix.copy( camera.object3D.matrixWorld );

    matrix.transpose();

    matrix.elements[ 3 ] = 0;
    matrix.elements[ 7 ] = 0;
    matrix.elements[ 11 ] = 0;
    matrix.elements[ 15 ] = 1;

    // Position
    var x = this.style.getPropertyValue('--x') || 0;
    var y = this.style.getPropertyValue('--y') || 0;
    var z = this.style.getPropertyValue('--z') || 0;
    var translation = new THREE.Matrix4().makeTranslation(x, y, -z);

    // Orientation
    var orientationX = this.style.getPropertyValue('--rotX') || 0;
    var orientationY = this.style.getPropertyValue('--rotY') || 0;
    var orientationZ = this.style.getPropertyValue('--rotZ') || 0;

    var rotX = THREE.Math.degToRad(orientationX);
    var rotY = THREE.Math.degToRad(orientationY);
    var rotZ = THREE.Math.degToRad(orientationZ);
    var rotationX = new THREE.Matrix4().makeRotationX(rotX);
    var rotationY = new THREE.Matrix4().makeRotationY(rotY);
    var rotationZ = new THREE.Matrix4().makeRotationX(rotZ);

    this.style.transform = 'translate3d(-50%, -50%, 0) ' + this.getCSSMatrix(translation.multiply(rotationZ.multiply(rotationY.multiply(rotationX.multiply(matrix)))));
    this.object3D.position.set(x, -y, -z);
    this.object3D.rotation.order = 'YXZ';
    this.object3D.rotation.set(-rotX, rotY, rotZ);
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRBillboard',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-terrain', {
  extends: VRObject.prototype,

  created: function() {
    var self = this;
    this.setupScene(onLoaded);
    function onLoaded() {
      VRObject.prototype.created.call(self);
      self.generateLabels(noise);
    }
  },

  setupScene: function(onLoaded) {
    var self = this;
    this.terrainSize = 1024;
    new Terrain(noise, this.terrainSize, 2, 64, function(model) {;
      self.object3D = model;
      onLoaded();
    });
  },

  generateLabels: function(noise) {
    var label;
    var max = 15;
    for(var i = 0; i < noise.image.data.length; ++i) {
      var noiseValue = noise.image.data[i];
      var sign1 = (Math.random()*10).toFixed(0) % 2 === 0? -1: 1;
      var sign2 = (Math.random()*10).toFixed(0) % 2 === 0? -1: 1;
      if (noiseValue > 80) {
        label = document.createElement('vr-billboard');
        label.classList.add('peak-label');
        label.style.setProperty('--x',  sign1 * (Math.random() * this.terrainSize));
        label.style.setProperty('--y',  sign2 * (Math.random() * this.terrainSize));
        label.style.setProperty('--z',  -noiseValue);
        label.style.setProperty('--rotX',  -90);
        label.innerHTML = "Landmark " + i;
        this.appendChild(label);
        max-=1;
        if (max == 0) {
          return;
        }
      }
    }
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRTerrain',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-axis-gl', {
  extends: VRObject.prototype,

  created: function() {
    this.setupScene();
    VRObject.prototype.created.call(this);
  },

  setupScene: function() {
    this.object3D = new THREE.AxisHelper( 500 );
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRAxisGL',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-axis-dom', {
  extends: VRObject.prototype,

  template: `
    <div class="axis x-axis"></div>
    <div class="axis y-axis"></div>
    <div class="axis z-axis"></div>
    <style>
    :host {
      left: 50%;
      top: 50%;
      position: absolute;
      transform-style: preserve-3d;
    }

    .axis {
      position: absolute;
      display: inline-block;
    }

    .x-axis {
      height: 1px;
      width: 500px;
      background-color: pink;
    }

    .y-axis {
      height: 500px;
      width: 1px;
      background-color: magent;
      transform: translate3d(0, -500px, 0);
    }

    .z-axis {
      height: 1px;
      width: 500px;
      background-color: violet;
      transform: translate3d(-50%, 0, 250px) rotateY(90deg);
    }
    </style>
  `

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRAxisDOM',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

var r = "textures/bridge/";
var urls = [ r + "posx.jpg", r + "negx.jpg",
             r + "posy.jpg", r + "negy.jpg",
             r + "posz.jpg", r + "negz.jpg" ];
var textureCube = THREE.ImageUtils.loadTextureCube( urls );
textureCube.format = THREE.RGBFormat;

/**
 * Exports
 */

module.exports = component.register('vr-lambo', {
  extends: VRObject.prototype,

  created: function() {
    var self = this;
    var modelInfo = this.modelInfo;
    var materials = this.materials;
    modelInfo.materials = {
      body: [
        [ "Orange metal",  materials[ "Orange metal" ] ],
        [ "Blue metal",   materials[ "Blue metal" ] ],
        [ "Red metal",    materials[ "Red metal" ] ],
        [ "Green metal",  materials[ "Green metal" ] ],
        [ "Black metal",  materials[ "Black metal" ] ],
        [ "Gold",     materials[ "Gold" ] ],
        [ "Bronze",   materials[ "Bronze" ] ],
        [ "Chrome",   materials[ "Chrome" ] ]
      ],
      mmap: {
        0: materials[ "Black rough" ],   // tires + inside
        1: materials[ "Pure chrome" ],   // wheels + extras chrome
        2: materials[ "Bronze" ],       // back / top / front torso
        3: materials[ "Light glass" ],    // glass
        4: materials[ "Pure chrome" ],   // sides torso
        5: materials[ "Pure chrome" ],   // engine
        6: materials[ "Red glass 50" ],    // backlights
        7: materials[ "Orange glass 50" ]  // backsignals
      }
    };
    this.setupScene(onLoaded);
    function onLoaded() {
      VRObject.prototype.created.call(self);
      var ambient = new THREE.AmbientLight( 0x050505 );
      self.scene.scene.add( ambient );

      var directionalLight = new THREE.DirectionalLight( 0xffffff, 2 );
      directionalLight.position.set( 2, 1.2, 10 ).normalize();
      self.scene.scene.add( directionalLight );

      directionalLight = new THREE.DirectionalLight( 0xffffff, 1 );
      directionalLight.position.set( -2, 1.2, -10 ).normalize();
      self.scene.scene.add( directionalLight );

      var pointLight = new THREE.PointLight( 0xffaa00, 2 );
      pointLight.position.set( 2000, 1200, 10000 );
      self.scene.scene.add( pointLight );
    }
  },

  // common materials
  materials: {
    "Orange":   new THREE.MeshLambertMaterial( { color: 0xff6600, ambient: 0xff2200, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.3 } ),
    "Blue":   new THREE.MeshLambertMaterial( { color: 0x001133, ambient: 0x001133, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.3 } ),
    "Red":    new THREE.MeshLambertMaterial( { color: 0x660000, ambient: 0x330000, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.25 } ),
    "Black":  new THREE.MeshLambertMaterial( { color: 0x000000, ambient: 0x000000, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.15 } ),
    "White":  new THREE.MeshLambertMaterial( { color: 0xffffff, ambient: 0x666666, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.25 } ),

    "Carmine":  new THREE.MeshPhongMaterial( { color: 0x770000, specular:0xffaaaa, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Gold":   new THREE.MeshPhongMaterial( { color: 0xaa9944, specular:0xbbaa99, shininess:50, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Bronze": new THREE.MeshPhongMaterial( { color: 0x150505, specular:0xee6600, shininess:10, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.25 } ),
    "Chrome":   new THREE.MeshPhongMaterial( { color: 0xffffff, specular:0xffffff, envMap: textureCube, combine: THREE.MultiplyOperation } ),

    "Orange metal": new THREE.MeshLambertMaterial( { color: 0xff6600, ambient: 0xff2200, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Blue metal":   new THREE.MeshLambertMaterial( { color: 0x001133, ambient: 0x002266, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Red metal":  new THREE.MeshLambertMaterial( { color: 0x770000, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Green metal":  new THREE.MeshLambertMaterial( { color: 0x007711, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Black metal":  new THREE.MeshLambertMaterial( { color: 0x222222, envMap: textureCube, combine: THREE.MultiplyOperation } ),

    "Pure chrome":  new THREE.MeshLambertMaterial( { color: 0xffffff, envMap: textureCube } ),
    "Dark chrome":  new THREE.MeshLambertMaterial( { color: 0x444444, envMap: textureCube } ),
    "Darker chrome":new THREE.MeshLambertMaterial( { color: 0x222222, envMap: textureCube } ),

    "Black glass":  new THREE.MeshLambertMaterial( { color: 0x101016, envMap: textureCube, opacity: 0.975, transparent: true } ),
    "Dark glass": new THREE.MeshLambertMaterial( { color: 0x101046, envMap: textureCube, opacity: 0.25, transparent: true } ),
    "Blue glass": new THREE.MeshLambertMaterial( { color: 0x668899, envMap: textureCube, opacity: 0.75, transparent: true } ),
    "Light glass":  new THREE.MeshBasicMaterial( { color: 0x223344, envMap: textureCube, opacity: 0.25, transparent: true, combine: THREE.MixOperation, reflectivity: 0.25 } ),

    "Red glass":  new THREE.MeshLambertMaterial( { color: 0xff0000, opacity: 0.75, transparent: true } ),
    "Yellow glass": new THREE.MeshLambertMaterial( { color: 0xffffaa, opacity: 0.75, transparent: true } ),
    "Orange glass": new THREE.MeshLambertMaterial( { color: 0x995500, opacity: 0.75, transparent: true } ),

    "Orange glass 50":  new THREE.MeshLambertMaterial( { color: 0xffbb00, opacity: 0.5, transparent: true } ),
    "Red glass 50":   new THREE.MeshLambertMaterial( { color: 0xff0000, opacity: 0.5, transparent: true } ),

    "Fullblack rough":  new THREE.MeshLambertMaterial( { color: 0x000000 } ),
    "Black rough":    new THREE.MeshLambertMaterial( { color: 0x050505 } ),
    "Darkgray rough": new THREE.MeshLambertMaterial( { color: 0x090909 } ),
    "Red rough":    new THREE.MeshLambertMaterial( { color: 0x330500 } ),

    "Darkgray shiny": new THREE.MeshPhongMaterial( { color: 0x000000, specular: 0x050505 } ),
    "Gray shiny":   new THREE.MeshPhongMaterial( { color: 0x050505, shininess: 20 } )
  },

  modelInfo: {
    name: "Bugatti Veyron",
    url:  "obj/veyron/VeyronNoUv_bin.js",
    author: '<a href="http://artist-3d.com/free_3d_models/dnm/model_disp.php?uid=1129" target="_blank">Troyano</a>',
    init_rotation: [ 0, 0, 0 ],
    scale: 5.5,
    init_material: 4,
    body_materials: [ 2 ],
    object: null,
    buttons: null,
    materials: null
  },

  setupScene: function(onLoaded) {
    var self = this;
    var loader = new THREE.BinaryLoader(true);
    loader.load(this.modelInfo.url, function(geometry) {
      var modelInfo = self.modelInfo;
      var material = new THREE.MeshFaceMaterial();
      var scale = modelInfo.scale * 1;
      var rotation = modelInfo.init_rotation;
      var materials = modelInfo.materials;
      var initMaterial = modelInfo.init_material;
      var bodyMaterials = modelInfo.body_materials;
      for ( var i in modelInfo.materials.mmap ) {
        material.materials[ i ] = modelInfo.materials.mmap[ i ];
      }
      var mesh = new THREE.Mesh( geometry, material );
      mesh.rotation.x = rotation[ 0 ];
      mesh.rotation.y = rotation[ 1 ];
      mesh.rotation.z = rotation[ 2 ];
      mesh.scale.x = mesh.scale.y = mesh.scale.z = scale;
      var x = parseInt(self.style.getPropertyValue('--x')) || 0;
      var y = parseInt(self.style.getPropertyValue('--y')) || 0;
      var z = parseInt(self.style.getPropertyValue('--z')) || 0;
      mesh.position.set(x, y, -z);
      self.object3D = mesh;
      onLoaded();
    });
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRModel',this));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJpbmFyeUxvYWRlci5qcyIsImdhaWEtY29tcG9uZW50LmpzIiwidnItc2NlbmUuanMiLCJ2ci1vYmplY3QuanMiLCJ2ci1jYW1lcmEuanMiLCJ2ci1tb2RlbC5qcyIsInZyLWJpbGxib2FyZC5qcyIsInZyLXRlcnJhaW4uanMiLCJ2ci1heGlzLWdsLmpzIiwidnItYXhpcy1kb20uanMiLCJ2ci1sYW1iby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNodkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcGFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMvVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDeE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6InZyLWNvbXBvbmVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuVEhSRUUuQmluYXJ5TG9hZGVyID0gZnVuY3Rpb24gKCBzaG93U3RhdHVzICkge1xuXG4gIFRIUkVFLkxvYWRlci5jYWxsKCB0aGlzLCBzaG93U3RhdHVzICk7XG5cbn07XG5cblRIUkVFLkJpbmFyeUxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUSFJFRS5Mb2FkZXIucHJvdG90eXBlICk7XG5USFJFRS5CaW5hcnlMb2FkZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVEhSRUUuQmluYXJ5TG9hZGVyO1xuXG4vLyBMb2FkIG1vZGVscyBnZW5lcmF0ZWQgYnkgc2xpbSBPQkogY29udmVydGVyIHdpdGggQklOQVJZIG9wdGlvbiAoY29udmVydGVyX29ial90aHJlZV9zbGltLnB5IC10IGJpbmFyeSlcbi8vICAtIGJpbmFyeSBtb2RlbHMgY29uc2lzdCBvZiB0d28gZmlsZXM6IEpTIGFuZCBCSU5cbi8vICAtIHBhcmFtZXRlcnNcbi8vICAgIC0gdXJsIChyZXF1aXJlZClcbi8vICAgIC0gY2FsbGJhY2sgKHJlcXVpcmVkKVxuLy8gICAgLSB0ZXh0dXJlUGF0aCAob3B0aW9uYWw6IGlmIG5vdCBzcGVjaWZpZWQsIHRleHR1cmVzIHdpbGwgYmUgYXNzdW1lZCB0byBiZSBpbiB0aGUgc2FtZSBmb2xkZXIgYXMgSlMgbW9kZWwgZmlsZSlcbi8vICAgIC0gYmluYXJ5UGF0aCAob3B0aW9uYWw6IGlmIG5vdCBzcGVjaWZpZWQsIGJpbmFyeSBmaWxlIHdpbGwgYmUgYXNzdW1lZCB0byBiZSBpbiB0aGUgc2FtZSBmb2xkZXIgYXMgSlMgbW9kZWwgZmlsZSlcblxuVEhSRUUuQmluYXJ5TG9hZGVyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCB1cmwsIGNhbGxiYWNrLCB0ZXh0dXJlUGF0aCwgYmluYXJ5UGF0aCApIHtcblxuICAvLyB0b2RvOiB1bmlmeSBsb2FkIEFQSSB0byBmb3IgZWFzaWVyIFNjZW5lTG9hZGVyIHVzZVxuXG4gIHRleHR1cmVQYXRoID0gdGV4dHVyZVBhdGggfHwgdGhpcy5leHRyYWN0VXJsQmFzZSggdXJsICk7XG4gIGJpbmFyeVBhdGggPSBiaW5hcnlQYXRoIHx8IHRoaXMuZXh0cmFjdFVybEJhc2UoIHVybCApO1xuXG4gIHZhciBjYWxsYmFja1Byb2dyZXNzID0gdGhpcy5zaG93UHJvZ3Jlc3MgPyBUSFJFRS5Mb2FkZXIucHJvdG90eXBlLnVwZGF0ZVByb2dyZXNzIDogdW5kZWZpbmVkO1xuXG4gIHRoaXMub25Mb2FkU3RhcnQoKTtcblxuICAvLyAjMSBsb2FkIEpTIHBhcnQgdmlhIHdlYiB3b3JrZXJcblxuICB0aGlzLmxvYWRBamF4SlNPTiggdGhpcywgdXJsLCBjYWxsYmFjaywgdGV4dHVyZVBhdGgsIGJpbmFyeVBhdGgsIGNhbGxiYWNrUHJvZ3Jlc3MgKTtcblxufTtcblxuVEhSRUUuQmluYXJ5TG9hZGVyLnByb3RvdHlwZS5sb2FkQWpheEpTT04gPSBmdW5jdGlvbiAoIGNvbnRleHQsIHVybCwgY2FsbGJhY2ssIHRleHR1cmVQYXRoLCBiaW5hcnlQYXRoLCBjYWxsYmFja1Byb2dyZXNzICkge1xuXG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICB0ZXh0dXJlUGF0aCA9IHRleHR1cmVQYXRoICYmICggdHlwZW9mIHRleHR1cmVQYXRoID09PSBcInN0cmluZ1wiICkgPyB0ZXh0dXJlUGF0aCA6IHRoaXMuZXh0cmFjdFVybEJhc2UoIHVybCApO1xuICBiaW5hcnlQYXRoID0gYmluYXJ5UGF0aCAmJiAoIHR5cGVvZiBiaW5hcnlQYXRoID09PSBcInN0cmluZ1wiICkgPyBiaW5hcnlQYXRoIDogdGhpcy5leHRyYWN0VXJsQmFzZSggdXJsICk7XG5cbiAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIGlmICggeGhyLnJlYWR5U3RhdGUgPT0gNCApIHtcblxuICAgICAgaWYgKCB4aHIuc3RhdHVzID09IDIwMCB8fCB4aHIuc3RhdHVzID09IDAgKSB7XG5cbiAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKCB4aHIucmVzcG9uc2VUZXh0ICk7XG4gICAgICAgIGNvbnRleHQubG9hZEFqYXhCdWZmZXJzKCBqc29uLCBjYWxsYmFjaywgYmluYXJ5UGF0aCwgdGV4dHVyZVBhdGgsIGNhbGxiYWNrUHJvZ3Jlc3MgKTtcblxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICBjb25zb2xlLmVycm9yKCBcIlRIUkVFLkJpbmFyeUxvYWRlcjogQ291bGRuJ3QgbG9hZCBbXCIgKyB1cmwgKyBcIl0gW1wiICsgeGhyLnN0YXR1cyArIFwiXVwiICk7XG5cbiAgICAgIH1cblxuICAgIH1cblxuICB9O1xuXG4gIHhoci5vcGVuKCBcIkdFVFwiLCB1cmwsIHRydWUgKTtcbiAgeGhyLnNlbmQoIG51bGwgKTtcblxufTtcblxuVEhSRUUuQmluYXJ5TG9hZGVyLnByb3RvdHlwZS5sb2FkQWpheEJ1ZmZlcnMgPSBmdW5jdGlvbiAoIGpzb24sIGNhbGxiYWNrLCBiaW5hcnlQYXRoLCB0ZXh0dXJlUGF0aCwgY2FsbGJhY2tQcm9ncmVzcyApIHtcblxuICB2YXIgc2NvcGUgPSB0aGlzO1xuXG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICB1cmwgPSBiaW5hcnlQYXRoICsganNvbi5idWZmZXJzO1xuXG4gIHhoci5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cbiAgICB2YXIgYnVmZmVyID0geGhyLnJlc3BvbnNlO1xuXG4gICAgaWYgKCBidWZmZXIgPT09IHVuZGVmaW5lZCApIHtcblxuICAgICAgLy8gSUVXRUJHTCBuZWVkcyB0aGlzXG4gICAgICBidWZmZXIgPSAoIG5ldyBVaW50OEFycmF5KCB4aHIucmVzcG9uc2VCb2R5ICkgKS5idWZmZXI7XG5cbiAgICB9XG5cbiAgICBpZiAoIGJ1ZmZlci5ieXRlTGVuZ3RoID09IDAgKSB7ICAvLyBpT1MgYW5kIG90aGVyIFhNTEh0dHBSZXF1ZXN0IGxldmVsIDFcblxuICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlciggeGhyLnJlc3BvbnNlVGV4dC5sZW5ndGggKTtcblxuICAgICAgdmFyIGJ1ZlZpZXcgPSBuZXcgVWludDhBcnJheSggYnVmZmVyICk7XG5cbiAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhoci5yZXNwb25zZVRleHQubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuICAgICAgICBidWZWaWV3WyBpIF0gPSB4aHIucmVzcG9uc2VUZXh0LmNoYXJDb2RlQXQoIGkgKSAmIDB4ZmY7XG5cbiAgICAgIH1cblxuICAgIH1cblxuICAgIHNjb3BlLmNyZWF0ZUJpbk1vZGVsKCBidWZmZXIsIGNhbGxiYWNrLCB0ZXh0dXJlUGF0aCwganNvbi5tYXRlcmlhbHMgKTtcblxuICB9LCBmYWxzZSApO1xuXG4gIGlmICggY2FsbGJhY2tQcm9ncmVzcyAhPT0gdW5kZWZpbmVkICkge1xuXG4gICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoICdwcm9ncmVzcycsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cbiAgICAgIGlmICggZXZlbnQubGVuZ3RoQ29tcHV0YWJsZSApIHtcblxuICAgICAgICBjYWxsYmFja1Byb2dyZXNzKCBldmVudCApO1xuXG4gICAgICB9XG5cbiAgICB9LCBmYWxzZSApO1xuXG4gIH1cblxuICB4aHIuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgZnVuY3Rpb24gKCBldmVudCApIHtcblxuICAgIGNvbnNvbGUuZXJyb3IoIFwiVEhSRUUuQmluYXJ5TG9hZGVyOiBDb3VsZG4ndCBsb2FkIFtcIiArIHVybCArIFwiXSBbXCIgKyB4aHIuc3RhdHVzICsgXCJdXCIgKTtcblxuICB9LCBmYWxzZSApO1xuXG5cbiAgeGhyLm9wZW4oIFwiR0VUXCIsIHVybCwgdHJ1ZSApO1xuICB4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICBpZiAoIHhoci5vdmVycmlkZU1pbWVUeXBlICkgeGhyLm92ZXJyaWRlTWltZVR5cGUoIFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiICk7XG4gIHhoci5zZW5kKCBudWxsICk7XG5cbn07XG5cbi8vIEJpbmFyeSBBSkFYIHBhcnNlclxuXG5USFJFRS5CaW5hcnlMb2FkZXIucHJvdG90eXBlLmNyZWF0ZUJpbk1vZGVsID0gZnVuY3Rpb24gKCBkYXRhLCBjYWxsYmFjaywgdGV4dHVyZVBhdGgsIGpzb25NYXRlcmlhbHMgKSB7XG5cbiAgdmFyIE1vZGVsID0gZnVuY3Rpb24gKCB0ZXh0dXJlUGF0aCApIHtcblxuICAgIHZhciBzY29wZSA9IHRoaXMsXG4gICAgICBjdXJyZW50T2Zmc2V0ID0gMCxcbiAgICAgIG1kLFxuICAgICAgbm9ybWFscyA9IFtdLFxuICAgICAgdXZzID0gW10sXG4gICAgICBzdGFydF90cmlfZmxhdCwgc3RhcnRfdHJpX3Ntb290aCwgc3RhcnRfdHJpX2ZsYXRfdXYsIHN0YXJ0X3RyaV9zbW9vdGhfdXYsXG4gICAgICBzdGFydF9xdWFkX2ZsYXQsIHN0YXJ0X3F1YWRfc21vb3RoLCBzdGFydF9xdWFkX2ZsYXRfdXYsIHN0YXJ0X3F1YWRfc21vb3RoX3V2LFxuICAgICAgdHJpX3NpemUsIHF1YWRfc2l6ZSxcbiAgICAgIGxlbl90cmlfZmxhdCwgbGVuX3RyaV9zbW9vdGgsIGxlbl90cmlfZmxhdF91diwgbGVuX3RyaV9zbW9vdGhfdXYsXG4gICAgICBsZW5fcXVhZF9mbGF0LCBsZW5fcXVhZF9zbW9vdGgsIGxlbl9xdWFkX2ZsYXRfdXYsIGxlbl9xdWFkX3Ntb290aF91djtcblxuXG4gICAgVEhSRUUuR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG4gICAgbWQgPSBwYXJzZU1ldGFEYXRhKCBkYXRhLCBjdXJyZW50T2Zmc2V0ICk7XG5cbiAgICBjdXJyZW50T2Zmc2V0ICs9IG1kLmhlYWRlcl9ieXRlcztcbi8qXG4gICAgbWQudmVydGV4X2luZGV4X2J5dGVzID0gVWludDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7XG4gICAgbWQubWF0ZXJpYWxfaW5kZXhfYnl0ZXMgPSBVaW50MTZBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcbiAgICBtZC5ub3JtYWxfaW5kZXhfYnl0ZXMgPSBVaW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcbiAgICBtZC51dl9pbmRleF9ieXRlcyA9IFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UO1xuKi9cbiAgICAvLyBidWZmZXJzIHNpemVzXG5cbiAgICB0cmlfc2l6ZSA9ICBtZC52ZXJ0ZXhfaW5kZXhfYnl0ZXMgKiAzICsgbWQubWF0ZXJpYWxfaW5kZXhfYnl0ZXM7XG4gICAgcXVhZF9zaXplID0gbWQudmVydGV4X2luZGV4X2J5dGVzICogNCArIG1kLm1hdGVyaWFsX2luZGV4X2J5dGVzO1xuXG4gICAgbGVuX3RyaV9mbGF0ICAgICAgPSBtZC5udHJpX2ZsYXQgICAgICAqICggdHJpX3NpemUgKTtcbiAgICBsZW5fdHJpX3Ntb290aCAgICA9IG1kLm50cmlfc21vb3RoICAgICogKCB0cmlfc2l6ZSArIG1kLm5vcm1hbF9pbmRleF9ieXRlcyAqIDMgKTtcbiAgICBsZW5fdHJpX2ZsYXRfdXYgICA9IG1kLm50cmlfZmxhdF91diAgICogKCB0cmlfc2l6ZSArIG1kLnV2X2luZGV4X2J5dGVzICogMyApO1xuICAgIGxlbl90cmlfc21vb3RoX3V2ID0gbWQubnRyaV9zbW9vdGhfdXYgKiAoIHRyaV9zaXplICsgbWQubm9ybWFsX2luZGV4X2J5dGVzICogMyArIG1kLnV2X2luZGV4X2J5dGVzICogMyApO1xuXG4gICAgbGVuX3F1YWRfZmxhdCAgICAgID0gbWQubnF1YWRfZmxhdCAgICAgICogKCBxdWFkX3NpemUgKTtcbiAgICBsZW5fcXVhZF9zbW9vdGggICAgPSBtZC5ucXVhZF9zbW9vdGggICAgKiAoIHF1YWRfc2l6ZSArIG1kLm5vcm1hbF9pbmRleF9ieXRlcyAqIDQgKTtcbiAgICBsZW5fcXVhZF9mbGF0X3V2ICAgPSBtZC5ucXVhZF9mbGF0X3V2ICAgKiAoIHF1YWRfc2l6ZSArIG1kLnV2X2luZGV4X2J5dGVzICogNCApO1xuICAgIGxlbl9xdWFkX3Ntb290aF91diA9IG1kLm5xdWFkX3Ntb290aF91diAqICggcXVhZF9zaXplICsgbWQubm9ybWFsX2luZGV4X2J5dGVzICogNCArIG1kLnV2X2luZGV4X2J5dGVzICogNCApO1xuXG4gICAgLy8gcmVhZCBidWZmZXJzXG5cbiAgICBjdXJyZW50T2Zmc2V0ICs9IGluaXRfdmVydGljZXMoIGN1cnJlbnRPZmZzZXQgKTtcblxuICAgIGN1cnJlbnRPZmZzZXQgKz0gaW5pdF9ub3JtYWxzKCBjdXJyZW50T2Zmc2V0ICk7XG4gICAgY3VycmVudE9mZnNldCArPSBoYW5kbGVQYWRkaW5nKCBtZC5ubm9ybWFscyAqIDMgKTtcblxuICAgIGN1cnJlbnRPZmZzZXQgKz0gaW5pdF91dnMoIGN1cnJlbnRPZmZzZXQgKTtcblxuICAgIHN0YXJ0X3RyaV9mbGF0ICAgID0gY3VycmVudE9mZnNldDtcbiAgICBzdGFydF90cmlfc21vb3RoICAgID0gc3RhcnRfdHJpX2ZsYXQgICAgKyBsZW5fdHJpX2ZsYXQgICAgKyBoYW5kbGVQYWRkaW5nKCBtZC5udHJpX2ZsYXQgKiAyICk7XG4gICAgc3RhcnRfdHJpX2ZsYXRfdXYgICA9IHN0YXJ0X3RyaV9zbW9vdGggICsgbGVuX3RyaV9zbW9vdGggICsgaGFuZGxlUGFkZGluZyggbWQubnRyaV9zbW9vdGggKiAyICk7XG4gICAgc3RhcnRfdHJpX3Ntb290aF91diA9IHN0YXJ0X3RyaV9mbGF0X3V2ICsgbGVuX3RyaV9mbGF0X3V2ICsgaGFuZGxlUGFkZGluZyggbWQubnRyaV9mbGF0X3V2ICogMiApO1xuXG4gICAgc3RhcnRfcXVhZF9mbGF0ICAgICA9IHN0YXJ0X3RyaV9zbW9vdGhfdXYgKyBsZW5fdHJpX3Ntb290aF91diAgKyBoYW5kbGVQYWRkaW5nKCBtZC5udHJpX3Ntb290aF91diAqIDIgKTtcbiAgICBzdGFydF9xdWFkX3Ntb290aCAgID0gc3RhcnRfcXVhZF9mbGF0ICAgICArIGxlbl9xdWFkX2ZsYXQgICAgKyBoYW5kbGVQYWRkaW5nKCBtZC5ucXVhZF9mbGF0ICogMiApO1xuICAgIHN0YXJ0X3F1YWRfZmxhdF91diAgPSBzdGFydF9xdWFkX3Ntb290aCAgICsgbGVuX3F1YWRfc21vb3RoICAgICsgaGFuZGxlUGFkZGluZyggbWQubnF1YWRfc21vb3RoICogMiApO1xuICAgIHN0YXJ0X3F1YWRfc21vb3RoX3V2PSBzdGFydF9xdWFkX2ZsYXRfdXYgICsgbGVuX3F1YWRfZmxhdF91diAgICsgaGFuZGxlUGFkZGluZyggbWQubnF1YWRfZmxhdF91diAqIDIgKTtcblxuICAgIC8vIGhhdmUgdG8gZmlyc3QgcHJvY2VzcyBmYWNlcyB3aXRoIHV2c1xuICAgIC8vIHNvIHRoYXQgZmFjZSBhbmQgdXYgaW5kaWNlcyBtYXRjaFxuXG4gICAgaW5pdF90cmlhbmdsZXNfZmxhdF91diggc3RhcnRfdHJpX2ZsYXRfdXYgKTtcbiAgICBpbml0X3RyaWFuZ2xlc19zbW9vdGhfdXYoIHN0YXJ0X3RyaV9zbW9vdGhfdXYgKTtcblxuICAgIGluaXRfcXVhZHNfZmxhdF91diggc3RhcnRfcXVhZF9mbGF0X3V2ICk7XG4gICAgaW5pdF9xdWFkc19zbW9vdGhfdXYoIHN0YXJ0X3F1YWRfc21vb3RoX3V2ICk7XG5cbiAgICAvLyBub3cgd2UgY2FuIHByb2Nlc3MgdW50ZXh0dXJlZCBmYWNlc1xuXG4gICAgaW5pdF90cmlhbmdsZXNfZmxhdCggc3RhcnRfdHJpX2ZsYXQgKTtcbiAgICBpbml0X3RyaWFuZ2xlc19zbW9vdGgoIHN0YXJ0X3RyaV9zbW9vdGggKTtcblxuICAgIGluaXRfcXVhZHNfZmxhdCggc3RhcnRfcXVhZF9mbGF0ICk7XG4gICAgaW5pdF9xdWFkc19zbW9vdGgoIHN0YXJ0X3F1YWRfc21vb3RoICk7XG5cbiAgICB0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlUGFkZGluZyggbiApIHtcblxuICAgICAgcmV0dXJuICggbiAlIDQgKSA/ICggNCAtIG4gJSA0ICkgOiAwO1xuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlTWV0YURhdGEoIGRhdGEsIG9mZnNldCApIHtcblxuICAgICAgdmFyIG1ldGFEYXRhID0ge1xuXG4gICAgICAgICdzaWduYXR1cmUnICAgICAgICAgICAgICAgOnBhcnNlU3RyaW5nKCBkYXRhLCBvZmZzZXQsICAxMiApLFxuICAgICAgICAnaGVhZGVyX2J5dGVzJyAgICAgICAgICAgIDpwYXJzZVVDaGFyOCggZGF0YSwgb2Zmc2V0ICsgMTIgKSxcblxuICAgICAgICAndmVydGV4X2Nvb3JkaW5hdGVfYnl0ZXMnIDpwYXJzZVVDaGFyOCggZGF0YSwgb2Zmc2V0ICsgMTMgKSxcbiAgICAgICAgJ25vcm1hbF9jb29yZGluYXRlX2J5dGVzJyA6cGFyc2VVQ2hhcjgoIGRhdGEsIG9mZnNldCArIDE0ICksXG4gICAgICAgICd1dl9jb29yZGluYXRlX2J5dGVzJyAgICAgOnBhcnNlVUNoYXI4KCBkYXRhLCBvZmZzZXQgKyAxNSApLFxuXG4gICAgICAgICd2ZXJ0ZXhfaW5kZXhfYnl0ZXMnICAgICAgOnBhcnNlVUNoYXI4KCBkYXRhLCBvZmZzZXQgKyAxNiApLFxuICAgICAgICAnbm9ybWFsX2luZGV4X2J5dGVzJyAgICAgIDpwYXJzZVVDaGFyOCggZGF0YSwgb2Zmc2V0ICsgMTcgKSxcbiAgICAgICAgJ3V2X2luZGV4X2J5dGVzJyAgICAgICAgICA6cGFyc2VVQ2hhcjgoIGRhdGEsIG9mZnNldCArIDE4ICksXG4gICAgICAgICdtYXRlcmlhbF9pbmRleF9ieXRlcycgICAgOnBhcnNlVUNoYXI4KCBkYXRhLCBvZmZzZXQgKyAxOSApLFxuXG4gICAgICAgICdudmVydGljZXMnICAgIDpwYXJzZVVJbnQzMiggZGF0YSwgb2Zmc2V0ICsgMjAgKSxcbiAgICAgICAgJ25ub3JtYWxzJyAgICAgOnBhcnNlVUludDMyKCBkYXRhLCBvZmZzZXQgKyAyMCArIDQqMSApLFxuICAgICAgICAnbnV2cycgICAgICAgICA6cGFyc2VVSW50MzIoIGRhdGEsIG9mZnNldCArIDIwICsgNCoyICksXG5cbiAgICAgICAgJ250cmlfZmxhdCcgICAgICA6cGFyc2VVSW50MzIoIGRhdGEsIG9mZnNldCArIDIwICsgNCozICksXG4gICAgICAgICdudHJpX3Ntb290aCcgICAgOnBhcnNlVUludDMyKCBkYXRhLCBvZmZzZXQgKyAyMCArIDQqNCApLFxuICAgICAgICAnbnRyaV9mbGF0X3V2JyAgIDpwYXJzZVVJbnQzMiggZGF0YSwgb2Zmc2V0ICsgMjAgKyA0KjUgKSxcbiAgICAgICAgJ250cmlfc21vb3RoX3V2JyA6cGFyc2VVSW50MzIoIGRhdGEsIG9mZnNldCArIDIwICsgNCo2ICksXG5cbiAgICAgICAgJ25xdWFkX2ZsYXQnICAgICAgOnBhcnNlVUludDMyKCBkYXRhLCBvZmZzZXQgKyAyMCArIDQqNyApLFxuICAgICAgICAnbnF1YWRfc21vb3RoJyAgICA6cGFyc2VVSW50MzIoIGRhdGEsIG9mZnNldCArIDIwICsgNCo4ICksXG4gICAgICAgICducXVhZF9mbGF0X3V2JyAgIDpwYXJzZVVJbnQzMiggZGF0YSwgb2Zmc2V0ICsgMjAgKyA0KjkgKSxcbiAgICAgICAgJ25xdWFkX3Ntb290aF91dicgOnBhcnNlVUludDMyKCBkYXRhLCBvZmZzZXQgKyAyMCArIDQqMTAgKVxuXG4gICAgICB9O1xuLypcbiAgICAgIGNvbnNvbGUubG9nKCBcInNpZ25hdHVyZTogXCIgKyBtZXRhRGF0YS5zaWduYXR1cmUgKTtcblxuICAgICAgY29uc29sZS5sb2coIFwiaGVhZGVyX2J5dGVzOiBcIiArIG1ldGFEYXRhLmhlYWRlcl9ieXRlcyApO1xuICAgICAgY29uc29sZS5sb2coIFwidmVydGV4X2Nvb3JkaW5hdGVfYnl0ZXM6IFwiICsgbWV0YURhdGEudmVydGV4X2Nvb3JkaW5hdGVfYnl0ZXMgKTtcbiAgICAgIGNvbnNvbGUubG9nKCBcIm5vcm1hbF9jb29yZGluYXRlX2J5dGVzOiBcIiArIG1ldGFEYXRhLm5vcm1hbF9jb29yZGluYXRlX2J5dGVzICk7XG4gICAgICBjb25zb2xlLmxvZyggXCJ1dl9jb29yZGluYXRlX2J5dGVzOiBcIiArIG1ldGFEYXRhLnV2X2Nvb3JkaW5hdGVfYnl0ZXMgKTtcblxuICAgICAgY29uc29sZS5sb2coIFwidmVydGV4X2luZGV4X2J5dGVzOiBcIiArIG1ldGFEYXRhLnZlcnRleF9pbmRleF9ieXRlcyApO1xuICAgICAgY29uc29sZS5sb2coIFwibm9ybWFsX2luZGV4X2J5dGVzOiBcIiArIG1ldGFEYXRhLm5vcm1hbF9pbmRleF9ieXRlcyApO1xuICAgICAgY29uc29sZS5sb2coIFwidXZfaW5kZXhfYnl0ZXM6IFwiICsgbWV0YURhdGEudXZfaW5kZXhfYnl0ZXMgKTtcbiAgICAgIGNvbnNvbGUubG9nKCBcIm1hdGVyaWFsX2luZGV4X2J5dGVzOiBcIiArIG1ldGFEYXRhLm1hdGVyaWFsX2luZGV4X2J5dGVzICk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCBcIm52ZXJ0aWNlczogXCIgKyBtZXRhRGF0YS5udmVydGljZXMgKTtcbiAgICAgIGNvbnNvbGUubG9nKCBcIm5ub3JtYWxzOiBcIiArIG1ldGFEYXRhLm5ub3JtYWxzICk7XG4gICAgICBjb25zb2xlLmxvZyggXCJudXZzOiBcIiArIG1ldGFEYXRhLm51dnMgKTtcblxuICAgICAgY29uc29sZS5sb2coIFwibnRyaV9mbGF0OiBcIiArIG1ldGFEYXRhLm50cmlfZmxhdCApO1xuICAgICAgY29uc29sZS5sb2coIFwibnRyaV9zbW9vdGg6IFwiICsgbWV0YURhdGEubnRyaV9zbW9vdGggKTtcbiAgICAgIGNvbnNvbGUubG9nKCBcIm50cmlfZmxhdF91djogXCIgKyBtZXRhRGF0YS5udHJpX2ZsYXRfdXYgKTtcbiAgICAgIGNvbnNvbGUubG9nKCBcIm50cmlfc21vb3RoX3V2OiBcIiArIG1ldGFEYXRhLm50cmlfc21vb3RoX3V2ICk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCBcIm5xdWFkX2ZsYXQ6IFwiICsgbWV0YURhdGEubnF1YWRfZmxhdCApO1xuICAgICAgY29uc29sZS5sb2coIFwibnF1YWRfc21vb3RoOiBcIiArIG1ldGFEYXRhLm5xdWFkX3Ntb290aCApO1xuICAgICAgY29uc29sZS5sb2coIFwibnF1YWRfZmxhdF91djogXCIgKyBtZXRhRGF0YS5ucXVhZF9mbGF0X3V2ICk7XG4gICAgICBjb25zb2xlLmxvZyggXCJucXVhZF9zbW9vdGhfdXY6IFwiICsgbWV0YURhdGEubnF1YWRfc21vb3RoX3V2ICk7XG5cbiAgICAgIHZhciB0b3RhbCA9IG1ldGFEYXRhLmhlYWRlcl9ieXRlc1xuICAgICAgICAgICAgKyBtZXRhRGF0YS5udmVydGljZXMgKiBtZXRhRGF0YS52ZXJ0ZXhfY29vcmRpbmF0ZV9ieXRlcyAqIDNcbiAgICAgICAgICAgICsgbWV0YURhdGEubm5vcm1hbHMgKiBtZXRhRGF0YS5ub3JtYWxfY29vcmRpbmF0ZV9ieXRlcyAqIDNcbiAgICAgICAgICAgICsgbWV0YURhdGEubnV2cyAqIG1ldGFEYXRhLnV2X2Nvb3JkaW5hdGVfYnl0ZXMgKiAyXG4gICAgICAgICAgICArIG1ldGFEYXRhLm50cmlfZmxhdCAqICggbWV0YURhdGEudmVydGV4X2luZGV4X2J5dGVzKjMgKyBtZXRhRGF0YS5tYXRlcmlhbF9pbmRleF9ieXRlcyApXG4gICAgICAgICAgICArIG1ldGFEYXRhLm50cmlfc21vb3RoICogKCBtZXRhRGF0YS52ZXJ0ZXhfaW5kZXhfYnl0ZXMqMyArIG1ldGFEYXRhLm1hdGVyaWFsX2luZGV4X2J5dGVzICsgbWV0YURhdGEubm9ybWFsX2luZGV4X2J5dGVzKjMgKVxuICAgICAgICAgICAgKyBtZXRhRGF0YS5udHJpX2ZsYXRfdXYgKiAoIG1ldGFEYXRhLnZlcnRleF9pbmRleF9ieXRlcyozICsgbWV0YURhdGEubWF0ZXJpYWxfaW5kZXhfYnl0ZXMgKyBtZXRhRGF0YS51dl9pbmRleF9ieXRlcyozIClcbiAgICAgICAgICAgICsgbWV0YURhdGEubnRyaV9zbW9vdGhfdXYgKiAoIG1ldGFEYXRhLnZlcnRleF9pbmRleF9ieXRlcyozICsgbWV0YURhdGEubWF0ZXJpYWxfaW5kZXhfYnl0ZXMgKyBtZXRhRGF0YS5ub3JtYWxfaW5kZXhfYnl0ZXMqMyArIG1ldGFEYXRhLnV2X2luZGV4X2J5dGVzKjMgKVxuICAgICAgICAgICAgKyBtZXRhRGF0YS5ucXVhZF9mbGF0ICogKCBtZXRhRGF0YS52ZXJ0ZXhfaW5kZXhfYnl0ZXMqNCArIG1ldGFEYXRhLm1hdGVyaWFsX2luZGV4X2J5dGVzIClcbiAgICAgICAgICAgICsgbWV0YURhdGEubnF1YWRfc21vb3RoICogKCBtZXRhRGF0YS52ZXJ0ZXhfaW5kZXhfYnl0ZXMqNCArIG1ldGFEYXRhLm1hdGVyaWFsX2luZGV4X2J5dGVzICsgbWV0YURhdGEubm9ybWFsX2luZGV4X2J5dGVzKjQgKVxuICAgICAgICAgICAgKyBtZXRhRGF0YS5ucXVhZF9mbGF0X3V2ICogKCBtZXRhRGF0YS52ZXJ0ZXhfaW5kZXhfYnl0ZXMqNCArIG1ldGFEYXRhLm1hdGVyaWFsX2luZGV4X2J5dGVzICsgbWV0YURhdGEudXZfaW5kZXhfYnl0ZXMqNCApXG4gICAgICAgICAgICArIG1ldGFEYXRhLm5xdWFkX3Ntb290aF91diAqICggbWV0YURhdGEudmVydGV4X2luZGV4X2J5dGVzKjQgKyBtZXRhRGF0YS5tYXRlcmlhbF9pbmRleF9ieXRlcyArIG1ldGFEYXRhLm5vcm1hbF9pbmRleF9ieXRlcyo0ICsgbWV0YURhdGEudXZfaW5kZXhfYnl0ZXMqNCApO1xuICAgICAgY29uc29sZS5sb2coIFwidG90YWwgYnl0ZXM6IFwiICsgdG90YWwgKTtcbiovXG5cbiAgICAgIHJldHVybiBtZXRhRGF0YTtcblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwYXJzZVN0cmluZyggZGF0YSwgb2Zmc2V0LCBsZW5ndGggKSB7XG5cbiAgICAgIHZhciBjaGFyQXJyYXkgPSBuZXcgVWludDhBcnJheSggZGF0YSwgb2Zmc2V0LCBsZW5ndGggKTtcblxuICAgICAgdmFyIHRleHQgPSBcIlwiO1xuXG4gICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cbiAgICAgICAgdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCBjaGFyQXJyYXlbIG9mZnNldCArIGkgXSApO1xuXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0ZXh0O1xuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlVUNoYXI4KCBkYXRhLCBvZmZzZXQgKSB7XG5cbiAgICAgIHZhciBjaGFyQXJyYXkgPSBuZXcgVWludDhBcnJheSggZGF0YSwgb2Zmc2V0LCAxICk7XG5cbiAgICAgIHJldHVybiBjaGFyQXJyYXlbIDAgXTtcblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwYXJzZVVJbnQzMiggZGF0YSwgb2Zmc2V0ICkge1xuXG4gICAgICB2YXIgaW50QXJyYXkgPSBuZXcgVWludDMyQXJyYXkoIGRhdGEsIG9mZnNldCwgMSApO1xuXG4gICAgICByZXR1cm4gaW50QXJyYXlbIDAgXTtcblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpbml0X3ZlcnRpY2VzKCBzdGFydCApIHtcblxuICAgICAgdmFyIG5FbGVtZW50cyA9IG1kLm52ZXJ0aWNlcztcblxuICAgICAgdmFyIGNvb3JkQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBkYXRhLCBzdGFydCwgbkVsZW1lbnRzICogMyApO1xuXG4gICAgICB2YXIgaSwgeCwgeSwgejtcblxuICAgICAgZm9yKCBpID0gMDsgaSA8IG5FbGVtZW50czsgaSArKyApIHtcblxuICAgICAgICB4ID0gY29vcmRBcnJheVsgaSAqIDMgXTtcbiAgICAgICAgeSA9IGNvb3JkQXJyYXlbIGkgKiAzICsgMSBdO1xuICAgICAgICB6ID0gY29vcmRBcnJheVsgaSAqIDMgKyAyIF07XG5cbiAgICAgICAgc2NvcGUudmVydGljZXMucHVzaCggbmV3IFRIUkVFLlZlY3RvcjMoIHgsIHksIHogKSApO1xuXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuRWxlbWVudHMgKiAzICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UO1xuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluaXRfbm9ybWFscyggc3RhcnQgKSB7XG5cbiAgICAgIHZhciBuRWxlbWVudHMgPSBtZC5ubm9ybWFscztcblxuICAgICAgaWYgKCBuRWxlbWVudHMgKSB7XG5cbiAgICAgICAgdmFyIG5vcm1hbEFycmF5ID0gbmV3IEludDhBcnJheSggZGF0YSwgc3RhcnQsIG5FbGVtZW50cyAqIDMgKTtcblxuICAgICAgICB2YXIgaSwgeCwgeSwgejtcblxuICAgICAgICBmb3IoIGkgPSAwOyBpIDwgbkVsZW1lbnRzOyBpICsrICkge1xuXG4gICAgICAgICAgeCA9IG5vcm1hbEFycmF5WyBpICogMyBdO1xuICAgICAgICAgIHkgPSBub3JtYWxBcnJheVsgaSAqIDMgKyAxIF07XG4gICAgICAgICAgeiA9IG5vcm1hbEFycmF5WyBpICogMyArIDIgXTtcblxuICAgICAgICAgIG5vcm1hbHMucHVzaCggeC8xMjcsIHkvMTI3LCB6LzEyNyApO1xuXG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbkVsZW1lbnRzICogMyAqIEludDhBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpbml0X3V2cyggc3RhcnQgKSB7XG5cbiAgICAgIHZhciBuRWxlbWVudHMgPSBtZC5udXZzO1xuXG4gICAgICBpZiAoIG5FbGVtZW50cyApIHtcblxuICAgICAgICB2YXIgdXZBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIGRhdGEsIHN0YXJ0LCBuRWxlbWVudHMgKiAyICk7XG5cbiAgICAgICAgdmFyIGksIHUsIHY7XG5cbiAgICAgICAgZm9yKCBpID0gMDsgaSA8IG5FbGVtZW50czsgaSArKyApIHtcblxuICAgICAgICAgIHUgPSB1dkFycmF5WyBpICogMiBdO1xuICAgICAgICAgIHYgPSB1dkFycmF5WyBpICogMiArIDEgXTtcblxuICAgICAgICAgIHV2cy5wdXNoKCB1LCB2ICk7XG5cbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuRWxlbWVudHMgKiAyICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UO1xuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluaXRfdXZzMyggbkVsZW1lbnRzLCBvZmZzZXQgKSB7XG5cbiAgICAgIHZhciBpLCB1dmEsIHV2YiwgdXZjLCB1MSwgdTIsIHUzLCB2MSwgdjIsIHYzO1xuXG4gICAgICB2YXIgdXZJbmRleEJ1ZmZlciA9IG5ldyBVaW50MzJBcnJheSggZGF0YSwgb2Zmc2V0LCAzICogbkVsZW1lbnRzICk7XG5cbiAgICAgIGZvciggaSA9IDA7IGkgPCBuRWxlbWVudHM7IGkgKysgKSB7XG5cbiAgICAgICAgdXZhID0gdXZJbmRleEJ1ZmZlclsgaSAqIDMgXTtcbiAgICAgICAgdXZiID0gdXZJbmRleEJ1ZmZlclsgaSAqIDMgKyAxIF07XG4gICAgICAgIHV2YyA9IHV2SW5kZXhCdWZmZXJbIGkgKiAzICsgMiBdO1xuXG4gICAgICAgIHUxID0gdXZzWyB1dmEqMiBdO1xuICAgICAgICB2MSA9IHV2c1sgdXZhKjIgKyAxIF07XG5cbiAgICAgICAgdTIgPSB1dnNbIHV2YioyIF07XG4gICAgICAgIHYyID0gdXZzWyB1dmIqMiArIDEgXTtcblxuICAgICAgICB1MyA9IHV2c1sgdXZjKjIgXTtcbiAgICAgICAgdjMgPSB1dnNbIHV2YyoyICsgMSBdO1xuXG4gICAgICAgIHNjb3BlLmZhY2VWZXJ0ZXhVdnNbIDAgXS5wdXNoKCBbXG4gICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjIoIHUxLCB2MSApLFxuICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IyKCB1MiwgdjIgKSxcbiAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMiggdTMsIHYzIClcbiAgICAgICAgXSApO1xuXG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaW5pdF91dnM0KCBuRWxlbWVudHMsIG9mZnNldCApIHtcblxuICAgICAgdmFyIGksIHV2YSwgdXZiLCB1dmMsIHV2ZCwgdTEsIHUyLCB1MywgdTQsIHYxLCB2MiwgdjMsIHY0O1xuXG4gICAgICB2YXIgdXZJbmRleEJ1ZmZlciA9IG5ldyBVaW50MzJBcnJheSggZGF0YSwgb2Zmc2V0LCA0ICogbkVsZW1lbnRzICk7XG5cbiAgICAgIGZvciggaSA9IDA7IGkgPCBuRWxlbWVudHM7IGkgKysgKSB7XG5cbiAgICAgICAgdXZhID0gdXZJbmRleEJ1ZmZlclsgaSAqIDQgXTtcbiAgICAgICAgdXZiID0gdXZJbmRleEJ1ZmZlclsgaSAqIDQgKyAxIF07XG4gICAgICAgIHV2YyA9IHV2SW5kZXhCdWZmZXJbIGkgKiA0ICsgMiBdO1xuICAgICAgICB1dmQgPSB1dkluZGV4QnVmZmVyWyBpICogNCArIDMgXTtcblxuICAgICAgICB1MSA9IHV2c1sgdXZhKjIgXTtcbiAgICAgICAgdjEgPSB1dnNbIHV2YSoyICsgMSBdO1xuXG4gICAgICAgIHUyID0gdXZzWyB1dmIqMiBdO1xuICAgICAgICB2MiA9IHV2c1sgdXZiKjIgKyAxIF07XG5cbiAgICAgICAgdTMgPSB1dnNbIHV2YyoyIF07XG4gICAgICAgIHYzID0gdXZzWyB1dmMqMiArIDEgXTtcblxuICAgICAgICB1NCA9IHV2c1sgdXZkKjIgXTtcbiAgICAgICAgdjQgPSB1dnNbIHV2ZCoyICsgMSBdO1xuXG4gICAgICAgIHNjb3BlLmZhY2VWZXJ0ZXhVdnNbIDAgXS5wdXNoKCBbXG4gICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjIoIHUxLCB2MSApLFxuICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IyKCB1MiwgdjIgKSxcbiAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMiggdTQsIHY0IClcbiAgICAgICAgXSApO1xuXG4gICAgICAgIHNjb3BlLmZhY2VWZXJ0ZXhVdnNbIDAgXS5wdXNoKCBbXG4gICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjIoIHUyLCB2MiApLFxuICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IyKCB1MywgdjMgKSxcbiAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMiggdTQsIHY0IClcbiAgICAgICAgXSApO1xuXG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaW5pdF9mYWNlczNfZmxhdCggbkVsZW1lbnRzLCBvZmZzZXRWZXJ0aWNlcywgb2Zmc2V0TWF0ZXJpYWxzICkge1xuXG4gICAgICB2YXIgaSwgYSwgYiwgYywgbTtcblxuICAgICAgdmFyIHZlcnRleEluZGV4QnVmZmVyID0gbmV3IFVpbnQzMkFycmF5KCBkYXRhLCBvZmZzZXRWZXJ0aWNlcywgMyAqIG5FbGVtZW50cyApO1xuICAgICAgdmFyIG1hdGVyaWFsSW5kZXhCdWZmZXIgPSBuZXcgVWludDE2QXJyYXkoIGRhdGEsIG9mZnNldE1hdGVyaWFscywgbkVsZW1lbnRzICk7XG5cbiAgICAgIGZvciggaSA9IDA7IGkgPCBuRWxlbWVudHM7IGkgKysgKSB7XG5cbiAgICAgICAgYSA9IHZlcnRleEluZGV4QnVmZmVyWyBpICogMyBdO1xuICAgICAgICBiID0gdmVydGV4SW5kZXhCdWZmZXJbIGkgKiAzICsgMSBdO1xuICAgICAgICBjID0gdmVydGV4SW5kZXhCdWZmZXJbIGkgKiAzICsgMiBdO1xuXG4gICAgICAgIG0gPSBtYXRlcmlhbEluZGV4QnVmZmVyWyBpIF07XG5cbiAgICAgICAgc2NvcGUuZmFjZXMucHVzaCggbmV3IFRIUkVFLkZhY2UzKCBhLCBiLCBjLCBudWxsLCBudWxsLCBtICkgKTtcblxuICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluaXRfZmFjZXM0X2ZsYXQoIG5FbGVtZW50cywgb2Zmc2V0VmVydGljZXMsIG9mZnNldE1hdGVyaWFscyApIHtcblxuICAgICAgdmFyIGksIGEsIGIsIGMsIGQsIG07XG5cbiAgICAgIHZhciB2ZXJ0ZXhJbmRleEJ1ZmZlciA9IG5ldyBVaW50MzJBcnJheSggZGF0YSwgb2Zmc2V0VmVydGljZXMsIDQgKiBuRWxlbWVudHMgKTtcbiAgICAgIHZhciBtYXRlcmlhbEluZGV4QnVmZmVyID0gbmV3IFVpbnQxNkFycmF5KCBkYXRhLCBvZmZzZXRNYXRlcmlhbHMsIG5FbGVtZW50cyApO1xuXG4gICAgICBmb3IoIGkgPSAwOyBpIDwgbkVsZW1lbnRzOyBpICsrICkge1xuXG4gICAgICAgIGEgPSB2ZXJ0ZXhJbmRleEJ1ZmZlclsgaSAqIDQgXTtcbiAgICAgICAgYiA9IHZlcnRleEluZGV4QnVmZmVyWyBpICogNCArIDEgXTtcbiAgICAgICAgYyA9IHZlcnRleEluZGV4QnVmZmVyWyBpICogNCArIDIgXTtcbiAgICAgICAgZCA9IHZlcnRleEluZGV4QnVmZmVyWyBpICogNCArIDMgXTtcblxuICAgICAgICBtID0gbWF0ZXJpYWxJbmRleEJ1ZmZlclsgaSBdO1xuXG4gICAgICAgIHNjb3BlLmZhY2VzLnB1c2goIG5ldyBUSFJFRS5GYWNlMyggYSwgYiwgZCwgbnVsbCwgbnVsbCwgbSApICk7XG4gICAgICAgIHNjb3BlLmZhY2VzLnB1c2goIG5ldyBUSFJFRS5GYWNlMyggYiwgYywgZCwgbnVsbCwgbnVsbCwgbSApICk7XG5cbiAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpbml0X2ZhY2VzM19zbW9vdGgoIG5FbGVtZW50cywgb2Zmc2V0VmVydGljZXMsIG9mZnNldE5vcm1hbHMsIG9mZnNldE1hdGVyaWFscyApIHtcblxuICAgICAgdmFyIGksIGEsIGIsIGMsIG07XG4gICAgICB2YXIgbmEsIG5iLCBuYztcblxuICAgICAgdmFyIHZlcnRleEluZGV4QnVmZmVyID0gbmV3IFVpbnQzMkFycmF5KCBkYXRhLCBvZmZzZXRWZXJ0aWNlcywgMyAqIG5FbGVtZW50cyApO1xuICAgICAgdmFyIG5vcm1hbEluZGV4QnVmZmVyID0gbmV3IFVpbnQzMkFycmF5KCBkYXRhLCBvZmZzZXROb3JtYWxzLCAzICogbkVsZW1lbnRzICk7XG4gICAgICB2YXIgbWF0ZXJpYWxJbmRleEJ1ZmZlciA9IG5ldyBVaW50MTZBcnJheSggZGF0YSwgb2Zmc2V0TWF0ZXJpYWxzLCBuRWxlbWVudHMgKTtcblxuICAgICAgZm9yKCBpID0gMDsgaSA8IG5FbGVtZW50czsgaSArKyApIHtcblxuICAgICAgICBhID0gdmVydGV4SW5kZXhCdWZmZXJbIGkgKiAzIF07XG4gICAgICAgIGIgPSB2ZXJ0ZXhJbmRleEJ1ZmZlclsgaSAqIDMgKyAxIF07XG4gICAgICAgIGMgPSB2ZXJ0ZXhJbmRleEJ1ZmZlclsgaSAqIDMgKyAyIF07XG5cbiAgICAgICAgbmEgPSBub3JtYWxJbmRleEJ1ZmZlclsgaSAqIDMgXTtcbiAgICAgICAgbmIgPSBub3JtYWxJbmRleEJ1ZmZlclsgaSAqIDMgKyAxIF07XG4gICAgICAgIG5jID0gbm9ybWFsSW5kZXhCdWZmZXJbIGkgKiAzICsgMiBdO1xuXG4gICAgICAgIG0gPSBtYXRlcmlhbEluZGV4QnVmZmVyWyBpIF07XG5cbiAgICAgICAgdmFyIG5heCA9IG5vcm1hbHNbIG5hKjMgICAgIF0sXG4gICAgICAgICAgbmF5ID0gbm9ybWFsc1sgbmEqMyArIDEgXSxcbiAgICAgICAgICBuYXogPSBub3JtYWxzWyBuYSozICsgMiBdLFxuXG4gICAgICAgICAgbmJ4ID0gbm9ybWFsc1sgbmIqMyAgICAgXSxcbiAgICAgICAgICBuYnkgPSBub3JtYWxzWyBuYiozICsgMSBdLFxuICAgICAgICAgIG5ieiA9IG5vcm1hbHNbIG5iKjMgKyAyIF0sXG5cbiAgICAgICAgICBuY3ggPSBub3JtYWxzWyBuYyozICAgICBdLFxuICAgICAgICAgIG5jeSA9IG5vcm1hbHNbIG5jKjMgKyAxIF0sXG4gICAgICAgICAgbmN6ID0gbm9ybWFsc1sgbmMqMyArIDIgXTtcblxuICAgICAgICBzY29wZS5mYWNlcy5wdXNoKCBuZXcgVEhSRUUuRmFjZTMoIGEsIGIsIGMsIFtcbiAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMyggbmF4LCBuYXksIG5heiApLFxuICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKCBuYngsIG5ieSwgbmJ6ICksXG4gICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoIG5jeCwgbmN5LCBuY3ogKVxuICAgICAgICBdLCBudWxsLCBtICkgKTtcblxuICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluaXRfZmFjZXM0X3Ntb290aCggbkVsZW1lbnRzLCBvZmZzZXRWZXJ0aWNlcywgb2Zmc2V0Tm9ybWFscywgb2Zmc2V0TWF0ZXJpYWxzICkge1xuXG4gICAgICB2YXIgaSwgYSwgYiwgYywgZCwgbTtcbiAgICAgIHZhciBuYSwgbmIsIG5jLCBuZDtcblxuICAgICAgdmFyIHZlcnRleEluZGV4QnVmZmVyID0gbmV3IFVpbnQzMkFycmF5KCBkYXRhLCBvZmZzZXRWZXJ0aWNlcywgNCAqIG5FbGVtZW50cyApO1xuICAgICAgdmFyIG5vcm1hbEluZGV4QnVmZmVyID0gbmV3IFVpbnQzMkFycmF5KCBkYXRhLCBvZmZzZXROb3JtYWxzLCA0ICogbkVsZW1lbnRzICk7XG4gICAgICB2YXIgbWF0ZXJpYWxJbmRleEJ1ZmZlciA9IG5ldyBVaW50MTZBcnJheSggZGF0YSwgb2Zmc2V0TWF0ZXJpYWxzLCBuRWxlbWVudHMgKTtcblxuICAgICAgZm9yKCBpID0gMDsgaSA8IG5FbGVtZW50czsgaSArKyApIHtcblxuICAgICAgICBhID0gdmVydGV4SW5kZXhCdWZmZXJbIGkgKiA0IF07XG4gICAgICAgIGIgPSB2ZXJ0ZXhJbmRleEJ1ZmZlclsgaSAqIDQgKyAxIF07XG4gICAgICAgIGMgPSB2ZXJ0ZXhJbmRleEJ1ZmZlclsgaSAqIDQgKyAyIF07XG4gICAgICAgIGQgPSB2ZXJ0ZXhJbmRleEJ1ZmZlclsgaSAqIDQgKyAzIF07XG5cbiAgICAgICAgbmEgPSBub3JtYWxJbmRleEJ1ZmZlclsgaSAqIDQgXTtcbiAgICAgICAgbmIgPSBub3JtYWxJbmRleEJ1ZmZlclsgaSAqIDQgKyAxIF07XG4gICAgICAgIG5jID0gbm9ybWFsSW5kZXhCdWZmZXJbIGkgKiA0ICsgMiBdO1xuICAgICAgICBuZCA9IG5vcm1hbEluZGV4QnVmZmVyWyBpICogNCArIDMgXTtcblxuICAgICAgICBtID0gbWF0ZXJpYWxJbmRleEJ1ZmZlclsgaSBdO1xuXG4gICAgICAgIHZhciBuYXggPSBub3JtYWxzWyBuYSozICAgICBdLFxuICAgICAgICAgIG5heSA9IG5vcm1hbHNbIG5hKjMgKyAxIF0sXG4gICAgICAgICAgbmF6ID0gbm9ybWFsc1sgbmEqMyArIDIgXSxcblxuICAgICAgICAgIG5ieCA9IG5vcm1hbHNbIG5iKjMgICAgIF0sXG4gICAgICAgICAgbmJ5ID0gbm9ybWFsc1sgbmIqMyArIDEgXSxcbiAgICAgICAgICBuYnogPSBub3JtYWxzWyBuYiozICsgMiBdLFxuXG4gICAgICAgICAgbmN4ID0gbm9ybWFsc1sgbmMqMyAgICAgXSxcbiAgICAgICAgICBuY3kgPSBub3JtYWxzWyBuYyozICsgMSBdLFxuICAgICAgICAgIG5jeiA9IG5vcm1hbHNbIG5jKjMgKyAyIF0sXG5cbiAgICAgICAgICBuZHggPSBub3JtYWxzWyBuZCozICAgICBdLFxuICAgICAgICAgIG5keSA9IG5vcm1hbHNbIG5kKjMgKyAxIF0sXG4gICAgICAgICAgbmR6ID0gbm9ybWFsc1sgbmQqMyArIDIgXTtcblxuICAgICAgICBzY29wZS5mYWNlcy5wdXNoKCBuZXcgVEhSRUUuRmFjZTMoIGEsIGIsIGQsIFtcbiAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMyggbmF4LCBuYXksIG5heiApLFxuICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKCBuYngsIG5ieSwgbmJ6ICksXG4gICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoIG5keCwgbmR5LCBuZHogKVxuICAgICAgICBdLCBudWxsLCBtICkgKTtcblxuICAgICAgICBzY29wZS5mYWNlcy5wdXNoKCBuZXcgVEhSRUUuRmFjZTMoIGIsIGMsIGQsIFtcbiAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMyggbmJ4LCBuYnksIG5ieiApLFxuICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKCBuY3gsIG5jeSwgbmN6ICksXG4gICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoIG5keCwgbmR5LCBuZHogKVxuICAgICAgICBdLCBudWxsLCBtICkgKTtcblxuICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluaXRfdHJpYW5nbGVzX2ZsYXQoIHN0YXJ0ICkge1xuXG4gICAgICB2YXIgbkVsZW1lbnRzID0gbWQubnRyaV9mbGF0O1xuXG4gICAgICBpZiAoIG5FbGVtZW50cyApIHtcblxuICAgICAgICB2YXIgb2Zmc2V0TWF0ZXJpYWxzID0gc3RhcnQgKyBuRWxlbWVudHMgKiBVaW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIDM7XG4gICAgICAgIGluaXRfZmFjZXMzX2ZsYXQoIG5FbGVtZW50cywgc3RhcnQsIG9mZnNldE1hdGVyaWFscyApO1xuXG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaW5pdF90cmlhbmdsZXNfZmxhdF91diggc3RhcnQgKSB7XG5cbiAgICAgIHZhciBuRWxlbWVudHMgPSBtZC5udHJpX2ZsYXRfdXY7XG5cbiAgICAgIGlmICggbkVsZW1lbnRzICkge1xuXG4gICAgICAgIHZhciBvZmZzZXRVdnMgPSBzdGFydCArIG5FbGVtZW50cyAqIFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UICogMztcbiAgICAgICAgdmFyIG9mZnNldE1hdGVyaWFscyA9IG9mZnNldFV2cyArIG5FbGVtZW50cyAqIFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UICogMztcblxuICAgICAgICBpbml0X2ZhY2VzM19mbGF0KCBuRWxlbWVudHMsIHN0YXJ0LCBvZmZzZXRNYXRlcmlhbHMgKTtcbiAgICAgICAgaW5pdF91dnMzKCBuRWxlbWVudHMsIG9mZnNldFV2cyApO1xuXG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaW5pdF90cmlhbmdsZXNfc21vb3RoKCBzdGFydCApIHtcblxuICAgICAgdmFyIG5FbGVtZW50cyA9IG1kLm50cmlfc21vb3RoO1xuXG4gICAgICBpZiAoIG5FbGVtZW50cyApIHtcblxuICAgICAgICB2YXIgb2Zmc2V0Tm9ybWFscyA9IHN0YXJ0ICsgbkVsZW1lbnRzICogVWludDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQgKiAzO1xuICAgICAgICB2YXIgb2Zmc2V0TWF0ZXJpYWxzID0gb2Zmc2V0Tm9ybWFscyArIG5FbGVtZW50cyAqIFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UICogMztcblxuICAgICAgICBpbml0X2ZhY2VzM19zbW9vdGgoIG5FbGVtZW50cywgc3RhcnQsIG9mZnNldE5vcm1hbHMsIG9mZnNldE1hdGVyaWFscyApO1xuXG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaW5pdF90cmlhbmdsZXNfc21vb3RoX3V2KCBzdGFydCApIHtcblxuICAgICAgdmFyIG5FbGVtZW50cyA9IG1kLm50cmlfc21vb3RoX3V2O1xuXG4gICAgICBpZiAoIG5FbGVtZW50cyApIHtcblxuICAgICAgICB2YXIgb2Zmc2V0Tm9ybWFscyA9IHN0YXJ0ICsgbkVsZW1lbnRzICogVWludDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQgKiAzO1xuICAgICAgICB2YXIgb2Zmc2V0VXZzID0gb2Zmc2V0Tm9ybWFscyArIG5FbGVtZW50cyAqIFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UICogMztcbiAgICAgICAgdmFyIG9mZnNldE1hdGVyaWFscyA9IG9mZnNldFV2cyArIG5FbGVtZW50cyAqIFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UICogMztcblxuICAgICAgICBpbml0X2ZhY2VzM19zbW9vdGgoIG5FbGVtZW50cywgc3RhcnQsIG9mZnNldE5vcm1hbHMsIG9mZnNldE1hdGVyaWFscyApO1xuICAgICAgICBpbml0X3V2czMoIG5FbGVtZW50cywgb2Zmc2V0VXZzICk7XG5cbiAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpbml0X3F1YWRzX2ZsYXQoIHN0YXJ0ICkge1xuXG4gICAgICB2YXIgbkVsZW1lbnRzID0gbWQubnF1YWRfZmxhdDtcblxuICAgICAgaWYgKCBuRWxlbWVudHMgKSB7XG5cbiAgICAgICAgdmFyIG9mZnNldE1hdGVyaWFscyA9IHN0YXJ0ICsgbkVsZW1lbnRzICogVWludDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQgKiA0O1xuICAgICAgICBpbml0X2ZhY2VzNF9mbGF0KCBuRWxlbWVudHMsIHN0YXJ0LCBvZmZzZXRNYXRlcmlhbHMgKTtcblxuICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluaXRfcXVhZHNfZmxhdF91diggc3RhcnQgKSB7XG5cbiAgICAgIHZhciBuRWxlbWVudHMgPSBtZC5ucXVhZF9mbGF0X3V2O1xuXG4gICAgICBpZiAoIG5FbGVtZW50cyApIHtcblxuICAgICAgICB2YXIgb2Zmc2V0VXZzID0gc3RhcnQgKyBuRWxlbWVudHMgKiBVaW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIDQ7XG4gICAgICAgIHZhciBvZmZzZXRNYXRlcmlhbHMgPSBvZmZzZXRVdnMgKyBuRWxlbWVudHMgKiBVaW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIDQ7XG5cbiAgICAgICAgaW5pdF9mYWNlczRfZmxhdCggbkVsZW1lbnRzLCBzdGFydCwgb2Zmc2V0TWF0ZXJpYWxzICk7XG4gICAgICAgIGluaXRfdXZzNCggbkVsZW1lbnRzLCBvZmZzZXRVdnMgKTtcblxuICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluaXRfcXVhZHNfc21vb3RoKCBzdGFydCApIHtcblxuICAgICAgdmFyIG5FbGVtZW50cyA9IG1kLm5xdWFkX3Ntb290aDtcblxuICAgICAgaWYgKCBuRWxlbWVudHMgKSB7XG5cbiAgICAgICAgdmFyIG9mZnNldE5vcm1hbHMgPSBzdGFydCArIG5FbGVtZW50cyAqIFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UICogNDtcbiAgICAgICAgdmFyIG9mZnNldE1hdGVyaWFscyA9IG9mZnNldE5vcm1hbHMgKyBuRWxlbWVudHMgKiBVaW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIDQ7XG5cbiAgICAgICAgaW5pdF9mYWNlczRfc21vb3RoKCBuRWxlbWVudHMsIHN0YXJ0LCBvZmZzZXROb3JtYWxzLCBvZmZzZXRNYXRlcmlhbHMgKTtcblxuICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluaXRfcXVhZHNfc21vb3RoX3V2KCBzdGFydCApIHtcblxuICAgICAgdmFyIG5FbGVtZW50cyA9IG1kLm5xdWFkX3Ntb290aF91djtcblxuICAgICAgaWYgKCBuRWxlbWVudHMgKSB7XG5cbiAgICAgICAgdmFyIG9mZnNldE5vcm1hbHMgPSBzdGFydCArIG5FbGVtZW50cyAqIFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UICogNDtcbiAgICAgICAgdmFyIG9mZnNldFV2cyA9IG9mZnNldE5vcm1hbHMgKyBuRWxlbWVudHMgKiBVaW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIDQ7XG4gICAgICAgIHZhciBvZmZzZXRNYXRlcmlhbHMgPSBvZmZzZXRVdnMgKyBuRWxlbWVudHMgKiBVaW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIDQ7XG5cbiAgICAgICAgaW5pdF9mYWNlczRfc21vb3RoKCBuRWxlbWVudHMsIHN0YXJ0LCBvZmZzZXROb3JtYWxzLCBvZmZzZXRNYXRlcmlhbHMgKTtcbiAgICAgICAgaW5pdF91dnM0KCBuRWxlbWVudHMsIG9mZnNldFV2cyApO1xuXG4gICAgICB9XG5cbiAgICB9O1xuXG4gIH07XG5cbiAgTW9kZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlICk7XG4gIE1vZGVsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1vZGVsO1xuXG4gIHZhciBnZW9tZXRyeSA9IG5ldyBNb2RlbCggdGV4dHVyZVBhdGggKTtcbiAgdmFyIG1hdGVyaWFscyA9IHRoaXMuaW5pdE1hdGVyaWFscygganNvbk1hdGVyaWFscywgdGV4dHVyZVBhdGggKTtcblxuICBpZiAoIHRoaXMubmVlZHNUYW5nZW50cyggbWF0ZXJpYWxzICkgKSBnZW9tZXRyeS5jb21wdXRlVGFuZ2VudHMoKTtcblxuICBjYWxsYmFjayggZ2VvbWV0cnksIG1hdGVyaWFscyApO1xuXG59O1xuIiwiLyogZ2xvYmFscyBkZWZpbmUgKi9cbjsoZnVuY3Rpb24oZGVmaW5lKXsndXNlIHN0cmljdCc7ZGVmaW5lKGZ1bmN0aW9uKHJlcXVpcmUsZXhwb3J0cyxtb2R1bGUpe1xuLyoqXG4gKiBMb2NhbHNcbiAqL1xudmFyIHRleHRDb250ZW50ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihOb2RlLnByb3RvdHlwZSxcbiAgICAndGV4dENvbnRlbnQnKTtcbnZhciBpbm5lckhUTUwgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEVsZW1lbnQucHJvdG90eXBlLCAnaW5uZXJIVE1MJyk7XG52YXIgcmVtb3ZlQXR0cmlidXRlID0gRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlO1xudmFyIHNldEF0dHJpYnV0ZSA9IEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZTtcbnZhciBub29wICA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBuZXcgY29tcG9uZW50LlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gbmFtZVxuICogQHBhcmFtICB7T2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7Y29uc3RydWN0b3J9XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCBwcm9wcykge1xuICB2YXIgYmFzZVByb3RvID0gZ2V0QmFzZVByb3RvKHByb3BzLmV4dGVuZHMpO1xuICB2YXIgdGVtcGxhdGUgPSBwcm9wcy50ZW1wbGF0ZSB8fCBiYXNlUHJvdG8udGVtcGxhdGVTdHJpbmc7XG5cbiAgLy8gQ29tcG9uZW50cyBhcmUgZXh0ZW5zaWJsZSBieSBkZWZhdWx0IGJ1dCBjYW4gYmUgZGVjbGFyZWRcbiAgLy8gYXMgbm9uIGV4dGVuc2libGUgYXMgYW4gb3B0aW1pemF0aW9uIHRvIGF2b2lkXG4gIC8vIHN0b3JpbmcgdGhlIHRlbXBsYXRlIHN0cmluZ3NcbiAgdmFyIGV4dGVuc2libGUgPSBwcm9wcy5leHRlbnNpYmxlID0gcHJvcHMuaGFzT3duUHJvcGVydHkoJ2V4dGVuc2libGUnKT9cbiAgICBwcm9wcy5leHRlbnNpYmxlIDogdHJ1ZTtcblxuICAvLyBDbGVhbiB1cFxuICBkZWxldGUgcHJvcHMuZXh0ZW5kcztcblxuICAvLyBQdWxsIG91dCBDU1MgdGhhdCBuZWVkcyB0byBiZSBpbiB0aGUgbGlnaHQtZG9tXG4gIGlmICh0ZW1wbGF0ZSkge1xuICAgIC8vIFN0b3JlcyB0aGUgc3RyaW5nIHRvIGJlIHJlcHJvY2Vzc2VkIHdoZW5cbiAgICAvLyBhIG5ldyBjb21wb25lbnQgZXh0ZW5kcyB0aGlzIG9uZVxuICAgIGlmIChleHRlbnNpYmxlICYmIHByb3BzLnRlbXBsYXRlKSB7XG4gICAgICBwcm9wcy50ZW1wbGF0ZVN0cmluZyA9IHByb3BzLnRlbXBsYXRlO1xuICAgIH1cblxuICAgIHZhciBvdXRwdXQgPSBwcm9jZXNzQ3NzKHRlbXBsYXRlLCBuYW1lKTtcblxuICAgIHByb3BzLnRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICBwcm9wcy50ZW1wbGF0ZS5pbm5lckhUTUwgPSBvdXRwdXQudGVtcGxhdGU7XG4gICAgcHJvcHMubGlnaHRDc3MgPSBvdXRwdXQubGlnaHRDc3M7XG5cbiAgICBwcm9wcy5nbG9iYWxDc3MgPSBwcm9wcy5nbG9iYWxDc3MgfHwgJyc7XG4gICAgcHJvcHMuZ2xvYmFsQ3NzICs9IG91dHB1dC5nbG9iYWxDc3M7XG4gIH1cblxuICAvLyBJbmplY3QgZ2xvYmFsIENTUyBpbnRvIHRoZSBkb2N1bWVudCxcbiAgLy8gYW5kIGRlbGV0ZSBhcyBubyBsb25nZXIgbmVlZGVkXG4gIGluamVjdEdsb2JhbENzcyhwcm9wcy5nbG9iYWxDc3MpO1xuICBkZWxldGUgcHJvcHMuZ2xvYmFsQ3NzO1xuXG4gIC8vIE1lcmdlIGJhc2UgZ2V0dGVyL3NldHRlciBhdHRyaWJ1dGVzIHdpdGggdGhlIHVzZXIncyxcbiAgLy8gdGhlbiBkZWZpbmUgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3JzIG9uIHRoZSBwcm90b3R5cGUuXG4gIHZhciBkZXNjcmlwdG9ycyA9IG1peGluKHByb3BzLmF0dHJzIHx8IHt9LCBiYXNlLmRlc2NyaXB0b3JzKTtcblxuICAvLyBTdG9yZSB0aGUgb3JnaW5hbCBkZXNjcmlwdG9ycyBzb21ld2hlcmVcbiAgLy8gYSBsaXR0bGUgbW9yZSBwcml2YXRlIGFuZCBkZWxldGUgdGhlIG9yaWdpbmFsXG4gIHByb3BzLl9hdHRycyA9IHByb3BzLmF0dHJzO1xuICBkZWxldGUgcHJvcHMuYXR0cnM7XG5cbiAgLy8gQ3JlYXRlIHRoZSBwcm90b3R5cGUsIGV4dGVuZGVkIGZyb20gYmFzZSBhbmRcbiAgLy8gZGVmaW5lIHRoZSBkZXNjcmlwdG9ycyBkaXJlY3RseSBvbiB0aGUgcHJvdG90eXBlXG4gIHZhciBwcm90byA9IGNyZWF0ZVByb3RvKGJhc2VQcm90bywgcHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhwcm90bywgZGVzY3JpcHRvcnMpO1xuXG4gIC8vIFJlZ2lzdGVyIHRoZSBjdXN0b20tZWxlbWVudCBhbmQgcmV0dXJuIHRoZSBjb25zdHJ1Y3RvclxuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5yZWdpc3RlckVsZW1lbnQobmFtZSwgeyBwcm90b3R5cGU6IHByb3RvIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUubmFtZSAhPT0gJ05vdFN1cHBvcnRlZEVycm9yJykge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBiYXNlID0ge1xuICBwcm9wZXJ0aWVzOiB7XG4gICAgR2FpYUNvbXBvbmVudDogdHJ1ZSxcbiAgICBhdHRyaWJ1dGVDaGFuZ2VkOiBub29wLFxuICAgIGF0dGFjaGVkOiBub29wLFxuICAgIGRldGFjaGVkOiBub29wLFxuICAgIGNyZWF0ZWQ6IG5vb3AsXG5cbiAgICBjcmVhdGVkQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMucnRsKSB7IGFkZERpck9ic2VydmVyKCk7IH1cbiAgICAgIGluamVjdExpZ2h0Q3NzKHRoaXMpO1xuICAgICAgdGhpcy5jcmVhdGVkKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEl0IGlzIHZlcnkgY29tbW9uIHRvIHdhbnQgdG8ga2VlcCBvYmplY3RcbiAgICAgKiBwcm9wZXJ0aWVzIGluLXN5bmMgd2l0aCBhdHRyaWJ1dGVzLFxuICAgICAqIGZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogICBlbC52YWx1ZSA9ICdmb28nO1xuICAgICAqICAgZWwuc2V0QXR0cmlidXRlKCd2YWx1ZScsICdmb28nKTtcbiAgICAgKlxuICAgICAqIFNvIHdlIHN1cHBvcnQgYW4gb2JqZWN0IG9uIHRoZSBwcm90b3R5cGVcbiAgICAgKiBuYW1lZCAnYXR0cnMnIHRvIHByb3ZpZGUgYSBjb25zaXN0ZW50XG4gICAgICogd2F5IGZvciBjb21wb25lbnQgYXV0aG9ycyB0byBkZWZpbmVcbiAgICAgKiB0aGVzZSBwcm9wZXJ0aWVzLiBXaGVuIGFuIGF0dHJpYnV0ZVxuICAgICAqIGNoYW5nZXMgd2Uga2VlcCB0aGUgYXR0cltuYW1lXVxuICAgICAqIHVwLXRvLWRhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd8fG51bGx9IGZyb21cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd8fG51bGx9IHRvXG4gICAgICovXG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrOiBmdW5jdGlvbihuYW1lLCBmcm9tLCB0bykge1xuICAgICAgdmFyIHByb3AgPSB0b0NhbWVsQ2FzZShuYW1lKTtcbiAgICAgIGlmICh0aGlzLl9hdHRycyAmJiB0aGlzLl9hdHRyc1twcm9wXSkgeyB0aGlzW3Byb3BdID0gdG87IH1cbiAgICAgIHRoaXMuYXR0cmlidXRlQ2hhbmdlZChuYW1lLCBmcm9tLCB0byk7XG4gICAgfSxcblxuICAgIGF0dGFjaGVkQ2FsbGJhY2s6IGZ1bmN0aW9uKCkgeyB0aGlzLmF0dGFjaGVkKCk7IH0sXG4gICAgZGV0YWNoZWRDYWxsYmFjazogZnVuY3Rpb24oKSB7IHRoaXMuZGV0YWNoZWQoKTsgfSxcblxuICAgIC8qKlxuICAgICAqIEEgY29udmVuaWVudCBtZXRob2QgZm9yIHNldHRpbmcgdXBcbiAgICAgKiBhIHNoYWRvdy1yb290IHVzaW5nIHRoZSBkZWZpbmVkIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U2hhZG93Um9vdH1cbiAgICAgKi9cbiAgICBzZXR1cFNoYWRvd1Jvb3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLnRlbXBsYXRlKSB7IHJldHVybjsgfVxuICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5pbXBvcnROb2RlKHRoaXMudGVtcGxhdGUuY29udGVudCwgdHJ1ZSk7XG4gICAgICB0aGlzLmNyZWF0ZVNoYWRvd1Jvb3QoKS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIHJldHVybiB0aGlzLnNoYWRvd1Jvb3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgYW4gYXR0cmlidXRlIGludGVybmFsbHlcbiAgICAgKiBhbmQgZXh0ZXJuYWxseS4gVGhpcyBpcyBzbyB0aGF0XG4gICAgICogd2UgY2FuIHN0eWxlIGludGVybmFsIHNoYWRvdy1kb21cbiAgICAgKiBjb250ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRBdHRyOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGludGVybmFsID0gdGhpcy5zaGFkb3dSb290LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgc2V0QXR0cmlidXRlLmNhbGwoaW50ZXJuYWwsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBhdHRyaWJ1dGUgaW50ZXJuYWxseVxuICAgICAqIGFuZCBleHRlcm5hbGx5LiBUaGlzIGlzIHNvIHRoYXRcbiAgICAgKiB3ZSBjYW4gc3R5bGUgaW50ZXJuYWwgc2hhZG93LWRvbVxuICAgICAqIGNvbnRlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIHJlbW92ZUF0dHI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBpbnRlcm5hbCA9IHRoaXMuc2hhZG93Um9vdC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgIHJlbW92ZUF0dHJpYnV0ZS5jYWxsKGludGVybmFsLCBuYW1lKTtcbiAgICAgIHJlbW92ZUF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUpO1xuICAgIH1cbiAgfSxcblxuICBkZXNjcmlwdG9yczoge1xuICAgIHRleHRDb250ZW50OiB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRleHRDb250ZW50LnNldC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMubGlnaHRTdHlsZSkgeyB0aGlzLmFwcGVuZENoaWxkKHRoaXMubGlnaHRTdHlsZSk7IH1cbiAgICAgIH0sXG5cbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0ZXh0Q29udGVudC5nZXQoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5uZXJIVE1MOiB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlubmVySFRNTC5zZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLmxpZ2h0U3R5bGUpIHsgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLmxpZ2h0U3R5bGUpOyB9XG4gICAgICB9LFxuXG4gICAgICBnZXQ6IGlubmVySFRNTC5nZXRcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgYmFzZSBwcm90b3R5cGUgdG8gdXNlXG4gKiB3aGVuIGBleHRlbmRzYCBpcyB1bmRlZmluZWQuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIGRlZmF1bHRQcm90b3R5cGUgPSBjcmVhdGVQcm90byhIVE1MRWxlbWVudC5wcm90b3R5cGUsIGJhc2UucHJvcGVydGllcyk7XG5cbi8qKlxuICogUmV0dXJucyBhIHN1aXRhYmxlIHByb3RvdHlwZSBiYXNlZFxuICogb24gdGhlIG9iamVjdCBwYXNzZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50UHJvdG90eXBlfHVuZGVmaW5lZH0gcHJvdG9cbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50UHJvdG90eXBlfVxuICovXG5mdW5jdGlvbiBnZXRCYXNlUHJvdG8ocHJvdG8pIHtcbiAgaWYgKCFwcm90bykgeyByZXR1cm4gZGVmYXVsdFByb3RvdHlwZTsgfVxuICBwcm90byA9IHByb3RvLnByb3RvdHlwZSB8fCBwcm90bztcbiAgcmV0dXJuICFwcm90by5HYWlhQ29tcG9uZW50ID9cbiAgICBjcmVhdGVQcm90byhwcm90bywgYmFzZS5wcm9wZXJ0aWVzKSA6IHByb3RvO1xufVxuXG4vKipcbiAqIEV4dGVuZHMgdGhlIGdpdmVuIHByb3RvIGFuZCBtaXhlc1xuICogaW4gdGhlIGdpdmVuIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge09iamVjdH0gcHJvdG9cbiAqIEBwYXJhbSAge09iamVjdH0gcHJvcHNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUHJvdG8ocHJvdG8sIHByb3BzKSB7XG4gIHJldHVybiBtaXhpbihPYmplY3QuY3JlYXRlKHByb3RvKSwgcHJvcHMpO1xufVxuXG4vKipcbiAqIERldGVjdHMgcHJlc2VuY2Ugb2Ygc2hhZG93LWRvbVxuICogQ1NTIHNlbGVjdG9ycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGhhc1NoYWRvd0NTUyA9IChmdW5jdGlvbigpIHtcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0cnkgeyBkaXYucXVlcnlTZWxlY3RvcignOmhvc3QnKTsgcmV0dXJuIHRydWU7IH1cbiAgY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9XG59KSgpO1xuXG4vKipcbiAqIFJlZ2V4cyB1c2VkIHRvIGV4dHJhY3Qgc2hhZG93LWNzc1xuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciByZWdleCA9IHtcbiAgc2hhZG93Q3NzOiAvKD86XFw6aG9zdHxcXDpcXDpjb250ZW50KVtee10qXFx7W159XSpcXH0vZyxcbiAgJzpob3N0JzogLyg/OlxcOmhvc3QpL2csXG4gICc6aG9zdCgpJzogL1xcOmhvc3RcXCgoLispXFwpKD86IFxcOlxcOmNvbnRlbnQpPy9nLFxuICAnOmhvc3QtY29udGV4dCc6IC9cXDpob3N0LWNvbnRleHRcXCgoLispXFwpKFteeyxdKyk/L2csXG4gICc6OmNvbnRlbnQnOiAvKD86XFw6XFw6Y29udGVudCkvZ1xufTtcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgOmhvc3QgYW5kIDo6Y29udGVudCBydWxlc1xuICogZnJvbSB0aGUgc2hhZG93LWRvbSBDU1MgYW5kIHJld3JpdGVzXG4gKiB0aGVtIHRvIHdvcmsgZnJvbSB0aGUgPHN0eWxlIHNjb3BlZD5cbiAqIGluamVjdGVkIGF0IHRoZSByb290IG9mIHRoZSBjb21wb25lbnQuXG4gKlxuICogQHByaXZhdGVcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc0Nzcyh0ZW1wbGF0ZSwgbmFtZSkge1xuICB2YXIgZ2xvYmFsQ3NzID0gJyc7XG4gIHZhciBsaWdodENzcyA9ICcnO1xuXG4gIGlmICghaGFzU2hhZG93Q1NTKSB7XG4gICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKHJlZ2V4LnNoYWRvd0NzcywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHZhciBob3N0Q29udGV4dCA9IHJlZ2V4Wyc6aG9zdC1jb250ZXh0J10uZXhlYyhtYXRjaCk7XG5cbiAgICAgIGlmIChob3N0Q29udGV4dCkge1xuICAgICAgICBnbG9iYWxDc3MgKz0gbWF0Y2hcbiAgICAgICAgICAucmVwbGFjZShyZWdleFsnOjpjb250ZW50J10sICcnKVxuICAgICAgICAgIC5yZXBsYWNlKHJlZ2V4Wyc6aG9zdC1jb250ZXh0J10sICckMSAnICsgbmFtZSArICckMicpXG4gICAgICAgICAgLnJlcGxhY2UoLyArL2csICcgJyk7IC8vIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaWdodENzcyArPSBtYXRjaFxuICAgICAgICAgIC5yZXBsYWNlKHJlZ2V4Wyc6aG9zdCgpJ10sIG5hbWUgKyAnJDEnKVxuICAgICAgICAgIC5yZXBsYWNlKHJlZ2V4Wyc6aG9zdCddLCBuYW1lKVxuICAgICAgICAgIC5yZXBsYWNlKHJlZ2V4Wyc6OmNvbnRlbnQnXSwgbmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICAgIGxpZ2h0Q3NzOiBsaWdodENzcyxcbiAgICBnbG9iYWxDc3M6IGdsb2JhbENzc1xuICB9O1xufVxuXG4vKipcbiAqIFNvbWUgQ1NTIHJ1bGVzLCBzdWNoIGFzIEBrZXlmcmFtZXNcbiAqIGFuZCBAZm9udC1mYWNlIGRvbid0IHdvcmsgaW5zaWRlXG4gKiBzY29wZWQgb3Igc2hhZG93IDxzdHlsZT4uIFNvIHdlXG4gKiBoYXZlIHRvIHB1dCB0aGVtIGludG8gJ2dsb2JhbCdcbiAqIDxzdHlsZT4gaW4gdGhlIGhlYWQgb2YgdGhlXG4gKiBkb2N1bWVudC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7U3RyaW5nfSBjc3NcbiAqL1xuZnVuY3Rpb24gaW5qZWN0R2xvYmFsQ3NzKGNzcykge1xuICBpZiAoIWNzcykge3JldHVybjt9XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLmlubmVySFRNTCA9IGNzcy50cmltKCk7XG4gIGhlYWRSZWFkeSgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH0pO1xufVxuXG5cbi8qKlxuICogUmVzb2x2ZXMgYSBwcm9taXNlIG9uY2UgZG9jdW1lbnQuaGVhZCBpcyByZWFkeS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBoZWFkUmVhZHkoKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgaWYgKGRvY3VtZW50LmhlYWQpIHsgcmV0dXJuIHJlc29sdmUoKTsgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gZm4oKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZuKTtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cblxuLyoqXG4gKiBUaGUgR2Vja28gcGxhdGZvcm0gZG9lc24ndCB5ZXQgaGF2ZVxuICogYDo6Y29udGVudGAgb3IgYDpob3N0YCwgc2VsZWN0b3JzLFxuICogd2l0aG91dCB0aGVzZSB3ZSBhcmUgdW5hYmxlIHRvIHN0eWxlXG4gKiB1c2VyLWNvbnRlbnQgaW4gdGhlIGxpZ2h0LWRvbSBmcm9tXG4gKiB3aXRoaW4gb3VyIHNoYWRvdy1kb20gc3R5bGUtc2hlZXQuXG4gKlxuICogVG8gd29ya2Fyb3VuZCB0aGlzLCB3ZSBjbG9uZSB0aGUgPHN0eWxlPlxuICogbm9kZSBpbnRvIHRoZSByb290IG9mIHRoZSBjb21wb25lbnQsXG4gKiBzbyBvdXIgc2VsZWN0b3JzIGFyZSBhYmxlIHRvIHRhcmdldFxuICogbGlnaHQtZG9tIGNvbnRlbnQuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaW5qZWN0TGlnaHRDc3MoZWwpIHtcbiAgaWYgKGhhc1NoYWRvd0NTUykgeyByZXR1cm47IH1cbiAgZWwubGlnaHRTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIGVsLmxpZ2h0U3R5bGUuc2V0QXR0cmlidXRlKCdzY29wZWQnLCAnJyk7XG4gIGVsLmxpZ2h0U3R5bGUuaW5uZXJIVE1MID0gZWwubGlnaHRDc3M7XG4gIGVsLmFwcGVuZENoaWxkKGVsLmxpZ2h0U3R5bGUpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgaHlwaGVuIHNlcGFyYXRlZFxuICogc3RyaW5nIHRvIGNhbWVsLWNhc2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgIHRvQ2FtZWxDYXNlKCdmb28tYmFyJyk7IC8vPT4gJ2Zvb0JhcidcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7U3Jpbmd9IHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8tKC4pL2csIGZ1bmN0aW9uIHJlcGxhY2VyKHN0cmluZywgcDEpIHtcbiAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgKHNpbmdsZXRvbilcbiAqXG4gKiBAdHlwZSB7TXV0YXRpb25PYnNlcnZlcnx1bmRlZmluZWR9XG4gKi9cbnZhciBkaXJPYnNlcnZlcjtcblxuLyoqXG4gKiBPYnNlcnZlcyB0aGUgZG9jdW1lbnQgYGRpcmAgKGRpcmVjdGlvbilcbiAqIGF0dHJpYnV0ZSBhbmQgZGlzcGF0Y2hlcyBhIGdsb2JhbCBldmVudFxuICogd2hlbiBpdCBjaGFuZ2VzLlxuICpcbiAqIENvbXBvbmVudHMgY2FuIGxpc3RlbiB0byB0aGlzIGV2ZW50IGFuZFxuICogbWFrZSBpbnRlcm5hbCBjaGFuZ2VzIGlmIG5lZWQgYmUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkRGlyT2JzZXJ2ZXIoKSB7XG4gIGlmIChkaXJPYnNlcnZlcikgeyByZXR1cm47IH1cblxuICBkaXJPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKG9uQ2hhbmdlZCk7XG4gIGRpck9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7XG4gICAgYXR0cmlidXRlRmlsdGVyOiBbJ2RpciddLFxuICAgIGF0dHJpYnV0ZXM6IHRydWVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VkKG11dGF0aW9ucykge1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdkaXJjaGFuZ2VkJykpO1xuICB9XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIG9mIGFsbCBwcm9wZXJ0aWVzIGZyb21cbiAqIHNvdXJjZSBvYmplY3QgYHRhcmdldGAgdG8gYSB0YXJnZXQgb2JqZWN0IGBzb3VyY2VgLlxuICogSXQgd2lsbCByZXR1cm4gdGhlIHRhcmdldCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHtPYmplY3R9IHRhcmdldFxuICogQHBhcmFtICAge09iamVjdH0gc291cmNlXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBtaXhpbih0YXJnZXQsIHNvdXJjZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG59KTt9KSh0eXBlb2YgZGVmaW5lPT0nZnVuY3Rpb24nJiZkZWZpbmUuYW1kP2RlZmluZVxuOihmdW5jdGlvbihuLHcpeyd1c2Ugc3RyaWN0JztyZXR1cm4gdHlwZW9mIG1vZHVsZT09J29iamVjdCc/ZnVuY3Rpb24oYyl7XG5jKHJlcXVpcmUsZXhwb3J0cyxtb2R1bGUpO306ZnVuY3Rpb24oYyl7dmFyIG09e2V4cG9ydHM6e319O2MoZnVuY3Rpb24obil7XG5yZXR1cm4gd1tuXTt9LG0uZXhwb3J0cyxtKTt3W25dPW0uZXhwb3J0czt9O30pKCdnYWlhLWNvbXBvbmVudCcsdGhpcykpO1xuIiwiLyogZ2xvYmFscyBkZWZpbmUgKi9cbihmdW5jdGlvbihkZWZpbmUpeyd1c2Ugc3RyaWN0JztkZWZpbmUoZnVuY3Rpb24ocmVxdWlyZSxleHBvcnRzLG1vZHVsZSl7XG5cbi8qKlxuICogRGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIGNvbXBvbmVudCA9IHJlcXVpcmUoJ2dhaWEtY29tcG9uZW50Jyk7XG5cbi8qKlxuICogU2ltcGxlIGxvZ2dlclxuICogQHR5cGUge0Z1bmN0aW9ufVxuICovXG52YXIgZGVidWcgPSAwID8gY29uc29sZS5sb2cuYmluZChjb25zb2xlKSA6IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogRXhwb3J0c1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gY29tcG9uZW50LnJlZ2lzdGVyKCd2ci1zY2VuZScsIHtcbiAgZXh0ZW5kczogSFRNTERpdkVsZW1lbnQucHJvdG90eXBlLFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0dXBFdmVudEhhbmRsZXJzKCk7XG4gICAgdGhpcy5zZXR1cFNoYWRvd1Jvb3QoKTtcbiAgICB0aGlzLnNldHVwUmVuZGVyZXIoKTtcbiAgICB0aGlzLnNldHVwU2NlbmUoKTtcbiAgICB0aGlzLnNldHVwQ2FtZXJhKCk7XG4gIH0sXG5cbiAgc2V0dXBFdmVudEhhbmRsZXJzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJvY2Vzc0RldmljZXMgPSB0aGlzLnByb2Nlc3NEZXZpY2VzLmJpbmQodGhpcyk7XG4gICAgdmFyIG9uZnVsbHNjcmVlbmNoYW5nZSA9IHRoaXMub25mdWxsc2NyZWVuY2hhbmdlLmJpbmQodGhpcyk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmtpdGZ1bGxzY3JlZW5jaGFuZ2VcIiwgb25mdWxsc2NyZWVuY2hhbmdlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW96ZnVsbHNjcmVlbmNoYW5nZVwiLCAgICBvbmZ1bGxzY3JlZW5jaGFuZ2UpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmdWxsc2NyZWVuY2hhbmdlXCIsICAgICAgIG9uZnVsbHNjcmVlbmNoYW5nZSk7XG4gICAgdGhpcy5nZXRWUkRldmljZXMoKS50aGVuKHByb2Nlc3NEZXZpY2VzKVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBjb25zb2xlLndhcm4oZXJyKTtcbiAgICB9KTtcbiAgfSxcblxuICBvbmZ1bGxzY3JlZW5jaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgIGlmICggIWRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50ICYmICFkb2N1bWVudC53ZWJraXRGdWxsU2NyZWVuRWxlbWVudCApIHtcbiAgICAgIHRoaXMudmlld3BvclRyYW5zZm9ybSA9IHRoaXMuY2FtZXJhUHJvamVjdGlvblRyYW5zZm9ybTtcbiAgICAgIHRoaXMudnJNb2RlID0gZmFsc2U7XG4gICAgICB0aGlzLnZyRWZmZWN0LnNjYWxlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52ck1vZGUgPSB0cnVlO1xuICAgICAgdGhpcy52aWV3cG9yVHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZCgtNTAlLCAtNTAlLCAwcHgpXCI7XG4gICAgICB0aGlzLnZyRWZmZWN0LnNjYWxlID0gMjUwMDtcbiAgICB9XG4gICAgdGhpcy5yZXNpemVDYW52YXMoKTtcbiAgfSxcblxuICBhZGRPYmplY3Q6IGZ1bmN0aW9uKGVsLCBwcm92aWRlZF9vYmopIHtcbiAgICB2YXIgb2JqID0gZWwub2JqZWN0M0Q7XG4gICAgdmFyIG9ialBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgaWYgKG9iaiAmJiB0aGlzLnNjZW5lLmdldE9iamVjdEJ5SWQob2JqLmlkKSkge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgb2JqID0gZWwub2JqZWN0M0QgPSBlbC5vYmplY3QzRCB8fCBwcm92aWRlZF9vYmogfHwgbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgb2JqLnNjZW5lID0gdGhpcztcbiAgICBpZiAob2JqUGFyZW50ICYmIG9ialBhcmVudCAhPT0gdGhpcykge1xuICAgICAgb2JqUGFyZW50ID0gdGhpcy5hZGRPYmplY3QoZWwucGFyZW50Tm9kZSk7XG4gICAgICBvYmpQYXJlbnQuYWRkKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2NlbmUuYWRkKG9iaik7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH0sXG5cbiAgZXBzaWxvbjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoIHZhbHVlICkgPCAwLjAwMDAwMSA/IDAgOiB2YWx1ZTtcbiAgfSxcblxuICBnZXRDU1NNYXRyaXg6IGZ1bmN0aW9uIChtYXRyaXgpIHtcbiAgICB2YXIgZXBzaWxvbiA9IHRoaXMuZXBzaWxvbjtcbiAgICB2YXIgZWxlbWVudHMgPSBtYXRyaXguZWxlbWVudHM7XG5cbiAgICByZXR1cm4gJ21hdHJpeDNkKCcgK1xuICAgICAgZXBzaWxvbiggZWxlbWVudHNbIDAgXSApICsgJywnICtcbiAgICAgIGVwc2lsb24oIGVsZW1lbnRzWyAxIF0gKSArICcsJyArXG4gICAgICBlcHNpbG9uKCBlbGVtZW50c1sgMiBdICkgKyAnLCcgK1xuICAgICAgZXBzaWxvbiggZWxlbWVudHNbIDMgXSApICsgJywnICtcbiAgICAgIGVwc2lsb24oIGVsZW1lbnRzWyA0IF0gKSArICcsJyArXG4gICAgICBlcHNpbG9uKCBlbGVtZW50c1sgNSBdICkgKyAnLCcgK1xuICAgICAgZXBzaWxvbiggZWxlbWVudHNbIDYgXSApICsgJywnICtcbiAgICAgIGVwc2lsb24oIGVsZW1lbnRzWyA3IF0gKSArICcsJyArXG4gICAgICBlcHNpbG9uKCBlbGVtZW50c1sgOCBdICkgKyAnLCcgK1xuICAgICAgZXBzaWxvbiggZWxlbWVudHNbIDkgXSApICsgJywnICtcbiAgICAgIGVwc2lsb24oIGVsZW1lbnRzWyAxMCBdICkgKyAnLCcgK1xuICAgICAgZXBzaWxvbiggZWxlbWVudHNbIDExIF0gKSArICcsJyArXG4gICAgICBlcHNpbG9uKCBlbGVtZW50c1sgMTIgXSApICsgJywnICtcbiAgICAgIGVwc2lsb24oIGVsZW1lbnRzWyAxMyBdICkgKyAnLCcgK1xuICAgICAgZXBzaWxvbiggZWxlbWVudHNbIDE0IF0gKSArICcsJyArXG4gICAgICBlcHNpbG9uKCBlbGVtZW50c1sgMTUgXSApICtcbiAgICAnKSc7XG4gIH0sXG5cbiAgc2V0dXBDYW1lcmE6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb3YgPSB0aGlzLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0tZm92JykgfHwgNDU7XG4gICAgdmFyIHZpZXdwb3J0ID0gdGhpcy52aWV3cG9ydCA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcudmlld3BvcnQnKTtcblxuICAgIC8vIERPTSBjYW1lcmFcbiAgICB2YXIgcGVyc3BlY3RpdmVNYXRyaXggPSB0aGlzLnBlcnNwZWN0aXZlTWF0cml4KFRIUkVFLk1hdGguZGVnVG9SYWQoNDUpLCB0aGlzLm9mZnNldFdpZHRoIC8gdGhpcy5vZmZzZXRIZWlnaHQsIDEsIDEwMDAwKTtcbiAgICB2YXIgc2NhbGVkID0gcGVyc3BlY3RpdmVNYXRyaXguY2xvbmUoKS5zY2FsZShuZXcgVEhSRUUuVmVjdG9yMyh0aGlzLm9mZnNldFdpZHRoLCB0aGlzLm9mZnNldEhlaWdodCwgMSkpO1xuICAgIHZhciBzdHlsZSA9IHRoaXMuY2FtZXJhUHJvamVjdGlvblRyYW5zZm9ybSA9IHRoaXMuZ2V0Q1NTTWF0cml4KHNjYWxlZCk7XG4gICAgdGhpcy52aWV3cG9yVHJhbnNmb3JtID0gc3R5bGU7XG5cbiAgICAvLyBXZWJHTCBjYW1lcmFcbiAgICB2YXIgY2FtZXJhID0gdGhpcy5jYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNDUsIHRoaXMub2Zmc2V0V2lkdGggLyB0aGlzLm9mZnNldEhlaWdodCwgMSwgMTAwMDApO1xuICAgIHRoaXMudnJDb250cm9scyA9IG5ldyBUSFJFRS5WUkNvbnRyb2xzKCBjYW1lcmEgKTtcblxuICB9LFxuXG4gIHBlcnNwZWN0aXZlTWF0cml4OiBmdW5jdGlvbihmb3YsIGFzcGVjdCwgbmVhcnosIGZhcnopIHtcbiAgICB2YXIgbWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcbiAgICB2YXIgcmFuZ2UgPSBNYXRoLnRhbihmb3YgKiAwLjUpICogbmVhcno7XG5cbiAgICBtYXRyaXguZWxlbWVudHNbMF0gPSAoMiAqIG5lYXJ6KSAvICgocmFuZ2UgKiBhc3BlY3QpIC0gKC1yYW5nZSAqIGFzcGVjdCkpO1xuICAgIG1hdHJpeC5lbGVtZW50c1sxXSA9IDA7XG4gICAgbWF0cml4LmVsZW1lbnRzWzJdID0gMDtcbiAgICBtYXRyaXguZWxlbWVudHNbM10gPSAwO1xuICAgIG1hdHJpeC5lbGVtZW50c1s0XSA9IDA7XG4gICAgbWF0cml4LmVsZW1lbnRzWzVdID0gKDIgKiBuZWFyeikgLyAoMiAqIHJhbmdlKTtcbiAgICBtYXRyaXguZWxlbWVudHNbNl0gPSAwO1xuICAgIG1hdHJpeC5lbGVtZW50c1s3XSA9IDA7XG4gICAgbWF0cml4LmVsZW1lbnRzWzhdID0gMDtcbiAgICBtYXRyaXguZWxlbWVudHNbOV0gPSAwO1xuICAgIG1hdHJpeC5lbGVtZW50c1sxMF0gPSAtKGZhcnogKyBuZWFyeikgLyAoZmFyeiAtIG5lYXJ6KTtcbiAgICBtYXRyaXguZWxlbWVudHNbMTFdID0gLTE7XG4gICAgbWF0cml4LmVsZW1lbnRzWzEyXSA9IDA7XG4gICAgbWF0cml4LmVsZW1lbnRzWzEzXSA9IDA7XG4gICAgbWF0cml4LmVsZW1lbnRzWzE0XSA9IC0oMiAqIGZhcnogKiBuZWFyeikgLyAoZmFyeiAtIG5lYXJ6KTtcbiAgICBtYXRyaXguZWxlbWVudHNbMTVdID0gMDtcbiAgICByZXR1cm4gbWF0cml4LnRyYW5zcG9zZSgpO1xuICB9LFxuXG4gIHNldHVwUmVuZGVyZXI6IGZ1bmN0aW9uKCkge1xuICAgIC8vIEFsbCBXZWJHTCBzZXR1cFxuICAgIHZhciBjYW52YXMgPSB0aGlzLmNhbnZhcyA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKTtcblxuICAgIHRoaXMucmVzaXplQ2FudmFzKCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVzaXplQ2FudmFzLmJpbmQodGhpcyksIGZhbHNlKTtcblxuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlciggeyBjYW52YXM6IGNhbnZhcywgYW50aWFsaWFzOiB0cnVlLCBhbHBoYTogdHJ1ZSB9ICk7XG4gICAgcmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyggd2luZG93LmRldmljZVBpeGVsUmF0aW8gKTtcbiAgICByZW5kZXJlci5zZXRTaXplKCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0ICk7XG4gICAgcmVuZGVyZXIuc29ydE9iamVjdHMgPSBmYWxzZTtcbiAgICB0aGlzLnZyRWZmZWN0ID0gbmV3IFRIUkVFLlZSRWZmZWN0KHJlbmRlcmVyKTtcbiAgfSxcblxuICBzZXR1cFNjZW5lOiBmdW5jdGlvbigpIHtcbiAgICAvLy8gQWxsIFdlYkdMIFNldHVwXG4gICAgdmFyIHNjZW5lID0gdGhpcy5zY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuICAgIGNyZWF0ZUxpZ2h0cygpO1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUxpZ2h0cygpIHtcbiAgICAgIHZhciBkaXJlY3Rpb25hbExpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYpO1xuICAgICAgZGlyZWN0aW9uYWxMaWdodC5wb3NpdGlvbi5zZXQoMSwgMSwgMSkubm9ybWFsaXplKCk7XG4gICAgICBzY2VuZS5hZGQoZGlyZWN0aW9uYWxMaWdodCk7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hpbGQ7XG4gICAgdmFyIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgIGlmICh0eXBlb2YgY2hpbGQudXBkYXRlID09ICdmdW5jdGlvbicpIHsgY2hpbGQudXBkYXRlKCk7IH1cbiAgICAgIGlmICh0eXBlb2YgY2hpbGQudXBkYXRlQ2hpbGRyZW4gPT0gJ2Z1bmN0aW9uJykgeyBjaGlsZC51cGRhdGVDaGlsZHJlbigpOyB9XG4gICAgfVxuICB9LFxuXG4gIHJlc2l6ZUNhbnZhczogZnVuY3Rpb24ocmVuZGVyZXIsIGNhbWVyYSl7XG4gICAgdmFyIGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgIC8vIE1ha2UgaXQgdmlzdWFsbHkgZmlsbCB0aGUgcG9zaXRpb25lZCBwYXJlbnRcbiAgICBjYW52YXMuc3R5bGUud2lkdGggPScxMDAlJztcbiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0PScxMDAlJztcbiAgICAvLyAuLi50aGVuIHNldCB0aGUgaW50ZXJuYWwgc2l6ZSB0byBtYXRjaFxuICAgIGNhbnZhcy53aWR0aCAgPSBjYW52YXMub2Zmc2V0V2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy5vZmZzZXRIZWlnaHQ7XG5cbiAgICBpZiAodGhpcy5jYW1lcmEpIHtcbiAgICAgIHRoaXMuY2FtZXJhLmFzcGVjdCA9IGNhbnZhcy53aWR0aCAvIGNhbnZhcy5oZWlnaHQ7XG4gICAgICB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIC8vIG5vdGlmeSB0aGUgcmVuZGVyZXIgb2YgdGhlIHNpemUgY2hhbmdlXG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUoIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCApO1xuICAgIH1cblxuICB9LFxuXG4gIGFuaW1hdGU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMudnJNb2RlPyB0aGlzLnZyRWZmZWN0IDogdGhpcy5yZW5kZXJlcjtcbiAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuKCk7XG4gICAgdGhpcy52ckNvbnRyb2xzLnVwZGF0ZSgpO1xuICAgIHZhciBvcmllbnRhdGlvbiA9IHRoaXMudnJDb250cm9scy5zdGF0ZS5vcmllbnRhdGlvbjtcbiAgICB2YXIgb3JpZW50YXRpb25NYXRyaXg7XG4gICAgdmFyIHF1YXRlcm5pb247XG4gICAgaWYgKG9yaWVudGF0aW9uKSB7XG4gICAgICBxdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24ob3JpZW50YXRpb24ueCwgLW9yaWVudGF0aW9uLnksIG9yaWVudGF0aW9uLnosIG9yaWVudGF0aW9uLncpO1xuICAgICAgb3JpZW50YXRpb25NYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKHF1YXRlcm5pb24pO1xuICAgICAgdGhpcy52aWV3cG9ydC5zdHlsZS50cmFuc2Zvcm0gPSB0aGlzLnZpZXdwb3JUcmFuc2Zvcm0gKyAnICcgKyB0aGlzLmdldENTU01hdHJpeChvcmllbnRhdGlvbk1hdHJpeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmlld3BvcnQuc3R5bGUudHJhbnNmb3JtID0gdGhpcy52aWV3cG9yVHJhbnNmb3JtO1xuICAgIH1cbiAgICByZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEpO1xuICB9LFxuXG4gIGF0dHJpYnV0ZUNoYW5nZWQ6IGZ1bmN0aW9uKG5hbWUsIGZyb20sIHRvKSB7XG4gICAgaWYgKG5hbWUgPT09IFwiYW5nbGVcIikge1xuICAgICAgdGhpcy5zdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlWSggJyArIHRoaXMuYW5nbGUgKyAnZGVnICknO1xuICAgIH1cbiAgfSxcblxuICBmaWx0ZXJJbnZhbGlkRGV2aWNlczogZnVuY3Rpb24oZGV2aWNlcykge1xuICAgIHZhciBvY3VsdXNEZXZpY2VzID0gZGV2aWNlcy5maWx0ZXIoZnVuY3Rpb24gKGRldmljZSkge1xuICAgICAgcmV0dXJuIGRldmljZS5kZXZpY2VOYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignb2N1bHVzJykgIT09IC0xO1xuICAgIH0pO1xuXG4gICAgaWYgKG9jdWx1c0RldmljZXMubGVuZ3RoID49IDEpIHtcbiAgICAgIHJldHVybiBkZXZpY2VzLmZpbHRlcihmdW5jdGlvbiAoZGV2aWNlKSB7XG4gICAgICAgIHJldHVybiBkZXZpY2UuZGV2aWNlTmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2NhcmRib2FyZCcpID09PSAtMTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGV2aWNlcztcbiAgICB9XG4gIH0sXG5cbiAgIHByb2Nlc3NEZXZpY2VzOiBmdW5jdGlvbihkZXZpY2VzKSB7XG4gICAgICBkZXZpY2VzID0gdGhpcy5maWx0ZXJJbnZhbGlkRGV2aWNlcyhkZXZpY2VzKTtcblxuICAgICAgdmFyIGhlYWRzZXQgPSB1bmRlZmluZWQ7XG4gICAgICB2YXIgcG9zaXRpb24gPSB1bmRlZmluZWQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGV2aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGV2aWNlID0gZGV2aWNlc1tpXTtcbiAgICAgICAgaWYgKGRldmljZSBpbnN0YW5jZW9mIEhNRFZSRGV2aWNlKSB7XG4gICAgICAgICAgaGVhZHNldCA9IGRldmljZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGV2aWNlIGluc3RhbmNlb2YgUG9zaXRpb25TZW5zb3JWUkRldmljZSkge1xuICAgICAgICAgIHBvc2l0aW9uID0gZGV2aWNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiAmJiBoZWFkc2V0KSB7XG4gICAgICAgICAgdGhpcy52ciA9IHtcbiAgICAgICAgICAgIGhlYWRzZXQ6IGhlYWRzZXQsXG4gICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb25cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gIH0sXG5cbiAgZ2V0VlJEZXZpY2VzOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZiAobmF2aWdhdG9yLmdldFZSRGV2aWNlcykge1xuICAgICAgICBuYXZpZ2F0b3IuZ2V0VlJEZXZpY2VzKCkudGhlbihmdW5jdGlvbiAoZGV2aWNlcykge1xuICAgICAgICAgIHJlc29sdmUoZGV2aWNlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoJ05vIFZSIGRldmljZXMgZm91bmQuJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgc3RhcnRWUjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5tb3pSZXF1ZXN0RnVsbFNjcmVlbih7XG4gICAgICB2ckRpc3BsYXk6IHRoaXMudnIuaGVhZHNldFxuICAgIH0pO1xuICB9LFxuXG4gIHJlc2V0U2Vuc29yOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy52ci5wb3NpdGlvbikge1xuICAgICAgdGhpcy52ci5wb3NpdGlvbi5yZXNldFNlbnNvcigpO1xuICAgIH1cbiAgfSxcblxuICB0ZW1wbGF0ZTogYFxuICAgIDxjYW52YXMgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiPjwvY2FudmFzPlxuICAgIDxkaXYgY2xhc3M9XCJ2aWV3cG9ydFwiPlxuICAgICAgPGNvbnRlbnQ+PC9jb250ZW50PlxuICAgIDwvZGl2PlxuXG4gICAgPHN0eWxlPlxuICAgICAgOmhvc3Qge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTpcbiAgICAgICAgICByYWRpYWwtZ3JhZGllbnQoXG4gICAgICAgICAgICAjMEI2NzkwLFxuICAgICAgICAgICAgIzE0MzY0QVxuICAgICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC52aWV3cG9ydCB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkO1xuICAgICAgfVxuXG4gICAgICBjYW52YXMge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIH1cbiAgICA8L3N0eWxlPmBcbn0pO1xuXG59KTt9KSh0eXBlb2YgZGVmaW5lPT0nZnVuY3Rpb24nJiZkZWZpbmUuYW1kP2RlZmluZVxuOihmdW5jdGlvbihuLHcpeyd1c2Ugc3RyaWN0JztyZXR1cm4gdHlwZW9mIG1vZHVsZT09J29iamVjdCc/ZnVuY3Rpb24oYyl7XG5jKHJlcXVpcmUsZXhwb3J0cyxtb2R1bGUpO306ZnVuY3Rpb24oYyl7dmFyIG09e2V4cG9ydHM6e319O2MoZnVuY3Rpb24obil7XG5yZXR1cm4gd1tuXTt9LG0uZXhwb3J0cyxtKTt3W25dPW0uZXhwb3J0czt9O30pKCdWUlNDZW5lJyx0aGlzKSk7XG4iLCIvKiBnbG9iYWxzIGRlZmluZSAqL1xuKGZ1bmN0aW9uKGRlZmluZSl7J3VzZSBzdHJpY3QnO2RlZmluZShmdW5jdGlvbihyZXF1aXJlLGV4cG9ydHMsbW9kdWxlKXtcblxuLyoqXG4gKiBEZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgY29tcG9uZW50ID0gcmVxdWlyZSgnZ2FpYS1jb21wb25lbnQnKTtcblxuLyoqXG4gKiBTaW1wbGUgbG9nZ2VyXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cbnZhciBkZWJ1ZyA9IDAgPyBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpIDogZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBFeHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnQucmVnaXN0ZXIoJ3ZyLW9iamVjdCcsIHtcbiAgZXh0ZW5kczogSFRNTERpdkVsZW1lbnQucHJvdG90eXBlLFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkdW1teTtcbiAgICB0aGlzLnNldHVwU2hhZG93Um9vdCgpO1xuICAgIHRoaXMuZmluZFNjZW5lKCk7XG4gICAgdGhpcy5zY2VuZS5hZGRPYmplY3QodGhpcyk7XG4gICAgdGhpcy51cGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAvL3RoaXMucmVwb3J0U2l6ZSgpO1xuICB9LFxuXG4gIGdldENoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkTm9kZXM7XG4gICAgdmFyIG9ianMgPSBbXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgY2hpbGQ7XG4gICAgZm9yIChpPTA7IGk8Y2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoY2hpbGQudGFnTmFtZSA9PT0gXCJWUi1PQkpFQ1RcIikge1xuICAgICAgICBvYmpzLnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqcztcbiAgfSxcblxuICB1cGRhdGVTaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWxSZWN0O1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuZ2V0Q2hpbGRyZW4oKTtcbiAgICB2YXIgcmVjdCA9IHt9O1xuICAgIHZhciBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgZWxSZWN0ID0gY2hpbGRyZW5baV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBpZiAodHlwZW9mIHJlY3QudG9wID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgIGVsUmVjdC50b3AgPCByZWN0LnRvcCkge1xuICAgICAgICByZWN0LnRvcCA9IGVsUmVjdC50b3A7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHJlY3QubGVmdCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICBlbFJlY3QubGVmdCA8IHJlY3QubGVmdCkge1xuICAgICAgICByZWN0LmxlZnQgPSBlbFJlY3QubGVmdDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcmVjdC5ib3R0b20gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgZWxSZWN0LmJvdHRvbSA+IHJlY3QuYm90dG9tKSB7XG4gICAgICAgIHJlY3QuYm90dG9tID0gZWxSZWN0LmJvdHRvbTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcmVjdC5yaWdodCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgIGVsUmVjdC5yaWdodCA+IHJlY3QucmlnaHQpIHtcbiAgICAgICAgcmVjdC5yaWdodCA9IGVsUmVjdC5yaWdodDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zdHlsZS50b3AgPSByZWN0LnRvcDtcbiAgICB0aGlzLnN0eWxlLmxlZnQgPSByZWN0LmxlZnQ7XG4gICAgdGhpcy5zdHlsZS53aWR0aCA9IChyZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0KSArICdweCc7XG4gICAgdGhpcy5zdHlsZS5oZWlnaHQgPSAocmVjdC5ib3R0b20gLSByZWN0LnRvcCkgKyAncHgnO1xuICAgIC8vdGhpcy5yZXBvcnRTaXplKCk7XG4gICAgcmV0dXJuIHJlY3Q7XG4gIH0sXG5cbiAgcmVwb3J0U2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMucGFyZW50Tm9kZSAmJiB0aGlzLnBhcmVudE5vZGUudGFnTmFtZSA9PT0gXCJWUi1PQkpFQ1RcIikge1xuICAgICAgdGhpcy5wYXJlbnROb2RlLnVwZGF0ZVNpemUoKTtcbiAgICB9XG4gIH0sXG5cbiAgYXR0cmlidXRlQ2hhbmdlZDogZnVuY3Rpb24obmFtZSwgZnJvbSwgdG8pIHtcbiAgICB0aGlzLnVwZGF0ZVRyYW5zZm9ybSgpO1xuICB9LFxuXG4gIGVwc2lsb246IGZ1bmN0aW9uICggdmFsdWUgKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKCB2YWx1ZSApIDwgMC4wMDAwMDEgPyAwIDogdmFsdWU7XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbigpIHsgLyogTk9PUCAqLyB9LFxuXG4gIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hpbGQ7XG4gICAgdmFyIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgIGlmICh0eXBlb2YgY2hpbGQudXBkYXRlID09ICdmdW5jdGlvbicpIHsgY2hpbGQudXBkYXRlKCk7IH1cbiAgICAgIGlmICh0eXBlb2YgY2hpbGQudXBkYXRlQ2hpbGRyZW4gPT0gJ2Z1bmN0aW9uJykgeyBjaGlsZC51cGRhdGVDaGlsZHJlbigpOyB9XG4gICAgfVxuICB9LFxuXG4gIGdldENTU01hdHJpeDogZnVuY3Rpb24gKG1hdHJpeCkge1xuICAgIHZhciBlcHNpbG9uID0gdGhpcy5lcHNpbG9uO1xuICAgIHZhciBlbGVtZW50cyA9IG1hdHJpeC5lbGVtZW50cztcblxuICAgIHJldHVybiAnbWF0cml4M2QoJyArXG4gICAgICBlcHNpbG9uKCBlbGVtZW50c1sgMCBdICkgKyAnLCcgK1xuICAgICAgZXBzaWxvbiggZWxlbWVudHNbIDEgXSApICsgJywnICtcbiAgICAgIGVwc2lsb24oIGVsZW1lbnRzWyAyIF0gKSArICcsJyArXG4gICAgICBlcHNpbG9uKCBlbGVtZW50c1sgMyBdICkgKyAnLCcgK1xuICAgICAgZXBzaWxvbiggZWxlbWVudHNbIDQgXSApICsgJywnICtcbiAgICAgIGVwc2lsb24oIGVsZW1lbnRzWyA1IF0gKSArICcsJyArXG4gICAgICBlcHNpbG9uKCBlbGVtZW50c1sgNiBdICkgKyAnLCcgK1xuICAgICAgZXBzaWxvbiggZWxlbWVudHNbIDcgXSApICsgJywnICtcbiAgICAgIGVwc2lsb24oIGVsZW1lbnRzWyA4IF0gKSArICcsJyArXG4gICAgICBlcHNpbG9uKCBlbGVtZW50c1sgOSBdICkgKyAnLCcgK1xuICAgICAgZXBzaWxvbiggZWxlbWVudHNbIDEwIF0gKSArICcsJyArXG4gICAgICBlcHNpbG9uKCBlbGVtZW50c1sgMTEgXSApICsgJywnICtcbiAgICAgIGVwc2lsb24oIGVsZW1lbnRzWyAxMiBdICkgKyAnLCcgK1xuICAgICAgZXBzaWxvbiggZWxlbWVudHNbIDEzIF0gKSArICcsJyArXG4gICAgICBlcHNpbG9uKCBlbGVtZW50c1sgMTQgXSApICsgJywnICtcbiAgICAgIGVwc2lsb24oIGVsZW1lbnRzWyAxNSBdICkgK1xuICAgICcpJztcbiAgfSxcblxuICB1cGRhdGVUcmFuc2Zvcm06IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcmV2aW91c1Bvc2l0aW9uID0gdGhpcy5wcmV2aW91c1Bvc2l0aW9uID0gdGhpcy5wcmV2aW91c1Bvc2l0aW9uIHx8IHt9O1xuICAgIC8vIFBvc2l0aW9uXG4gICAgdmFyIHggPSB0aGlzLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0teCcpIHx8IDA7XG4gICAgdmFyIHkgPSB0aGlzLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0teScpIHx8IDA7XG4gICAgdmFyIHogPSB0aGlzLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0teicpIHx8IDA7XG4gICAgdmFyIHRyYW5zbGF0aW9uID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oeCwgeSwgLXopO1xuXG4gICAgLy8gT3JpZW50YXRpb25cbiAgICB2YXIgb3JpZW50YXRpb25YID0gdGhpcy5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXJvdFgnKSB8fCAwO1xuICAgIHZhciBvcmllbnRhdGlvblkgPSB0aGlzLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0tcm90WScpIHx8IDA7XG4gICAgdmFyIG9yaWVudGF0aW9uWiA9IHRoaXMuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS1yb3RaJykgfHwgMDtcblxuICAgIHZhciByb3RYID0gVEhSRUUuTWF0aC5kZWdUb1JhZChvcmllbnRhdGlvblgpO1xuICAgIHZhciByb3RZID0gVEhSRUUuTWF0aC5kZWdUb1JhZChvcmllbnRhdGlvblkpO1xuICAgIHZhciByb3RaID0gVEhSRUUuTWF0aC5kZWdUb1JhZChvcmllbnRhdGlvblopO1xuICAgIHZhciByb3RhdGlvblggPSBuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblgocm90WCk7XG4gICAgdmFyIHJvdGF0aW9uWSA9IG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWShyb3RZKTtcbiAgICB2YXIgcm90YXRpb25aID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKHJvdFopO1xuICAgIHRoaXMuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZCgtNTAlLCAtNTAlLCAwKSBcIiArIHRoaXMuZ2V0Q1NTTWF0cml4KHRyYW5zbGF0aW9uLm11bHRpcGx5KHJvdGF0aW9uWi5tdWx0aXBseShyb3RhdGlvblkubXVsdGlwbHkocm90YXRpb25YKSkpKTtcbiAgICB0aGlzLm9iamVjdDNELnBvc2l0aW9uLnNldCh4LCAteSwgLXopO1xuICAgIHRoaXMub2JqZWN0M0Qucm90YXRpb24ub3JkZXIgPSAnWVhaJztcbiAgICB0aGlzLm9iamVjdDNELnJvdGF0aW9uLnNldCgtcm90WCwgcm90WSwgcm90Wik7XG5cbiAgICAvLyBSZXBvcnQgcG9zaXRpb24/IE9ubHkgaWYgY2hhbmdlZFxuICAgIC8vIGlmICh4ICE9PSBwcmV2aW91c1Bvc2l0aW9uLnggfHxcbiAgICAvLyAgICAgeSAhPT0gcHJldmlvdXNQb3NpdGlvbi55IHx8XG4gICAgLy8gICAgIHogIT09IHByZXZpb3VzUG9zaXRpb24ueiApIHtcbiAgICAvLyAgIGRlYnVnZ2VyO1xuICAgIC8vICAgdGhpcy5yZXBvcnRTaXplKCk7XG4gICAgLy8gICB0aGlzLnByZXZpb3VzUG9zaXRpb24gPSB7XG4gICAgLy8gICAgIHg6IHgsXG4gICAgLy8gICAgIHk6IHksXG4gICAgLy8gICAgIHo6IHpcbiAgICAvLyAgIH07XG4gICAgLy8gfVxuICB9LFxuXG4gIGZpbmRTY2VuZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjZW5lcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3ZyLXNjZW5lJyk7XG4gICAgdmFyIHBlcnNwZWN0aXZlO1xuICAgIGZvciAodmFyIGk9MDsgaSA8IHNjZW5lcy5sZW5ndGg7ICsraSkge1xuICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lc1tpXTtcbiAgICB9XG4gIH0sXG5cbiAgdGVtcGxhdGU6IGBcbiAgICA8Y29udGVudD48L2NvbnRlbnQ+XG4gICAgPHN0eWxlPlxuICAgICAgOmhvc3Qge1xuICAgICAgICBsZWZ0OiA1MCU7XG4gICAgICAgIHRvcDogNTAlO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XG4gICAgICB9XG5cbiAgICAgIC5kdW1teSB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIH1cbiAgICA8L3N0eWxlPlxuICBgXG59KTtcblxufSk7fSkodHlwZW9mIGRlZmluZT09J2Z1bmN0aW9uJyYmZGVmaW5lLmFtZD9kZWZpbmVcbjooZnVuY3Rpb24obix3KXsndXNlIHN0cmljdCc7cmV0dXJuIHR5cGVvZiBtb2R1bGU9PSdvYmplY3QnP2Z1bmN0aW9uKGMpe1xuYyhyZXF1aXJlLGV4cG9ydHMsbW9kdWxlKTt9OmZ1bmN0aW9uKGMpe3ZhciBtPXtleHBvcnRzOnt9fTtjKGZ1bmN0aW9uKG4pe1xucmV0dXJuIHdbbl07fSxtLmV4cG9ydHMsbSk7d1tuXT1tLmV4cG9ydHM7fTt9KSgnVlJPYmplY3QnLHRoaXMpKTtcbiIsIi8qIGdsb2JhbHMgZGVmaW5lICovXG4oZnVuY3Rpb24oZGVmaW5lKXsndXNlIHN0cmljdCc7ZGVmaW5lKGZ1bmN0aW9uKHJlcXVpcmUsZXhwb3J0cyxtb2R1bGUpe1xuXG4vKipcbiAqIERlcGVuZGVuY2llc1xuICovXG5cbnZhciBjb21wb25lbnQgPSByZXF1aXJlKCdnYWlhLWNvbXBvbmVudCcpO1xuXG4vKipcbiAqIFNpbXBsZSBsb2dnZXJcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqL1xudmFyIGRlYnVnID0gMCA/IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSkgOiBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIEV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBvbmVudC5yZWdpc3RlcigndnItY2FtZXJhJywge1xuICBleHRlbmRzOiBWUk9iamVjdC5wcm90b3R5cGUsXG5cbiAgdXBkYXRlVHJhbnNmb3JtOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWxTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKTtcbiAgICAvLyBQb3NpdGlvblxuICAgIHZhciB4ID0gZWxTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnLS14JykgfHwgMDtcbiAgICB2YXIgeSA9IGVsU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJy0teScpIHx8IDA7XG4gICAgdmFyIHogPSBlbFN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCctLXonKSB8fCAwO1xuICAgIHZhciB0cmFuc2xhdGlvbiA9IG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKHgsIHksIC16KTtcblxuICAgIC8vIE9yaWVudGF0aW9uXG4gICAgdmFyIG9yaWVudGF0aW9uWCA9IGVsU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJy0tcm90WCcpIHx8IDA7XG4gICAgdmFyIG9yaWVudGF0aW9uWSA9IGVsU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJy0tcm90WScpIHx8IDA7XG4gICAgdmFyIG9yaWVudGF0aW9uWiA9IGVsU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJy0tcm90WicpIHx8IDA7XG4gICAgdmFyIHJvdFggPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKG9yaWVudGF0aW9uWCk7XG4gICAgdmFyIHJvdFkgPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKG9yaWVudGF0aW9uWSk7XG4gICAgdmFyIHJvdFogPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKG9yaWVudGF0aW9uWik7XG4gICAgdmFyIHJvdGF0aW9uWCA9IG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWChyb3RYKTtcbiAgICB2YXIgcm90YXRpb25ZID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25ZKHJvdFkpO1xuICAgIHZhciByb3RhdGlvblogPSBuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblgocm90Wik7XG4gICAgdmFyIG1hdHJpeENTUyA9IHJvdGF0aW9uWi5tdWx0aXBseShyb3RhdGlvblkubXVsdGlwbHkocm90YXRpb25YLm11bHRpcGx5KHRyYW5zbGF0aW9uKSkpO1xuXG4gICAgdGhpcy5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoLTUwJSwgLTUwJSwgMCkgJyArIHRoaXMuZ2V0Q1NTTWF0cml4KG1hdHJpeENTUyk7XG5cbiAgICAvLyBNYXRyaXggdGhyZWVqc1xuICAgIHJvdGF0aW9uWCA9IG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWCgtcm90WCk7XG4gICAgcm90YXRpb25ZID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25ZKHJvdFkpO1xuICAgIHJvdGF0aW9uWiA9IG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWChyb3RaKTtcbiAgICB0cmFuc2xhdGlvbiA9IG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKHgsIC15LCAteik7XG4gICAgdmFyIG1hdHJpeCA9IHJvdGF0aW9uWi5tdWx0aXBseShyb3RhdGlvblkubXVsdGlwbHkocm90YXRpb25YLm11bHRpcGx5KHRyYW5zbGF0aW9uKSkpO1xuXG4gICAgdmFyIG9iamVjdDNEID0gdGhpcy5vYmplY3QzRDtcbiAgICBvYmplY3QzRC5tYXRyaXggPSBtYXRyaXg7XG4gICAgb2JqZWN0M0QubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuICAgIG9iamVjdDNELm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuICB9XG5cbn0pO1xuXG59KTt9KSh0eXBlb2YgZGVmaW5lPT0nZnVuY3Rpb24nJiZkZWZpbmUuYW1kP2RlZmluZVxuOihmdW5jdGlvbihuLHcpeyd1c2Ugc3RyaWN0JztyZXR1cm4gdHlwZW9mIG1vZHVsZT09J29iamVjdCc/ZnVuY3Rpb24oYyl7XG5jKHJlcXVpcmUsZXhwb3J0cyxtb2R1bGUpO306ZnVuY3Rpb24oYyl7dmFyIG09e2V4cG9ydHM6e319O2MoZnVuY3Rpb24obil7XG5yZXR1cm4gd1tuXTt9LG0uZXhwb3J0cyxtKTt3W25dPW0uZXhwb3J0czt9O30pKCdWUkNhbWVyYScsdGhpcykpO1xuIiwiLyogZ2xvYmFscyBkZWZpbmUgKi9cbihmdW5jdGlvbihkZWZpbmUpeyd1c2Ugc3RyaWN0JztkZWZpbmUoZnVuY3Rpb24ocmVxdWlyZSxleHBvcnRzLG1vZHVsZSl7XG5cbi8qKlxuICogRGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIGNvbXBvbmVudCA9IHJlcXVpcmUoJ2dhaWEtY29tcG9uZW50Jyk7XG5cbi8qKlxuICogU2ltcGxlIGxvZ2dlclxuICogQHR5cGUge0Z1bmN0aW9ufVxuICovXG52YXIgZGVidWcgPSAwID8gY29uc29sZS5sb2cuYmluZChjb25zb2xlKSA6IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogRXhwb3J0c1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gY29tcG9uZW50LnJlZ2lzdGVyKCd2ci1tb2RlbCcsIHtcbiAgZXh0ZW5kczogVlJPYmplY3QucHJvdG90eXBlLFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0dXBTY2VuZSgpO1xuICAgIFZST2JqZWN0LnByb3RvdHlwZS5jcmVhdGVkLmNhbGwodGhpcyk7XG4gIH0sXG5cbiAgc2V0dXBTY2VuZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogJ21hZ2VudGEnIH0pO1xuICAgIHZhciBtb2RlbCA9IHRoaXMubW9kZWwgPSBuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuQm94R2VvbWV0cnkoMjUwLCAyNTAsIDI1MCksIG1hdGVyaWFsKTtcbiAgICB2YXIgeCA9IHRoaXMuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS14JykgfHwgMDtcbiAgICB2YXIgeSA9IHRoaXMuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS15JykgfHwgMDtcbiAgICB2YXIgeiA9IHRoaXMuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS16Jyk7XG4gICAgdGhpcy5yYXljYXN0ZXIgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKCk7XG4gICAgbW9kZWwub3ZlcmRyYXcgPSB0cnVlO1xuICAgIG1vZGVsLnBvc2l0aW9uLnNldCh4LCB5LCAteik7XG4gICAgdGhpcy5vYmplY3QzRCA9IG1vZGVsO1xuICAgIHRoaXMuYXR0YWNoQ2xpY2tIYW5kbGVyKCk7XG4gICAgLy90aGlzLmFuaW1hdGUoKTtcbiAgfSxcblxuICBhdHRhY2hDbGlja0hhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLm1vdXNlUG9zID0gbmV3IFRIUkVFLlZlY3RvcjIoMCwgMCk7XG4gICAgLy90aGlzLnNjZW5lLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlZCwgZmFsc2UpO1xuICAgIC8vZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlZG93bicsIG9uRG9jdW1lbnRNb3VzZURvd24sIGZhbHNlICk7XG5cbiAgICBmdW5jdGlvbiBvbk1vdXNlTW92ZWQgKCBlICkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc2VsZi5tb3VzZVBvcy54ID0gKCBlLmNsaWVudFggLyB3aW5kb3cuaW5uZXJXaWR0aCApICogMiAtIDE7XG4gICAgICBzZWxmLm1vdXNlUG9zLnkgPSAtICggZS5jbGllbnRZIC8gd2luZG93LmlubmVySGVpZ2h0ICkgKiAyICsgMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkRvY3VtZW50TW91c2VEb3duKCBlICkge1xuICAgICAgaWYgKHNlbGYuaW50ZXJzZWN0ZWQpIHtcbiAgICAgICAgc2VsZi5leHBsb2RlKCk7XG4gICAgICB9XG4gICAgICAvLyBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyB2YXIgbW91c2VWZWN0b3IgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgICAgLy8gbW91c2VWZWN0b3IueCA9IDIgKiAoZS5jbGllbnRYIC8gU0NSRUVOX1dJRFRIKSAtIDE7XG4gICAgICAvLyBtb3VzZVZlY3Rvci55ID0gMSAtIDIgKiAoIGUuY2xpZW50WSAvIFNDUkVFTl9IRUlHSFQgKTtcbiAgICAgIC8vIHZhciByYXljYXN0ZXIgPSBwcm9qZWN0b3IucGlja2luZ1JheSggbW91c2VWZWN0b3IuY2xvbmUoKSwgY2FtZXJhICk7XG4gICAgICAvLyB2YXIgaW50ZXJzZWN0cyA9IHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3QoIFRBUkdFVCApO1xuICAgICAgLy8gZm9yKCB2YXIgaSA9IDA7IGkgPCBpbnRlcnNlY3RzLmxlbmd0aDsgaSsrICkge1xuICAgICAgLy8gICB2YXIgaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0c1sgaSBdLFxuICAgICAgLy8gICBvYmogPSBpbnRlcnNlY3Rpb24ub2JqZWN0O1xuICAgICAgLy8gICBjb25zIG9sZS5sb2coXCJJbnRlcnNlY3RlZCBvYmplY3RcIiwgb2JqKTtcbiAgICAgIC8vIH1cbiAgICB9XG4gIH0sXG5cbiAgZXhwbG9kZTogZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgYm94ID0gdGhpcy5vYmplY3QzRDtcbiAgICB2YXIgc2NlbmUgPSB0aGlzLnNjZW5lO1xuICAgIHZhciBkdXJhdGlvbiA9IDgwMDA7XG4gICAgdGhpcy5leHBsb2RpbmcgPSB0cnVlO1xuXG4gICAgLy8gZXhwbG9kZSBnZW9tZXRyeSBpbnRvIG9iamVjdHNcbiAgICB2YXIgcGllY2VzID0gZXhwbG9kZSggYm94Lmdlb21ldHJ5LCBib3gubWF0ZXJpYWwgKTtcblxuICAgIGJveC5tYXRlcmlhbC52aXNpYmxlID0gZmFsc2U7XG5cbiAgICAvLyBhbmltYXRlIG9iamVjdHNcbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBwaWVjZXMuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG4gICAgICB2YXIgb2JqZWN0ID0gcGllY2VzLmNoaWxkcmVuWyBpIF07XG5cbiAgICAgIG9iamVjdC5nZW9tZXRyeS5jb21wdXRlRmFjZU5vcm1hbHMoKTtcbiAgICAgIHZhciBub3JtYWwgPSBvYmplY3QuZ2VvbWV0cnkuZmFjZXNbMF0ubm9ybWFsLmNsb25lKCk7XG4gICAgICB2YXIgdGFyZ2V0UG9zaXRpb24gPSBvYmplY3QucG9zaXRpb24uY2xvbmUoKS5hZGQoIG5vcm1hbC5tdWx0aXBseVNjYWxhciggMzAwMCApICk7XG4gICAgICAvL3JlbW92ZUJveEZyb21MaXN0KCBib3ggKTtcbiAgICAgIG5ldyBUV0VFTi5Ud2Vlbiggb2JqZWN0LnBvc2l0aW9uIClcbiAgICAgICAgLnRvKCB0YXJnZXRQb3NpdGlvbiwgZHVyYXRpb24gKVxuICAgICAgICAub25Db21wbGV0ZSggZGVsZXRlQm94IClcbiAgICAgICAgLnN0YXJ0KCk7XG5cbiAgICAgIG9iamVjdC5tYXRlcmlhbC5vcGFjaXR5ID0gMDtcbiAgICAgIG5ldyBUV0VFTi5Ud2Vlbiggb2JqZWN0Lm1hdGVyaWFsIClcbiAgICAgICAgLnRvKCB7IG9wYWNpdHk6IDEgfSwgZHVyYXRpb24gKVxuICAgICAgICAuc3RhcnQoKTtcblxuICAgICAgdmFyIHJvdGF0aW9uID0gMiAqIE1hdGguUEk7XG4gICAgICB2YXIgdGFyZ2V0Um90YXRpb24gPSB7IHg6IHJvdGF0aW9uLCB5OiByb3RhdGlvbiwgejpyb3RhdGlvbiB9O1xuICAgICAgbmV3IFRXRUVOLlR3ZWVuKCBvYmplY3Qucm90YXRpb24gKVxuICAgICAgICAudG8oIHRhcmdldFJvdGF0aW9uLCBkdXJhdGlvbiApXG4gICAgICAgIC5zdGFydCgpO1xuXG4gICAgfVxuXG4gICAgYm94LmFkZCggcGllY2VzICk7XG5cbiAgICBmdW5jdGlvbiByZW1vdmVCb3hGcm9tTGlzdCggYm94ICkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChvYmplY3RzW2ldID09PSBib3gpIHtcbiAgICAgICAgICBvYmplY3RzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxldGVCb3goKSB7XG4gICAgICBib3gucmVtb3ZlKCBwaWVjZXMgKVxuICAgICAgLy9zY2VuZS5yZW1vdmUoIGJveCApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGxvZGUoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuICAgICAgdmFyIHBpZWNlcyA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICAgICAgdmFyIG1hdGVyaWFsID0gbWF0ZXJpYWwuY2xvbmUoKTtcbiAgICAgIG1hdGVyaWFsLnNpZGUgPSBUSFJFRS5Eb3VibGVTaWRlO1xuXG4gICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBnZW9tZXRyeS5mYWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cbiAgICAgICAgdmFyIGZhY2UgPSBnZW9tZXRyeS5mYWNlc1sgaSBdO1xuXG4gICAgICAgIHZhciB2ZXJ0ZXhBID0gZ2VvbWV0cnkudmVydGljZXNbIGZhY2UuYSBdLmNsb25lKCk7XG4gICAgICAgIHZhciB2ZXJ0ZXhCID0gZ2VvbWV0cnkudmVydGljZXNbIGZhY2UuYiBdLmNsb25lKCk7XG4gICAgICAgIHZhciB2ZXJ0ZXhDID0gZ2VvbWV0cnkudmVydGljZXNbIGZhY2UuYyBdLmNsb25lKCk7XG5cbiAgICAgICAgdmFyIGdlb21ldHJ5MiA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xuICAgICAgICBnZW9tZXRyeTIudmVydGljZXMucHVzaCggdmVydGV4QSwgdmVydGV4QiwgdmVydGV4QyApO1xuICAgICAgICBnZW9tZXRyeTIuZmFjZXMucHVzaCggbmV3IFRIUkVFLkZhY2UzKCAwLCAxLCAyICkgKTtcblxuICAgICAgICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeTIsIG1hdGVyaWFsICk7XG4gICAgICAgIG1lc2gucG9zaXRpb24uc3ViKCBnZW9tZXRyeTIuY2VudGVyKCkgKTtcbiAgICAgICAgcGllY2VzLmFkZCggbWVzaCApO1xuXG4gICAgICB9XG5cbiAgICAgIC8vc29ydCB0aGUgcGllY2VzXG4gICAgICBwaWVjZXMuY2hpbGRyZW4uc29ydCggZnVuY3Rpb24gKCBhLCBiICkge1xuXG4gICAgICAgIHJldHVybiBhLnBvc2l0aW9uLnogLSBiLnBvc2l0aW9uLno7XG4gICAgICAgIC8vcmV0dXJuIGEucG9zaXRpb24ueCAtIGIucG9zaXRpb24ueDsgICAgIC8vIHNvcnQgeFxuICAgICAgICAvL3JldHVybiBiLnBvc2l0aW9uLnkgLSBhLnBvc2l0aW9uLnk7ICAgLy8gc29ydCB5XG5cbiAgICAgIH0gKTtcblxuICAgICAgcGllY2VzLnJvdGF0aW9uLnNldCggMCwgMCwgMCApXG5cbiAgICAgIHJldHVybiBwaWVjZXM7XG5cbiAgICB9XG5cbiAgfSxcblxuICBhbmltYXRlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGxhc3RUaW1lID0gc2VsZi5sYXN0VGltZSB8fCAwO1xuICAgIHZhciBhbmd1bGFyU3BlZWQgPSBzZWxmLmFuZ3VsYXJTcGVlZCB8fCAwLjI7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5hbmltYXRlKCk7XG4gICAgICBUV0VFTi51cGRhdGUoKTtcbiAgICB9KTtcblxuICAgIGlmICghdGhpcy5leHBsb2RpbmcpIHtcbiAgICAgIHZhciB0aW1lID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgIHZhciB0aW1lRGlmZiA9IHRpbWUgLSBsYXN0VGltZTtcbiAgICAgIHZhciBhbmdsZUNoYW5nZSA9IGFuZ3VsYXJTcGVlZCAqIHRpbWVEaWZmICogMiAqIE1hdGguUEkgLyAxMDAwO1xuICAgICAgc2VsZi5tb2RlbC5yb3RhdGlvbi55ICs9IGFuZ2xlQ2hhbmdlO1xuICAgICAgc2VsZi5sYXN0VGltZSA9IHRpbWU7XG4gICAgICAvL3RoaXMuaW50ZXJzZWN0TW91c2UoKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gZmluZCBpbnRlcnNlY3Rpb25zXG4gIGludGVyc2VjdE1vdXNlOiBmdW5jdGlvbiBpbnRlcnNlY3QoKSB7XG4gICAgdmFyIHJheWNhc3RlciA9IHRoaXMucmF5Y2FzdGVyO1xuICAgIHZhciBvYmplY3RzID0gW3RoaXMub2JqZWN0M0RdO1xuICAgIHJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKCB0aGlzLm1vdXNlUG9zLCB0aGlzLnNjZW5lLmNhbWVyYSApO1xuICAgIHZhciBpbnRlcnNlY3RzID0gcmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHMoIG9iamVjdHMgKTtcblxuICAgIGlmICggaW50ZXJzZWN0cy5sZW5ndGggPiAwICkge1xuXG4gICAgICBpZiAoIHRoaXMub2JqZWN0M0QgPT0gaW50ZXJzZWN0c1sgMCBdLm9iamVjdCAmJiAhdGhpcy5pbnRlcnNlY3RlZCkge1xuXG4gICAgICAgIHRoaXMuaW50ZXJzZWN0ZWQgPSB0aGlzLm9iamVjdDNELm1hdGVyaWFsLmVtaXNzaXZlLmdldEhleCgpO1xuICAgICAgICB0aGlzLm9iamVjdDNELm1hdGVyaWFsLmVtaXNzaXZlLnNldEhleCggMHhmZmZmMDAgKTtcblxuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcblxuICAgICAgaWYgKCB0aGlzLmludGVyc2VjdGVkICkgdGhpcy5vYmplY3QzRC5tYXRlcmlhbC5lbWlzc2l2ZS5zZXQoICdibGFjaycgKTtcbiAgICAgIHRoaXMuaW50ZXJzZWN0ZWQgPSBudWxsO1xuXG4gICAgfVxuICB9XG5cbn0pO1xuXG59KTt9KSh0eXBlb2YgZGVmaW5lPT0nZnVuY3Rpb24nJiZkZWZpbmUuYW1kP2RlZmluZVxuOihmdW5jdGlvbihuLHcpeyd1c2Ugc3RyaWN0JztyZXR1cm4gdHlwZW9mIG1vZHVsZT09J29iamVjdCc/ZnVuY3Rpb24oYyl7XG5jKHJlcXVpcmUsZXhwb3J0cyxtb2R1bGUpO306ZnVuY3Rpb24oYyl7dmFyIG09e2V4cG9ydHM6e319O2MoZnVuY3Rpb24obil7XG5yZXR1cm4gd1tuXTt9LG0uZXhwb3J0cyxtKTt3W25dPW0uZXhwb3J0czt9O30pKCdWUk1vZGVsJyx0aGlzKSk7XG4iLCIvKiBnbG9iYWxzIGRlZmluZSAqL1xuKGZ1bmN0aW9uKGRlZmluZSl7J3VzZSBzdHJpY3QnO2RlZmluZShmdW5jdGlvbihyZXF1aXJlLGV4cG9ydHMsbW9kdWxlKXtcblxuLyoqXG4gKiBEZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgY29tcG9uZW50ID0gcmVxdWlyZSgnZ2FpYS1jb21wb25lbnQnKTtcblxuLyoqXG4gKiBTaW1wbGUgbG9nZ2VyXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cbnZhciBkZWJ1ZyA9IDAgPyBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpIDogZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBFeHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnQucmVnaXN0ZXIoJ3ZyLWJpbGxib2FyZCcsIHtcbiAgZXh0ZW5kczogVlJPYmplY3QucHJvdG90eXBlLFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgIFZST2JqZWN0LnByb3RvdHlwZS5jcmVhdGVkLmNhbGwodGhpcyk7XG4gICAgdGhpcy51cGRhdGVUcmFuc2Zvcm0oKTtcbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudXBkYXRlVHJhbnNmb3JtKCk7XG4gIH0sXG5cbiAgdXBkYXRlVHJhbnNmb3JtOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2FtZXJhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndnItY2FtZXJhJyk7XG4gICAgdmFyIG1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG4gICAgbWF0cml4LmNvcHkoIG1hdHJpeC5nZXRJbnZlcnNlKGNhbWVyYS5vYmplY3QzRC5tYXRyaXhXb3JsZCkgKTtcbiAgICBtYXRyaXguY29weSggY2FtZXJhLm9iamVjdDNELm1hdHJpeFdvcmxkICk7XG5cbiAgICBtYXRyaXgudHJhbnNwb3NlKCk7XG5cbiAgICBtYXRyaXguZWxlbWVudHNbIDMgXSA9IDA7XG4gICAgbWF0cml4LmVsZW1lbnRzWyA3IF0gPSAwO1xuICAgIG1hdHJpeC5lbGVtZW50c1sgMTEgXSA9IDA7XG4gICAgbWF0cml4LmVsZW1lbnRzWyAxNSBdID0gMTtcblxuICAgIC8vIFBvc2l0aW9uXG4gICAgdmFyIHggPSB0aGlzLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0teCcpIHx8IDA7XG4gICAgdmFyIHkgPSB0aGlzLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0teScpIHx8IDA7XG4gICAgdmFyIHogPSB0aGlzLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0teicpIHx8IDA7XG4gICAgdmFyIHRyYW5zbGF0aW9uID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oeCwgeSwgLXopO1xuXG4gICAgLy8gT3JpZW50YXRpb25cbiAgICB2YXIgb3JpZW50YXRpb25YID0gdGhpcy5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXJvdFgnKSB8fCAwO1xuICAgIHZhciBvcmllbnRhdGlvblkgPSB0aGlzLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0tcm90WScpIHx8IDA7XG4gICAgdmFyIG9yaWVudGF0aW9uWiA9IHRoaXMuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS1yb3RaJykgfHwgMDtcblxuICAgIHZhciByb3RYID0gVEhSRUUuTWF0aC5kZWdUb1JhZChvcmllbnRhdGlvblgpO1xuICAgIHZhciByb3RZID0gVEhSRUUuTWF0aC5kZWdUb1JhZChvcmllbnRhdGlvblkpO1xuICAgIHZhciByb3RaID0gVEhSRUUuTWF0aC5kZWdUb1JhZChvcmllbnRhdGlvblopO1xuICAgIHZhciByb3RhdGlvblggPSBuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblgocm90WCk7XG4gICAgdmFyIHJvdGF0aW9uWSA9IG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWShyb3RZKTtcbiAgICB2YXIgcm90YXRpb25aID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25YKHJvdFopO1xuXG4gICAgdGhpcy5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoLTUwJSwgLTUwJSwgMCkgJyArIHRoaXMuZ2V0Q1NTTWF0cml4KHRyYW5zbGF0aW9uLm11bHRpcGx5KHJvdGF0aW9uWi5tdWx0aXBseShyb3RhdGlvblkubXVsdGlwbHkocm90YXRpb25YLm11bHRpcGx5KG1hdHJpeCkpKSkpO1xuICAgIHRoaXMub2JqZWN0M0QucG9zaXRpb24uc2V0KHgsIC15LCAteik7XG4gICAgdGhpcy5vYmplY3QzRC5yb3RhdGlvbi5vcmRlciA9ICdZWFonO1xuICAgIHRoaXMub2JqZWN0M0Qucm90YXRpb24uc2V0KC1yb3RYLCByb3RZLCByb3RaKTtcbiAgfVxuXG59KTtcblxufSk7fSkodHlwZW9mIGRlZmluZT09J2Z1bmN0aW9uJyYmZGVmaW5lLmFtZD9kZWZpbmVcbjooZnVuY3Rpb24obix3KXsndXNlIHN0cmljdCc7cmV0dXJuIHR5cGVvZiBtb2R1bGU9PSdvYmplY3QnP2Z1bmN0aW9uKGMpe1xuYyhyZXF1aXJlLGV4cG9ydHMsbW9kdWxlKTt9OmZ1bmN0aW9uKGMpe3ZhciBtPXtleHBvcnRzOnt9fTtjKGZ1bmN0aW9uKG4pe1xucmV0dXJuIHdbbl07fSxtLmV4cG9ydHMsbSk7d1tuXT1tLmV4cG9ydHM7fTt9KSgnVlJCaWxsYm9hcmQnLHRoaXMpKTtcbiIsIi8qIGdsb2JhbHMgZGVmaW5lICovXG4oZnVuY3Rpb24oZGVmaW5lKXsndXNlIHN0cmljdCc7ZGVmaW5lKGZ1bmN0aW9uKHJlcXVpcmUsZXhwb3J0cyxtb2R1bGUpe1xuXG4vKipcbiAqIERlcGVuZGVuY2llc1xuICovXG5cbnZhciBjb21wb25lbnQgPSByZXF1aXJlKCdnYWlhLWNvbXBvbmVudCcpO1xuXG4vKipcbiAqIFNpbXBsZSBsb2dnZXJcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqL1xudmFyIGRlYnVnID0gMCA/IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSkgOiBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIEV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBvbmVudC5yZWdpc3RlcigndnItdGVycmFpbicsIHtcbiAgZXh0ZW5kczogVlJPYmplY3QucHJvdG90eXBlLFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLnNldHVwU2NlbmUob25Mb2FkZWQpO1xuICAgIGZ1bmN0aW9uIG9uTG9hZGVkKCkge1xuICAgICAgVlJPYmplY3QucHJvdG90eXBlLmNyZWF0ZWQuY2FsbChzZWxmKTtcbiAgICAgIHNlbGYuZ2VuZXJhdGVMYWJlbHMobm9pc2UpO1xuICAgIH1cbiAgfSxcblxuICBzZXR1cFNjZW5lOiBmdW5jdGlvbihvbkxvYWRlZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLnRlcnJhaW5TaXplID0gMTAyNDtcbiAgICBuZXcgVGVycmFpbihub2lzZSwgdGhpcy50ZXJyYWluU2l6ZSwgMiwgNjQsIGZ1bmN0aW9uKG1vZGVsKSB7O1xuICAgICAgc2VsZi5vYmplY3QzRCA9IG1vZGVsO1xuICAgICAgb25Mb2FkZWQoKTtcbiAgICB9KTtcbiAgfSxcblxuICBnZW5lcmF0ZUxhYmVsczogZnVuY3Rpb24obm9pc2UpIHtcbiAgICB2YXIgbGFiZWw7XG4gICAgdmFyIG1heCA9IDE1O1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBub2lzZS5pbWFnZS5kYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgbm9pc2VWYWx1ZSA9IG5vaXNlLmltYWdlLmRhdGFbaV07XG4gICAgICB2YXIgc2lnbjEgPSAoTWF0aC5yYW5kb20oKSoxMCkudG9GaXhlZCgwKSAlIDIgPT09IDA/IC0xOiAxO1xuICAgICAgdmFyIHNpZ24yID0gKE1hdGgucmFuZG9tKCkqMTApLnRvRml4ZWQoMCkgJSAyID09PSAwPyAtMTogMTtcbiAgICAgIGlmIChub2lzZVZhbHVlID4gODApIHtcbiAgICAgICAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2ci1iaWxsYm9hcmQnKTtcbiAgICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgncGVhay1sYWJlbCcpO1xuICAgICAgICBsYWJlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS14JywgIHNpZ24xICogKE1hdGgucmFuZG9tKCkgKiB0aGlzLnRlcnJhaW5TaXplKSk7XG4gICAgICAgIGxhYmVsLnN0eWxlLnNldFByb3BlcnR5KCctLXknLCAgc2lnbjIgKiAoTWF0aC5yYW5kb20oKSAqIHRoaXMudGVycmFpblNpemUpKTtcbiAgICAgICAgbGFiZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0teicsICAtbm9pc2VWYWx1ZSk7XG4gICAgICAgIGxhYmVsLnN0eWxlLnNldFByb3BlcnR5KCctLXJvdFgnLCAgLTkwKTtcbiAgICAgICAgbGFiZWwuaW5uZXJIVE1MID0gXCJMYW5kbWFyayBcIiArIGk7XG4gICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgICBtYXgtPTE7XG4gICAgICAgIGlmIChtYXggPT0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG59KTtcblxufSk7fSkodHlwZW9mIGRlZmluZT09J2Z1bmN0aW9uJyYmZGVmaW5lLmFtZD9kZWZpbmVcbjooZnVuY3Rpb24obix3KXsndXNlIHN0cmljdCc7cmV0dXJuIHR5cGVvZiBtb2R1bGU9PSdvYmplY3QnP2Z1bmN0aW9uKGMpe1xuYyhyZXF1aXJlLGV4cG9ydHMsbW9kdWxlKTt9OmZ1bmN0aW9uKGMpe3ZhciBtPXtleHBvcnRzOnt9fTtjKGZ1bmN0aW9uKG4pe1xucmV0dXJuIHdbbl07fSxtLmV4cG9ydHMsbSk7d1tuXT1tLmV4cG9ydHM7fTt9KSgnVlJUZXJyYWluJyx0aGlzKSk7XG4iLCIvKiBnbG9iYWxzIGRlZmluZSAqL1xuKGZ1bmN0aW9uKGRlZmluZSl7J3VzZSBzdHJpY3QnO2RlZmluZShmdW5jdGlvbihyZXF1aXJlLGV4cG9ydHMsbW9kdWxlKXtcblxuLyoqXG4gKiBEZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgY29tcG9uZW50ID0gcmVxdWlyZSgnZ2FpYS1jb21wb25lbnQnKTtcblxuLyoqXG4gKiBTaW1wbGUgbG9nZ2VyXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cbnZhciBkZWJ1ZyA9IDAgPyBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpIDogZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBFeHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnQucmVnaXN0ZXIoJ3ZyLWF4aXMtZ2wnLCB7XG4gIGV4dGVuZHM6IFZST2JqZWN0LnByb3RvdHlwZSxcblxuICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldHVwU2NlbmUoKTtcbiAgICBWUk9iamVjdC5wcm90b3R5cGUuY3JlYXRlZC5jYWxsKHRoaXMpO1xuICB9LFxuXG4gIHNldHVwU2NlbmU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMub2JqZWN0M0QgPSBuZXcgVEhSRUUuQXhpc0hlbHBlciggNTAwICk7XG4gIH1cblxufSk7XG5cbn0pO30pKHR5cGVvZiBkZWZpbmU9PSdmdW5jdGlvbicmJmRlZmluZS5hbWQ/ZGVmaW5lXG46KGZ1bmN0aW9uKG4sdyl7J3VzZSBzdHJpY3QnO3JldHVybiB0eXBlb2YgbW9kdWxlPT0nb2JqZWN0Jz9mdW5jdGlvbihjKXtcbmMocmVxdWlyZSxleHBvcnRzLG1vZHVsZSk7fTpmdW5jdGlvbihjKXt2YXIgbT17ZXhwb3J0czp7fX07YyhmdW5jdGlvbihuKXtcbnJldHVybiB3W25dO30sbS5leHBvcnRzLG0pO3dbbl09bS5leHBvcnRzO307fSkoJ1ZSQXhpc0dMJyx0aGlzKSk7XG4iLCIvKiBnbG9iYWxzIGRlZmluZSAqL1xuKGZ1bmN0aW9uKGRlZmluZSl7J3VzZSBzdHJpY3QnO2RlZmluZShmdW5jdGlvbihyZXF1aXJlLGV4cG9ydHMsbW9kdWxlKXtcblxuLyoqXG4gKiBEZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgY29tcG9uZW50ID0gcmVxdWlyZSgnZ2FpYS1jb21wb25lbnQnKTtcblxuLyoqXG4gKiBTaW1wbGUgbG9nZ2VyXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cbnZhciBkZWJ1ZyA9IDAgPyBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpIDogZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBFeHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnQucmVnaXN0ZXIoJ3ZyLWF4aXMtZG9tJywge1xuICBleHRlbmRzOiBWUk9iamVjdC5wcm90b3R5cGUsXG5cbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiYXhpcyB4LWF4aXNcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYXhpcyB5LWF4aXNcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYXhpcyB6LWF4aXNcIj48L2Rpdj5cbiAgICA8c3R5bGU+XG4gICAgOmhvc3Qge1xuICAgICAgbGVmdDogNTAlO1xuICAgICAgdG9wOiA1MCU7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkO1xuICAgIH1cblxuICAgIC5heGlzIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG5cbiAgICAueC1heGlzIHtcbiAgICAgIGhlaWdodDogMXB4O1xuICAgICAgd2lkdGg6IDUwMHB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcGluaztcbiAgICB9XG5cbiAgICAueS1heGlzIHtcbiAgICAgIGhlaWdodDogNTAwcHg7XG4gICAgICB3aWR0aDogMXB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWFnZW50O1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtNTAwcHgsIDApO1xuICAgIH1cblxuICAgIC56LWF4aXMge1xuICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICB3aWR0aDogNTAwcHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2aW9sZXQ7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC01MCUsIDAsIDI1MHB4KSByb3RhdGVZKDkwZGVnKTtcbiAgICB9XG4gICAgPC9zdHlsZT5cbiAgYFxuXG59KTtcblxufSk7fSkodHlwZW9mIGRlZmluZT09J2Z1bmN0aW9uJyYmZGVmaW5lLmFtZD9kZWZpbmVcbjooZnVuY3Rpb24obix3KXsndXNlIHN0cmljdCc7cmV0dXJuIHR5cGVvZiBtb2R1bGU9PSdvYmplY3QnP2Z1bmN0aW9uKGMpe1xuYyhyZXF1aXJlLGV4cG9ydHMsbW9kdWxlKTt9OmZ1bmN0aW9uKGMpe3ZhciBtPXtleHBvcnRzOnt9fTtjKGZ1bmN0aW9uKG4pe1xucmV0dXJuIHdbbl07fSxtLmV4cG9ydHMsbSk7d1tuXT1tLmV4cG9ydHM7fTt9KSgnVlJBeGlzRE9NJyx0aGlzKSk7XG4iLCIvKiBnbG9iYWxzIGRlZmluZSAqL1xuKGZ1bmN0aW9uKGRlZmluZSl7J3VzZSBzdHJpY3QnO2RlZmluZShmdW5jdGlvbihyZXF1aXJlLGV4cG9ydHMsbW9kdWxlKXtcblxuLyoqXG4gKiBEZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgY29tcG9uZW50ID0gcmVxdWlyZSgnZ2FpYS1jb21wb25lbnQnKTtcblxuLyoqXG4gKiBTaW1wbGUgbG9nZ2VyXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cbnZhciBkZWJ1ZyA9IDAgPyBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpIDogZnVuY3Rpb24oKSB7fTtcblxudmFyIHIgPSBcInRleHR1cmVzL2JyaWRnZS9cIjtcbnZhciB1cmxzID0gWyByICsgXCJwb3N4LmpwZ1wiLCByICsgXCJuZWd4LmpwZ1wiLFxuICAgICAgICAgICAgIHIgKyBcInBvc3kuanBnXCIsIHIgKyBcIm5lZ3kuanBnXCIsXG4gICAgICAgICAgICAgciArIFwicG9zei5qcGdcIiwgciArIFwibmVnei5qcGdcIiBdO1xudmFyIHRleHR1cmVDdWJlID0gVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZUN1YmUoIHVybHMgKTtcbnRleHR1cmVDdWJlLmZvcm1hdCA9IFRIUkVFLlJHQkZvcm1hdDtcblxuLyoqXG4gKiBFeHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnQucmVnaXN0ZXIoJ3ZyLWxhbWJvJywge1xuICBleHRlbmRzOiBWUk9iamVjdC5wcm90b3R5cGUsXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBtb2RlbEluZm8gPSB0aGlzLm1vZGVsSW5mbztcbiAgICB2YXIgbWF0ZXJpYWxzID0gdGhpcy5tYXRlcmlhbHM7XG4gICAgbW9kZWxJbmZvLm1hdGVyaWFscyA9IHtcbiAgICAgIGJvZHk6IFtcbiAgICAgICAgWyBcIk9yYW5nZSBtZXRhbFwiLCAgbWF0ZXJpYWxzWyBcIk9yYW5nZSBtZXRhbFwiIF0gXSxcbiAgICAgICAgWyBcIkJsdWUgbWV0YWxcIiwgICBtYXRlcmlhbHNbIFwiQmx1ZSBtZXRhbFwiIF0gXSxcbiAgICAgICAgWyBcIlJlZCBtZXRhbFwiLCAgICBtYXRlcmlhbHNbIFwiUmVkIG1ldGFsXCIgXSBdLFxuICAgICAgICBbIFwiR3JlZW4gbWV0YWxcIiwgIG1hdGVyaWFsc1sgXCJHcmVlbiBtZXRhbFwiIF0gXSxcbiAgICAgICAgWyBcIkJsYWNrIG1ldGFsXCIsICBtYXRlcmlhbHNbIFwiQmxhY2sgbWV0YWxcIiBdIF0sXG4gICAgICAgIFsgXCJHb2xkXCIsICAgICBtYXRlcmlhbHNbIFwiR29sZFwiIF0gXSxcbiAgICAgICAgWyBcIkJyb256ZVwiLCAgIG1hdGVyaWFsc1sgXCJCcm9uemVcIiBdIF0sXG4gICAgICAgIFsgXCJDaHJvbWVcIiwgICBtYXRlcmlhbHNbIFwiQ2hyb21lXCIgXSBdXG4gICAgICBdLFxuICAgICAgbW1hcDoge1xuICAgICAgICAwOiBtYXRlcmlhbHNbIFwiQmxhY2sgcm91Z2hcIiBdLCAgIC8vIHRpcmVzICsgaW5zaWRlXG4gICAgICAgIDE6IG1hdGVyaWFsc1sgXCJQdXJlIGNocm9tZVwiIF0sICAgLy8gd2hlZWxzICsgZXh0cmFzIGNocm9tZVxuICAgICAgICAyOiBtYXRlcmlhbHNbIFwiQnJvbnplXCIgXSwgICAgICAgLy8gYmFjayAvIHRvcCAvIGZyb250IHRvcnNvXG4gICAgICAgIDM6IG1hdGVyaWFsc1sgXCJMaWdodCBnbGFzc1wiIF0sICAgIC8vIGdsYXNzXG4gICAgICAgIDQ6IG1hdGVyaWFsc1sgXCJQdXJlIGNocm9tZVwiIF0sICAgLy8gc2lkZXMgdG9yc29cbiAgICAgICAgNTogbWF0ZXJpYWxzWyBcIlB1cmUgY2hyb21lXCIgXSwgICAvLyBlbmdpbmVcbiAgICAgICAgNjogbWF0ZXJpYWxzWyBcIlJlZCBnbGFzcyA1MFwiIF0sICAgIC8vIGJhY2tsaWdodHNcbiAgICAgICAgNzogbWF0ZXJpYWxzWyBcIk9yYW5nZSBnbGFzcyA1MFwiIF0gIC8vIGJhY2tzaWduYWxzXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnNldHVwU2NlbmUob25Mb2FkZWQpO1xuICAgIGZ1bmN0aW9uIG9uTG9hZGVkKCkge1xuICAgICAgVlJPYmplY3QucHJvdG90eXBlLmNyZWF0ZWQuY2FsbChzZWxmKTtcbiAgICAgIHZhciBhbWJpZW50ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCggMHgwNTA1MDUgKTtcbiAgICAgIHNlbGYuc2NlbmUuc2NlbmUuYWRkKCBhbWJpZW50ICk7XG5cbiAgICAgIHZhciBkaXJlY3Rpb25hbExpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoIDB4ZmZmZmZmLCAyICk7XG4gICAgICBkaXJlY3Rpb25hbExpZ2h0LnBvc2l0aW9uLnNldCggMiwgMS4yLCAxMCApLm5vcm1hbGl6ZSgpO1xuICAgICAgc2VsZi5zY2VuZS5zY2VuZS5hZGQoIGRpcmVjdGlvbmFsTGlnaHQgKTtcblxuICAgICAgZGlyZWN0aW9uYWxMaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KCAweGZmZmZmZiwgMSApO1xuICAgICAgZGlyZWN0aW9uYWxMaWdodC5wb3NpdGlvbi5zZXQoIC0yLCAxLjIsIC0xMCApLm5vcm1hbGl6ZSgpO1xuICAgICAgc2VsZi5zY2VuZS5zY2VuZS5hZGQoIGRpcmVjdGlvbmFsTGlnaHQgKTtcblxuICAgICAgdmFyIHBvaW50TGlnaHQgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCggMHhmZmFhMDAsIDIgKTtcbiAgICAgIHBvaW50TGlnaHQucG9zaXRpb24uc2V0KCAyMDAwLCAxMjAwLCAxMDAwMCApO1xuICAgICAgc2VsZi5zY2VuZS5zY2VuZS5hZGQoIHBvaW50TGlnaHQgKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gY29tbW9uIG1hdGVyaWFsc1xuICBtYXRlcmlhbHM6IHtcbiAgICBcIk9yYW5nZVwiOiAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCB7IGNvbG9yOiAweGZmNjYwMCwgYW1iaWVudDogMHhmZjIyMDAsIGVudk1hcDogdGV4dHVyZUN1YmUsIGNvbWJpbmU6IFRIUkVFLk1peE9wZXJhdGlvbiwgcmVmbGVjdGl2aXR5OiAwLjMgfSApLFxuICAgIFwiQmx1ZVwiOiAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCB7IGNvbG9yOiAweDAwMTEzMywgYW1iaWVudDogMHgwMDExMzMsIGVudk1hcDogdGV4dHVyZUN1YmUsIGNvbWJpbmU6IFRIUkVFLk1peE9wZXJhdGlvbiwgcmVmbGVjdGl2aXR5OiAwLjMgfSApLFxuICAgIFwiUmVkXCI6ICAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCB7IGNvbG9yOiAweDY2MDAwMCwgYW1iaWVudDogMHgzMzAwMDAsIGVudk1hcDogdGV4dHVyZUN1YmUsIGNvbWJpbmU6IFRIUkVFLk1peE9wZXJhdGlvbiwgcmVmbGVjdGl2aXR5OiAwLjI1IH0gKSxcbiAgICBcIkJsYWNrXCI6ICBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCggeyBjb2xvcjogMHgwMDAwMDAsIGFtYmllbnQ6IDB4MDAwMDAwLCBlbnZNYXA6IHRleHR1cmVDdWJlLCBjb21iaW5lOiBUSFJFRS5NaXhPcGVyYXRpb24sIHJlZmxlY3Rpdml0eTogMC4xNSB9ICksXG4gICAgXCJXaGl0ZVwiOiAgbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZmZmLCBhbWJpZW50OiAweDY2NjY2NiwgZW52TWFwOiB0ZXh0dXJlQ3ViZSwgY29tYmluZTogVEhSRUUuTWl4T3BlcmF0aW9uLCByZWZsZWN0aXZpdHk6IDAuMjUgfSApLFxuXG4gICAgXCJDYXJtaW5lXCI6ICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoIHsgY29sb3I6IDB4NzcwMDAwLCBzcGVjdWxhcjoweGZmYWFhYSwgZW52TWFwOiB0ZXh0dXJlQ3ViZSwgY29tYmluZTogVEhSRUUuTXVsdGlwbHlPcGVyYXRpb24gfSApLFxuICAgIFwiR29sZFwiOiAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCggeyBjb2xvcjogMHhhYTk5NDQsIHNwZWN1bGFyOjB4YmJhYTk5LCBzaGluaW5lc3M6NTAsIGVudk1hcDogdGV4dHVyZUN1YmUsIGNvbWJpbmU6IFRIUkVFLk11bHRpcGx5T3BlcmF0aW9uIH0gKSxcbiAgICBcIkJyb256ZVwiOiBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoIHsgY29sb3I6IDB4MTUwNTA1LCBzcGVjdWxhcjoweGVlNjYwMCwgc2hpbmluZXNzOjEwLCBlbnZNYXA6IHRleHR1cmVDdWJlLCBjb21iaW5lOiBUSFJFRS5NaXhPcGVyYXRpb24sIHJlZmxlY3Rpdml0eTogMC4yNSB9ICksXG4gICAgXCJDaHJvbWVcIjogICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZmZmLCBzcGVjdWxhcjoweGZmZmZmZiwgZW52TWFwOiB0ZXh0dXJlQ3ViZSwgY29tYmluZTogVEhSRUUuTXVsdGlwbHlPcGVyYXRpb24gfSApLFxuXG4gICAgXCJPcmFuZ2UgbWV0YWxcIjogbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmY2NjAwLCBhbWJpZW50OiAweGZmMjIwMCwgZW52TWFwOiB0ZXh0dXJlQ3ViZSwgY29tYmluZTogVEhSRUUuTXVsdGlwbHlPcGVyYXRpb24gfSApLFxuICAgIFwiQmx1ZSBtZXRhbFwiOiAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCB7IGNvbG9yOiAweDAwMTEzMywgYW1iaWVudDogMHgwMDIyNjYsIGVudk1hcDogdGV4dHVyZUN1YmUsIGNvbWJpbmU6IFRIUkVFLk11bHRpcGx5T3BlcmF0aW9uIH0gKSxcbiAgICBcIlJlZCBtZXRhbFwiOiAgbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4NzcwMDAwLCBlbnZNYXA6IHRleHR1cmVDdWJlLCBjb21iaW5lOiBUSFJFRS5NdWx0aXBseU9wZXJhdGlvbiB9ICksXG4gICAgXCJHcmVlbiBtZXRhbFwiOiAgbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4MDA3NzExLCBlbnZNYXA6IHRleHR1cmVDdWJlLCBjb21iaW5lOiBUSFJFRS5NdWx0aXBseU9wZXJhdGlvbiB9ICksXG4gICAgXCJCbGFjayBtZXRhbFwiOiAgbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4MjIyMjIyLCBlbnZNYXA6IHRleHR1cmVDdWJlLCBjb21iaW5lOiBUSFJFRS5NdWx0aXBseU9wZXJhdGlvbiB9ICksXG5cbiAgICBcIlB1cmUgY2hyb21lXCI6ICBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmZmYsIGVudk1hcDogdGV4dHVyZUN1YmUgfSApLFxuICAgIFwiRGFyayBjaHJvbWVcIjogIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCB7IGNvbG9yOiAweDQ0NDQ0NCwgZW52TWFwOiB0ZXh0dXJlQ3ViZSB9ICksXG4gICAgXCJEYXJrZXIgY2hyb21lXCI6bmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4MjIyMjIyLCBlbnZNYXA6IHRleHR1cmVDdWJlIH0gKSxcblxuICAgIFwiQmxhY2sgZ2xhc3NcIjogIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCB7IGNvbG9yOiAweDEwMTAxNiwgZW52TWFwOiB0ZXh0dXJlQ3ViZSwgb3BhY2l0eTogMC45NzUsIHRyYW5zcGFyZW50OiB0cnVlIH0gKSxcbiAgICBcIkRhcmsgZ2xhc3NcIjogbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4MTAxMDQ2LCBlbnZNYXA6IHRleHR1cmVDdWJlLCBvcGFjaXR5OiAwLjI1LCB0cmFuc3BhcmVudDogdHJ1ZSB9ICksXG4gICAgXCJCbHVlIGdsYXNzXCI6IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCB7IGNvbG9yOiAweDY2ODg5OSwgZW52TWFwOiB0ZXh0dXJlQ3ViZSwgb3BhY2l0eTogMC43NSwgdHJhbnNwYXJlbnQ6IHRydWUgfSApLFxuICAgIFwiTGlnaHQgZ2xhc3NcIjogIG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHgyMjMzNDQsIGVudk1hcDogdGV4dHVyZUN1YmUsIG9wYWNpdHk6IDAuMjUsIHRyYW5zcGFyZW50OiB0cnVlLCBjb21iaW5lOiBUSFJFRS5NaXhPcGVyYXRpb24sIHJlZmxlY3Rpdml0eTogMC4yNSB9ICksXG5cbiAgICBcIlJlZCBnbGFzc1wiOiAgbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmYwMDAwLCBvcGFjaXR5OiAwLjc1LCB0cmFuc3BhcmVudDogdHJ1ZSB9ICksXG4gICAgXCJZZWxsb3cgZ2xhc3NcIjogbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZmFhLCBvcGFjaXR5OiAwLjc1LCB0cmFuc3BhcmVudDogdHJ1ZSB9ICksXG4gICAgXCJPcmFuZ2UgZ2xhc3NcIjogbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4OTk1NTAwLCBvcGFjaXR5OiAwLjc1LCB0cmFuc3BhcmVudDogdHJ1ZSB9ICksXG5cbiAgICBcIk9yYW5nZSBnbGFzcyA1MFwiOiAgbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZiYjAwLCBvcGFjaXR5OiAwLjUsIHRyYW5zcGFyZW50OiB0cnVlIH0gKSxcbiAgICBcIlJlZCBnbGFzcyA1MFwiOiAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCB7IGNvbG9yOiAweGZmMDAwMCwgb3BhY2l0eTogMC41LCB0cmFuc3BhcmVudDogdHJ1ZSB9ICksXG5cbiAgICBcIkZ1bGxibGFjayByb3VnaFwiOiAgbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4MDAwMDAwIH0gKSxcbiAgICBcIkJsYWNrIHJvdWdoXCI6ICAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCB7IGNvbG9yOiAweDA1MDUwNSB9ICksXG4gICAgXCJEYXJrZ3JheSByb3VnaFwiOiBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCggeyBjb2xvcjogMHgwOTA5MDkgfSApLFxuICAgIFwiUmVkIHJvdWdoXCI6ICAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCB7IGNvbG9yOiAweDMzMDUwMCB9ICksXG5cbiAgICBcIkRhcmtncmF5IHNoaW55XCI6IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCggeyBjb2xvcjogMHgwMDAwMDAsIHNwZWN1bGFyOiAweDA1MDUwNSB9ICksXG4gICAgXCJHcmF5IHNoaW55XCI6ICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKCB7IGNvbG9yOiAweDA1MDUwNSwgc2hpbmluZXNzOiAyMCB9IClcbiAgfSxcblxuICBtb2RlbEluZm86IHtcbiAgICBuYW1lOiBcIkJ1Z2F0dGkgVmV5cm9uXCIsXG4gICAgdXJsOiAgXCJvYmovdmV5cm9uL1ZleXJvbk5vVXZfYmluLmpzXCIsXG4gICAgYXV0aG9yOiAnPGEgaHJlZj1cImh0dHA6Ly9hcnRpc3QtM2QuY29tL2ZyZWVfM2RfbW9kZWxzL2RubS9tb2RlbF9kaXNwLnBocD91aWQ9MTEyOVwiIHRhcmdldD1cIl9ibGFua1wiPlRyb3lhbm88L2E+JyxcbiAgICBpbml0X3JvdGF0aW9uOiBbIDAsIDAsIDAgXSxcbiAgICBzY2FsZTogNS41LFxuICAgIGluaXRfbWF0ZXJpYWw6IDQsXG4gICAgYm9keV9tYXRlcmlhbHM6IFsgMiBdLFxuICAgIG9iamVjdDogbnVsbCxcbiAgICBidXR0b25zOiBudWxsLFxuICAgIG1hdGVyaWFsczogbnVsbFxuICB9LFxuXG4gIHNldHVwU2NlbmU6IGZ1bmN0aW9uKG9uTG9hZGVkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBsb2FkZXIgPSBuZXcgVEhSRUUuQmluYXJ5TG9hZGVyKHRydWUpO1xuICAgIGxvYWRlci5sb2FkKHRoaXMubW9kZWxJbmZvLnVybCwgZnVuY3Rpb24oZ2VvbWV0cnkpIHtcbiAgICAgIHZhciBtb2RlbEluZm8gPSBzZWxmLm1vZGVsSW5mbztcbiAgICAgIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoRmFjZU1hdGVyaWFsKCk7XG4gICAgICB2YXIgc2NhbGUgPSBtb2RlbEluZm8uc2NhbGUgKiAxO1xuICAgICAgdmFyIHJvdGF0aW9uID0gbW9kZWxJbmZvLmluaXRfcm90YXRpb247XG4gICAgICB2YXIgbWF0ZXJpYWxzID0gbW9kZWxJbmZvLm1hdGVyaWFscztcbiAgICAgIHZhciBpbml0TWF0ZXJpYWwgPSBtb2RlbEluZm8uaW5pdF9tYXRlcmlhbDtcbiAgICAgIHZhciBib2R5TWF0ZXJpYWxzID0gbW9kZWxJbmZvLmJvZHlfbWF0ZXJpYWxzO1xuICAgICAgZm9yICggdmFyIGkgaW4gbW9kZWxJbmZvLm1hdGVyaWFscy5tbWFwICkge1xuICAgICAgICBtYXRlcmlhbC5tYXRlcmlhbHNbIGkgXSA9IG1vZGVsSW5mby5tYXRlcmlhbHMubW1hcFsgaSBdO1xuICAgICAgfVxuICAgICAgdmFyIG1lc2ggPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gICAgICBtZXNoLnJvdGF0aW9uLnggPSByb3RhdGlvblsgMCBdO1xuICAgICAgbWVzaC5yb3RhdGlvbi55ID0gcm90YXRpb25bIDEgXTtcbiAgICAgIG1lc2gucm90YXRpb24ueiA9IHJvdGF0aW9uWyAyIF07XG4gICAgICBtZXNoLnNjYWxlLnggPSBtZXNoLnNjYWxlLnkgPSBtZXNoLnNjYWxlLnogPSBzY2FsZTtcbiAgICAgIHZhciB4ID0gcGFyc2VJbnQoc2VsZi5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXgnKSkgfHwgMDtcbiAgICAgIHZhciB5ID0gcGFyc2VJbnQoc2VsZi5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXknKSkgfHwgMDtcbiAgICAgIHZhciB6ID0gcGFyc2VJbnQoc2VsZi5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXonKSkgfHwgMDtcbiAgICAgIG1lc2gucG9zaXRpb24uc2V0KHgsIHksIC16KTtcbiAgICAgIHNlbGYub2JqZWN0M0QgPSBtZXNoO1xuICAgICAgb25Mb2FkZWQoKTtcbiAgICB9KTtcbiAgfVxuXG59KTtcblxufSk7fSkodHlwZW9mIGRlZmluZT09J2Z1bmN0aW9uJyYmZGVmaW5lLmFtZD9kZWZpbmVcbjooZnVuY3Rpb24obix3KXsndXNlIHN0cmljdCc7cmV0dXJuIHR5cGVvZiBtb2R1bGU9PSdvYmplY3QnP2Z1bmN0aW9uKGMpe1xuYyhyZXF1aXJlLGV4cG9ydHMsbW9kdWxlKTt9OmZ1bmN0aW9uKGMpe3ZhciBtPXtleHBvcnRzOnt9fTtjKGZ1bmN0aW9uKG4pe1xucmV0dXJuIHdbbl07fSxtLmV4cG9ydHMsbSk7d1tuXT1tLmV4cG9ydHM7fTt9KSgnVlJNb2RlbCcsdGhpcykpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9