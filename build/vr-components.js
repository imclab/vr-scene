/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.BinaryLoader = function ( showStatus ) {

  THREE.Loader.call( this, showStatus );

};

THREE.BinaryLoader.prototype = Object.create( THREE.Loader.prototype );
THREE.BinaryLoader.prototype.constructor = THREE.BinaryLoader;

// Load models generated by slim OBJ converter with BINARY option (converter_obj_three_slim.py -t binary)
//  - binary models consist of two files: JS and BIN
//  - parameters
//    - url (required)
//    - callback (required)
//    - texturePath (optional: if not specified, textures will be assumed to be in the same folder as JS model file)
//    - binaryPath (optional: if not specified, binary file will be assumed to be in the same folder as JS model file)

THREE.BinaryLoader.prototype.load = function ( url, callback, texturePath, binaryPath ) {

  // todo: unify load API to for easier SceneLoader use

  texturePath = texturePath || this.extractUrlBase( url );
  binaryPath = binaryPath || this.extractUrlBase( url );

  var callbackProgress = this.showProgress ? THREE.Loader.prototype.updateProgress : undefined;

  this.onLoadStart();

  // #1 load JS part via web worker

  this.loadAjaxJSON( this, url, callback, texturePath, binaryPath, callbackProgress );

};

THREE.BinaryLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, binaryPath, callbackProgress ) {

  var xhr = new XMLHttpRequest();

  texturePath = texturePath && ( typeof texturePath === "string" ) ? texturePath : this.extractUrlBase( url );
  binaryPath = binaryPath && ( typeof binaryPath === "string" ) ? binaryPath : this.extractUrlBase( url );

  xhr.onreadystatechange = function () {

    if ( xhr.readyState == 4 ) {

      if ( xhr.status == 200 || xhr.status == 0 ) {

        var json = JSON.parse( xhr.responseText );
        context.loadAjaxBuffers( json, callback, binaryPath, texturePath, callbackProgress );

      } else {

        console.error( "THREE.BinaryLoader: Couldn't load [" + url + "] [" + xhr.status + "]" );

      }

    }

  };

  xhr.open( "GET", url, true );
  xhr.send( null );

};

THREE.BinaryLoader.prototype.loadAjaxBuffers = function ( json, callback, binaryPath, texturePath, callbackProgress ) {

  var scope = this;

  var xhr = new XMLHttpRequest(),
    url = binaryPath + json.buffers;

  xhr.addEventListener( 'load', function ( event ) {

    var buffer = xhr.response;

    if ( buffer === undefined ) {

      // IEWEBGL needs this
      buffer = ( new Uint8Array( xhr.responseBody ) ).buffer;

    }

    if ( buffer.byteLength == 0 ) {  // iOS and other XMLHttpRequest level 1

      var buffer = new ArrayBuffer( xhr.responseText.length );

      var bufView = new Uint8Array( buffer );

      for ( var i = 0, l = xhr.responseText.length; i < l; i ++ ) {

        bufView[ i ] = xhr.responseText.charCodeAt( i ) & 0xff;

      }

    }

    scope.createBinModel( buffer, callback, texturePath, json.materials );

  }, false );

  if ( callbackProgress !== undefined ) {

    xhr.addEventListener( 'progress', function ( event ) {

      if ( event.lengthComputable ) {

        callbackProgress( event );

      }

    }, false );

  }

  xhr.addEventListener( 'error', function ( event ) {

    console.error( "THREE.BinaryLoader: Couldn't load [" + url + "] [" + xhr.status + "]" );

  }, false );


  xhr.open( "GET", url, true );
  xhr.responseType = "arraybuffer";
  if ( xhr.overrideMimeType ) xhr.overrideMimeType( "text/plain; charset=x-user-defined" );
  xhr.send( null );

};

// Binary AJAX parser

THREE.BinaryLoader.prototype.createBinModel = function ( data, callback, texturePath, jsonMaterials ) {

  var Model = function ( texturePath ) {

    var scope = this,
      currentOffset = 0,
      md,
      normals = [],
      uvs = [],
      start_tri_flat, start_tri_smooth, start_tri_flat_uv, start_tri_smooth_uv,
      start_quad_flat, start_quad_smooth, start_quad_flat_uv, start_quad_smooth_uv,
      tri_size, quad_size,
      len_tri_flat, len_tri_smooth, len_tri_flat_uv, len_tri_smooth_uv,
      len_quad_flat, len_quad_smooth, len_quad_flat_uv, len_quad_smooth_uv;


    THREE.Geometry.call( this );

    md = parseMetaData( data, currentOffset );

    currentOffset += md.header_bytes;
/*
    md.vertex_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
    md.material_index_bytes = Uint16Array.BYTES_PER_ELEMENT;
    md.normal_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
    md.uv_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
*/
    // buffers sizes

    tri_size =  md.vertex_index_bytes * 3 + md.material_index_bytes;
    quad_size = md.vertex_index_bytes * 4 + md.material_index_bytes;

    len_tri_flat      = md.ntri_flat      * ( tri_size );
    len_tri_smooth    = md.ntri_smooth    * ( tri_size + md.normal_index_bytes * 3 );
    len_tri_flat_uv   = md.ntri_flat_uv   * ( tri_size + md.uv_index_bytes * 3 );
    len_tri_smooth_uv = md.ntri_smooth_uv * ( tri_size + md.normal_index_bytes * 3 + md.uv_index_bytes * 3 );

    len_quad_flat      = md.nquad_flat      * ( quad_size );
    len_quad_smooth    = md.nquad_smooth    * ( quad_size + md.normal_index_bytes * 4 );
    len_quad_flat_uv   = md.nquad_flat_uv   * ( quad_size + md.uv_index_bytes * 4 );
    len_quad_smooth_uv = md.nquad_smooth_uv * ( quad_size + md.normal_index_bytes * 4 + md.uv_index_bytes * 4 );

    // read buffers

    currentOffset += init_vertices( currentOffset );

    currentOffset += init_normals( currentOffset );
    currentOffset += handlePadding( md.nnormals * 3 );

    currentOffset += init_uvs( currentOffset );

    start_tri_flat    = currentOffset;
    start_tri_smooth    = start_tri_flat    + len_tri_flat    + handlePadding( md.ntri_flat * 2 );
    start_tri_flat_uv   = start_tri_smooth  + len_tri_smooth  + handlePadding( md.ntri_smooth * 2 );
    start_tri_smooth_uv = start_tri_flat_uv + len_tri_flat_uv + handlePadding( md.ntri_flat_uv * 2 );

    start_quad_flat     = start_tri_smooth_uv + len_tri_smooth_uv  + handlePadding( md.ntri_smooth_uv * 2 );
    start_quad_smooth   = start_quad_flat     + len_quad_flat    + handlePadding( md.nquad_flat * 2 );
    start_quad_flat_uv  = start_quad_smooth   + len_quad_smooth    + handlePadding( md.nquad_smooth * 2 );
    start_quad_smooth_uv= start_quad_flat_uv  + len_quad_flat_uv   + handlePadding( md.nquad_flat_uv * 2 );

    // have to first process faces with uvs
    // so that face and uv indices match

    init_triangles_flat_uv( start_tri_flat_uv );
    init_triangles_smooth_uv( start_tri_smooth_uv );

    init_quads_flat_uv( start_quad_flat_uv );
    init_quads_smooth_uv( start_quad_smooth_uv );

    // now we can process untextured faces

    init_triangles_flat( start_tri_flat );
    init_triangles_smooth( start_tri_smooth );

    init_quads_flat( start_quad_flat );
    init_quads_smooth( start_quad_smooth );

    this.computeFaceNormals();

    function handlePadding( n ) {

      return ( n % 4 ) ? ( 4 - n % 4 ) : 0;

    };

    function parseMetaData( data, offset ) {

      var metaData = {

        'signature'               :parseString( data, offset,  12 ),
        'header_bytes'            :parseUChar8( data, offset + 12 ),

        'vertex_coordinate_bytes' :parseUChar8( data, offset + 13 ),
        'normal_coordinate_bytes' :parseUChar8( data, offset + 14 ),
        'uv_coordinate_bytes'     :parseUChar8( data, offset + 15 ),

        'vertex_index_bytes'      :parseUChar8( data, offset + 16 ),
        'normal_index_bytes'      :parseUChar8( data, offset + 17 ),
        'uv_index_bytes'          :parseUChar8( data, offset + 18 ),
        'material_index_bytes'    :parseUChar8( data, offset + 19 ),

        'nvertices'    :parseUInt32( data, offset + 20 ),
        'nnormals'     :parseUInt32( data, offset + 20 + 4*1 ),
        'nuvs'         :parseUInt32( data, offset + 20 + 4*2 ),

        'ntri_flat'      :parseUInt32( data, offset + 20 + 4*3 ),
        'ntri_smooth'    :parseUInt32( data, offset + 20 + 4*4 ),
        'ntri_flat_uv'   :parseUInt32( data, offset + 20 + 4*5 ),
        'ntri_smooth_uv' :parseUInt32( data, offset + 20 + 4*6 ),

        'nquad_flat'      :parseUInt32( data, offset + 20 + 4*7 ),
        'nquad_smooth'    :parseUInt32( data, offset + 20 + 4*8 ),
        'nquad_flat_uv'   :parseUInt32( data, offset + 20 + 4*9 ),
        'nquad_smooth_uv' :parseUInt32( data, offset + 20 + 4*10 )

      };
/*
      console.log( "signature: " + metaData.signature );

      console.log( "header_bytes: " + metaData.header_bytes );
      console.log( "vertex_coordinate_bytes: " + metaData.vertex_coordinate_bytes );
      console.log( "normal_coordinate_bytes: " + metaData.normal_coordinate_bytes );
      console.log( "uv_coordinate_bytes: " + metaData.uv_coordinate_bytes );

      console.log( "vertex_index_bytes: " + metaData.vertex_index_bytes );
      console.log( "normal_index_bytes: " + metaData.normal_index_bytes );
      console.log( "uv_index_bytes: " + metaData.uv_index_bytes );
      console.log( "material_index_bytes: " + metaData.material_index_bytes );

      console.log( "nvertices: " + metaData.nvertices );
      console.log( "nnormals: " + metaData.nnormals );
      console.log( "nuvs: " + metaData.nuvs );

      console.log( "ntri_flat: " + metaData.ntri_flat );
      console.log( "ntri_smooth: " + metaData.ntri_smooth );
      console.log( "ntri_flat_uv: " + metaData.ntri_flat_uv );
      console.log( "ntri_smooth_uv: " + metaData.ntri_smooth_uv );

      console.log( "nquad_flat: " + metaData.nquad_flat );
      console.log( "nquad_smooth: " + metaData.nquad_smooth );
      console.log( "nquad_flat_uv: " + metaData.nquad_flat_uv );
      console.log( "nquad_smooth_uv: " + metaData.nquad_smooth_uv );

      var total = metaData.header_bytes
            + metaData.nvertices * metaData.vertex_coordinate_bytes * 3
            + metaData.nnormals * metaData.normal_coordinate_bytes * 3
            + metaData.nuvs * metaData.uv_coordinate_bytes * 2
            + metaData.ntri_flat * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes )
            + metaData.ntri_smooth * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes + metaData.normal_index_bytes*3 )
            + metaData.ntri_flat_uv * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes + metaData.uv_index_bytes*3 )
            + metaData.ntri_smooth_uv * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes + metaData.normal_index_bytes*3 + metaData.uv_index_bytes*3 )
            + metaData.nquad_flat * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes )
            + metaData.nquad_smooth * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes + metaData.normal_index_bytes*4 )
            + metaData.nquad_flat_uv * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes + metaData.uv_index_bytes*4 )
            + metaData.nquad_smooth_uv * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes + metaData.normal_index_bytes*4 + metaData.uv_index_bytes*4 );
      console.log( "total bytes: " + total );
*/

      return metaData;

    };

    function parseString( data, offset, length ) {

      var charArray = new Uint8Array( data, offset, length );

      var text = "";

      for ( var i = 0; i < length; i ++ ) {

        text += String.fromCharCode( charArray[ offset + i ] );

      }

      return text;

    };

    function parseUChar8( data, offset ) {

      var charArray = new Uint8Array( data, offset, 1 );

      return charArray[ 0 ];

    };

    function parseUInt32( data, offset ) {

      var intArray = new Uint32Array( data, offset, 1 );

      return intArray[ 0 ];

    };

    function init_vertices( start ) {

      var nElements = md.nvertices;

      var coordArray = new Float32Array( data, start, nElements * 3 );

      var i, x, y, z;

      for( i = 0; i < nElements; i ++ ) {

        x = coordArray[ i * 3 ];
        y = coordArray[ i * 3 + 1 ];
        z = coordArray[ i * 3 + 2 ];

        scope.vertices.push( new THREE.Vector3( x, y, z ) );

      }

      return nElements * 3 * Float32Array.BYTES_PER_ELEMENT;

    };

    function init_normals( start ) {

      var nElements = md.nnormals;

      if ( nElements ) {

        var normalArray = new Int8Array( data, start, nElements * 3 );

        var i, x, y, z;

        for( i = 0; i < nElements; i ++ ) {

          x = normalArray[ i * 3 ];
          y = normalArray[ i * 3 + 1 ];
          z = normalArray[ i * 3 + 2 ];

          normals.push( x/127, y/127, z/127 );

        }

      }

      return nElements * 3 * Int8Array.BYTES_PER_ELEMENT;

    };

    function init_uvs( start ) {

      var nElements = md.nuvs;

      if ( nElements ) {

        var uvArray = new Float32Array( data, start, nElements * 2 );

        var i, u, v;

        for( i = 0; i < nElements; i ++ ) {

          u = uvArray[ i * 2 ];
          v = uvArray[ i * 2 + 1 ];

          uvs.push( u, v );

        }

      }

      return nElements * 2 * Float32Array.BYTES_PER_ELEMENT;

    };

    function init_uvs3( nElements, offset ) {

      var i, uva, uvb, uvc, u1, u2, u3, v1, v2, v3;

      var uvIndexBuffer = new Uint32Array( data, offset, 3 * nElements );

      for( i = 0; i < nElements; i ++ ) {

        uva = uvIndexBuffer[ i * 3 ];
        uvb = uvIndexBuffer[ i * 3 + 1 ];
        uvc = uvIndexBuffer[ i * 3 + 2 ];

        u1 = uvs[ uva*2 ];
        v1 = uvs[ uva*2 + 1 ];

        u2 = uvs[ uvb*2 ];
        v2 = uvs[ uvb*2 + 1 ];

        u3 = uvs[ uvc*2 ];
        v3 = uvs[ uvc*2 + 1 ];

        scope.faceVertexUvs[ 0 ].push( [
          new THREE.Vector2( u1, v1 ),
          new THREE.Vector2( u2, v2 ),
          new THREE.Vector2( u3, v3 )
        ] );

      }

    };

    function init_uvs4( nElements, offset ) {

      var i, uva, uvb, uvc, uvd, u1, u2, u3, u4, v1, v2, v3, v4;

      var uvIndexBuffer = new Uint32Array( data, offset, 4 * nElements );

      for( i = 0; i < nElements; i ++ ) {

        uva = uvIndexBuffer[ i * 4 ];
        uvb = uvIndexBuffer[ i * 4 + 1 ];
        uvc = uvIndexBuffer[ i * 4 + 2 ];
        uvd = uvIndexBuffer[ i * 4 + 3 ];

        u1 = uvs[ uva*2 ];
        v1 = uvs[ uva*2 + 1 ];

        u2 = uvs[ uvb*2 ];
        v2 = uvs[ uvb*2 + 1 ];

        u3 = uvs[ uvc*2 ];
        v3 = uvs[ uvc*2 + 1 ];

        u4 = uvs[ uvd*2 ];
        v4 = uvs[ uvd*2 + 1 ];

        scope.faceVertexUvs[ 0 ].push( [
          new THREE.Vector2( u1, v1 ),
          new THREE.Vector2( u2, v2 ),
          new THREE.Vector2( u4, v4 )
        ] );

        scope.faceVertexUvs[ 0 ].push( [
          new THREE.Vector2( u2, v2 ),
          new THREE.Vector2( u3, v3 ),
          new THREE.Vector2( u4, v4 )
        ] );

      }

    };

    function init_faces3_flat( nElements, offsetVertices, offsetMaterials ) {

      var i, a, b, c, m;

      var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 3 * nElements );
      var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

      for( i = 0; i < nElements; i ++ ) {

        a = vertexIndexBuffer[ i * 3 ];
        b = vertexIndexBuffer[ i * 3 + 1 ];
        c = vertexIndexBuffer[ i * 3 + 2 ];

        m = materialIndexBuffer[ i ];

        scope.faces.push( new THREE.Face3( a, b, c, null, null, m ) );

      }

    };

    function init_faces4_flat( nElements, offsetVertices, offsetMaterials ) {

      var i, a, b, c, d, m;

      var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 4 * nElements );
      var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

      for( i = 0; i < nElements; i ++ ) {

        a = vertexIndexBuffer[ i * 4 ];
        b = vertexIndexBuffer[ i * 4 + 1 ];
        c = vertexIndexBuffer[ i * 4 + 2 ];
        d = vertexIndexBuffer[ i * 4 + 3 ];

        m = materialIndexBuffer[ i ];

        scope.faces.push( new THREE.Face3( a, b, d, null, null, m ) );
        scope.faces.push( new THREE.Face3( b, c, d, null, null, m ) );

      }

    };

    function init_faces3_smooth( nElements, offsetVertices, offsetNormals, offsetMaterials ) {

      var i, a, b, c, m;
      var na, nb, nc;

      var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 3 * nElements );
      var normalIndexBuffer = new Uint32Array( data, offsetNormals, 3 * nElements );
      var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

      for( i = 0; i < nElements; i ++ ) {

        a = vertexIndexBuffer[ i * 3 ];
        b = vertexIndexBuffer[ i * 3 + 1 ];
        c = vertexIndexBuffer[ i * 3 + 2 ];

        na = normalIndexBuffer[ i * 3 ];
        nb = normalIndexBuffer[ i * 3 + 1 ];
        nc = normalIndexBuffer[ i * 3 + 2 ];

        m = materialIndexBuffer[ i ];

        var nax = normals[ na*3     ],
          nay = normals[ na*3 + 1 ],
          naz = normals[ na*3 + 2 ],

          nbx = normals[ nb*3     ],
          nby = normals[ nb*3 + 1 ],
          nbz = normals[ nb*3 + 2 ],

          ncx = normals[ nc*3     ],
          ncy = normals[ nc*3 + 1 ],
          ncz = normals[ nc*3 + 2 ];

        scope.faces.push( new THREE.Face3( a, b, c, [
          new THREE.Vector3( nax, nay, naz ),
          new THREE.Vector3( nbx, nby, nbz ),
          new THREE.Vector3( ncx, ncy, ncz )
        ], null, m ) );

      }

    };

    function init_faces4_smooth( nElements, offsetVertices, offsetNormals, offsetMaterials ) {

      var i, a, b, c, d, m;
      var na, nb, nc, nd;

      var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 4 * nElements );
      var normalIndexBuffer = new Uint32Array( data, offsetNormals, 4 * nElements );
      var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

      for( i = 0; i < nElements; i ++ ) {

        a = vertexIndexBuffer[ i * 4 ];
        b = vertexIndexBuffer[ i * 4 + 1 ];
        c = vertexIndexBuffer[ i * 4 + 2 ];
        d = vertexIndexBuffer[ i * 4 + 3 ];

        na = normalIndexBuffer[ i * 4 ];
        nb = normalIndexBuffer[ i * 4 + 1 ];
        nc = normalIndexBuffer[ i * 4 + 2 ];
        nd = normalIndexBuffer[ i * 4 + 3 ];

        m = materialIndexBuffer[ i ];

        var nax = normals[ na*3     ],
          nay = normals[ na*3 + 1 ],
          naz = normals[ na*3 + 2 ],

          nbx = normals[ nb*3     ],
          nby = normals[ nb*3 + 1 ],
          nbz = normals[ nb*3 + 2 ],

          ncx = normals[ nc*3     ],
          ncy = normals[ nc*3 + 1 ],
          ncz = normals[ nc*3 + 2 ],

          ndx = normals[ nd*3     ],
          ndy = normals[ nd*3 + 1 ],
          ndz = normals[ nd*3 + 2 ];

        scope.faces.push( new THREE.Face3( a, b, d, [
          new THREE.Vector3( nax, nay, naz ),
          new THREE.Vector3( nbx, nby, nbz ),
          new THREE.Vector3( ndx, ndy, ndz )
        ], null, m ) );

        scope.faces.push( new THREE.Face3( b, c, d, [
          new THREE.Vector3( nbx, nby, nbz ),
          new THREE.Vector3( ncx, ncy, ncz ),
          new THREE.Vector3( ndx, ndy, ndz )
        ], null, m ) );

      }

    };

    function init_triangles_flat( start ) {

      var nElements = md.ntri_flat;

      if ( nElements ) {

        var offsetMaterials = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
        init_faces3_flat( nElements, start, offsetMaterials );

      }

    };

    function init_triangles_flat_uv( start ) {

      var nElements = md.ntri_flat_uv;

      if ( nElements ) {

        var offsetUvs = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
        var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

        init_faces3_flat( nElements, start, offsetMaterials );
        init_uvs3( nElements, offsetUvs );

      }

    };

    function init_triangles_smooth( start ) {

      var nElements = md.ntri_smooth;

      if ( nElements ) {

        var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
        var offsetMaterials = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

        init_faces3_smooth( nElements, start, offsetNormals, offsetMaterials );

      }

    };

    function init_triangles_smooth_uv( start ) {

      var nElements = md.ntri_smooth_uv;

      if ( nElements ) {

        var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
        var offsetUvs = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
        var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

        init_faces3_smooth( nElements, start, offsetNormals, offsetMaterials );
        init_uvs3( nElements, offsetUvs );

      }

    };

    function init_quads_flat( start ) {

      var nElements = md.nquad_flat;

      if ( nElements ) {

        var offsetMaterials = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
        init_faces4_flat( nElements, start, offsetMaterials );

      }

    };

    function init_quads_flat_uv( start ) {

      var nElements = md.nquad_flat_uv;

      if ( nElements ) {

        var offsetUvs = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
        var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

        init_faces4_flat( nElements, start, offsetMaterials );
        init_uvs4( nElements, offsetUvs );

      }

    };

    function init_quads_smooth( start ) {

      var nElements = md.nquad_smooth;

      if ( nElements ) {

        var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
        var offsetMaterials = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

        init_faces4_smooth( nElements, start, offsetNormals, offsetMaterials );

      }

    };

    function init_quads_smooth_uv( start ) {

      var nElements = md.nquad_smooth_uv;

      if ( nElements ) {

        var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
        var offsetUvs = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
        var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

        init_faces4_smooth( nElements, start, offsetNormals, offsetMaterials );
        init_uvs4( nElements, offsetUvs );

      }

    };

  };

  Model.prototype = Object.create( THREE.Geometry.prototype );
  Model.prototype.constructor = Model;

  var geometry = new Model( texturePath );
  var materials = this.initMaterials( jsonMaterials, texturePath );

  if ( this.needsTangents( materials ) ) geometry.computeTangents();

  callback( geometry, materials );

};

/* globals define */
;(function(define){'use strict';define(function(require,exports,module){
/**
 * Locals
 */
var textContent = Object.getOwnPropertyDescriptor(Node.prototype,
    'textContent');
var innerHTML = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML');
var removeAttribute = Element.prototype.removeAttribute;
var setAttribute = Element.prototype.setAttribute;
var noop  = function() {};

/**
 * Register a new component.
 *
 * @param  {String} name
 * @param  {Object} props
 * @return {constructor}
 * @public
 */
exports.register = function(name, props) {
  var baseProto = getBaseProto(props.extends);
  var template = props.template || baseProto.templateString;

  // Components are extensible by default but can be declared
  // as non extensible as an optimization to avoid
  // storing the template strings
  var extensible = props.extensible = props.hasOwnProperty('extensible')?
    props.extensible : true;

  // Clean up
  delete props.extends;

  // Pull out CSS that needs to be in the light-dom
  if (template) {
    // Stores the string to be reprocessed when
    // a new component extends this one
    if (extensible && props.template) {
      props.templateString = props.template;
    }

    var output = processCss(template, name);

    props.template = document.createElement('template');
    props.template.innerHTML = output.template;
    props.lightCss = output.lightCss;

    props.globalCss = props.globalCss || '';
    props.globalCss += output.globalCss;
  }

  // Inject global CSS into the document,
  // and delete as no longer needed
  injectGlobalCss(props.globalCss);
  delete props.globalCss;

  // Merge base getter/setter attributes with the user's,
  // then define the property descriptors on the prototype.
  var descriptors = mixin(props.attrs || {}, base.descriptors);

  // Store the orginal descriptors somewhere
  // a little more private and delete the original
  props._attrs = props.attrs;
  delete props.attrs;

  // Create the prototype, extended from base and
  // define the descriptors directly on the prototype
  var proto = createProto(baseProto, props);
  Object.defineProperties(proto, descriptors);

  // Register the custom-element and return the constructor
  try {
    return document.registerElement(name, { prototype: proto });
  } catch (e) {
    if (e.name !== 'NotSupportedError') {
      throw e;
    }
  }
};

var base = {
  properties: {
    GaiaComponent: true,
    attributeChanged: noop,
    attached: noop,
    detached: noop,
    created: noop,

    createdCallback: function() {
      if (this.rtl) { addDirObserver(); }
      injectLightCss(this);
      this.created();
    },

    /**
     * It is very common to want to keep object
     * properties in-sync with attributes,
     * for example:
     *
     *   el.value = 'foo';
     *   el.setAttribute('value', 'foo');
     *
     * So we support an object on the prototype
     * named 'attrs' to provide a consistent
     * way for component authors to define
     * these properties. When an attribute
     * changes we keep the attr[name]
     * up-to-date.
     *
     * @param  {String} name
     * @param  {String||null} from
     * @param  {String||null} to
     */
    attributeChangedCallback: function(name, from, to) {
      var prop = toCamelCase(name);
      if (this._attrs && this._attrs[prop]) { this[prop] = to; }
      this.attributeChanged(name, from, to);
    },

    attachedCallback: function() { this.attached(); },
    detachedCallback: function() { this.detached(); },

    /**
     * A convenient method for setting up
     * a shadow-root using the defined template.
     *
     * @return {ShadowRoot}
     */
    setupShadowRoot: function() {
      if (!this.template) { return; }
      var node = document.importNode(this.template.content, true);
      this.createShadowRoot().appendChild(node);
      return this.shadowRoot;
    },

    /**
     * Sets an attribute internally
     * and externally. This is so that
     * we can style internal shadow-dom
     * content.
     *
     * @param {String} name
     * @param {String} value
     */
    setAttr: function(name, value) {
      var internal = this.shadowRoot.firstElementChild;
      setAttribute.call(internal, name, value);
      setAttribute.call(this, name, value);
    },

    /**
     * Removes an attribute internally
     * and externally. This is so that
     * we can style internal shadow-dom
     * content.
     *
     * @param {String} name
     * @param {String} value
     */
    removeAttr: function(name) {
      var internal = this.shadowRoot.firstElementChild;
      removeAttribute.call(internal, name);
      removeAttribute.call(this, name);
    }
  },

  descriptors: {
    textContent: {
      set: function(value) {
        textContent.set.call(this, value);
        if (this.lightStyle) { this.appendChild(this.lightStyle); }
      },

      get: function() {
        return textContent.get();
      }
    },

    innerHTML: {
      set: function(value) {
        innerHTML.set.call(this, value);
        if (this.lightStyle) { this.appendChild(this.lightStyle); }
      },

      get: innerHTML.get
    }
  }
};

/**
 * The default base prototype to use
 * when `extends` is undefined.
 *
 * @type {Object}
 */
var defaultPrototype = createProto(HTMLElement.prototype, base.properties);

/**
 * Returns a suitable prototype based
 * on the object passed.
 *
 * @private
 * @param  {HTMLElementPrototype|undefined} proto
 * @return {HTMLElementPrototype}
 */
function getBaseProto(proto) {
  if (!proto) { return defaultPrototype; }
  proto = proto.prototype || proto;
  return !proto.GaiaComponent ?
    createProto(proto, base.properties) : proto;
}

/**
 * Extends the given proto and mixes
 * in the given properties.
 *
 * @private
 * @param  {Object} proto
 * @param  {Object} props
 * @return {Object}
 */
function createProto(proto, props) {
  return mixin(Object.create(proto), props);
}

/**
 * Detects presence of shadow-dom
 * CSS selectors.
 *
 * @private
 * @return {Boolean}
 */
var hasShadowCSS = (function() {
  var div = document.createElement('div');
  try { div.querySelector(':host'); return true; }
  catch (e) { return false; }
})();

/**
 * Regexs used to extract shadow-css
 *
 * @type {Object}
 */
var regex = {
  shadowCss: /(?:\:host|\:\:content)[^{]*\{[^}]*\}/g,
  ':host': /(?:\:host)/g,
  ':host()': /\:host\((.+)\)(?: \:\:content)?/g,
  ':host-context': /\:host-context\((.+)\)([^{,]+)?/g,
  '::content': /(?:\:\:content)/g
};

/**
 * Extracts the :host and ::content rules
 * from the shadow-dom CSS and rewrites
 * them to work from the <style scoped>
 * injected at the root of the component.
 *
 * @private
 * @return {String}
 */
function processCss(template, name) {
  var globalCss = '';
  var lightCss = '';

  if (!hasShadowCSS) {
    template = template.replace(regex.shadowCss, function(match) {
      var hostContext = regex[':host-context'].exec(match);

      if (hostContext) {
        globalCss += match
          .replace(regex['::content'], '')
          .replace(regex[':host-context'], '$1 ' + name + '$2')
          .replace(/ +/g, ' '); // excess whitespace
      } else {
        lightCss += match
          .replace(regex[':host()'], name + '$1')
          .replace(regex[':host'], name)
          .replace(regex['::content'], name);
      }

      return '';
    });
  }

  return {
    template: template,
    lightCss: lightCss,
    globalCss: globalCss
  };
}

/**
 * Some CSS rules, such as @keyframes
 * and @font-face don't work inside
 * scoped or shadow <style>. So we
 * have to put them into 'global'
 * <style> in the head of the
 * document.
 *
 * @private
 * @param  {String} css
 */
function injectGlobalCss(css) {
  if (!css) {return;}
  var style = document.createElement('style');
  style.innerHTML = css.trim();
  headReady().then(function() {
    document.head.appendChild(style);
  });
}


/**
 * Resolves a promise once document.head is ready.
 *
 * @private
 */
function headReady() {
  return new Promise(function(resolve) {
    if (document.head) { return resolve(); }
    window.addEventListener('load', function fn() {
      window.removeEventListener('load', fn);
      resolve();
    });
  });
}


/**
 * The Gecko platform doesn't yet have
 * `::content` or `:host`, selectors,
 * without these we are unable to style
 * user-content in the light-dom from
 * within our shadow-dom style-sheet.
 *
 * To workaround this, we clone the <style>
 * node into the root of the component,
 * so our selectors are able to target
 * light-dom content.
 *
 * @private
 */
function injectLightCss(el) {
  if (hasShadowCSS) { return; }
  el.lightStyle = document.createElement('style');
  el.lightStyle.setAttribute('scoped', '');
  el.lightStyle.innerHTML = el.lightCss;
  el.appendChild(el.lightStyle);
}

/**
 * Convert hyphen separated
 * string to camel-case.
 *
 * Example:
 *
 *   toCamelCase('foo-bar'); //=> 'fooBar'
 *
 * @private
 * @param  {Sring} string
 * @return {String}
 */
function toCamelCase(string) {
  return string.replace(/-(.)/g, function replacer(string, p1) {
    return p1.toUpperCase();
  });
}

/**
 * Observer (singleton)
 *
 * @type {MutationObserver|undefined}
 */
var dirObserver;

/**
 * Observes the document `dir` (direction)
 * attribute and dispatches a global event
 * when it changes.
 *
 * Components can listen to this event and
 * make internal changes if need be.
 *
 * @private
 */
function addDirObserver() {
  if (dirObserver) { return; }

  dirObserver = new MutationObserver(onChanged);
  dirObserver.observe(document.documentElement, {
    attributeFilter: ['dir'],
    attributes: true
  });

  function onChanged(mutations) {
    document.dispatchEvent(new Event('dirchanged'));
  }
}

/**
 * Copy the values of all properties from
 * source object `target` to a target object `source`.
 * It will return the target object.
 *
 * @private
 * @param   {Object} target
 * @param   {Object} source
 * @returns {Object}
 */
function mixin(target, source) {
  for (var key in source) {
    target[key] = source[key];
  }
  return target;
}

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('gaia-component',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-scene', {
  extends: HTMLDivElement.prototype,

  created: function() {
    var processDevices = this.processDevices.bind(this);
    var onfullscreenchange = this.onfullscreenchange.bind(this);
    document.addEventListener("webkitfullscreenchange", onfullscreenchange);
    document.addEventListener("mozfullscreenchange",    onfullscreenchange);
    document.addEventListener("fullscreenchange",       onfullscreenchange);
    this.setupShadowRoot();
    this.setupRenderer();
    this.setupScene();
    this.setupCamera();
    this.getVRDevices().then(processDevices)['catch'](function (err) {
      console.warn(err);
    });
  },

  onfullscreenchange: function() {
    if ( !document.mozFullScreenElement && !document.webkitFullScreenElement ) {
      this.viewporTransform = this.cameraProjectionTransform;
      this.vrMode = false;
      this.vrEffect.scale = 1;
    } else {
      this.vrMode = true;
      this.viewporTransform = "translate3d(-50%, -50%, 0px)";
      this.vrEffect.scale = 2500;
    }
    this.resizeCanvas();
  },

  addObject: function(el, provided_obj) {
    var obj = el.object3D;
    var objParent = el.parentNode;
    if (obj && this.scene.getObjectById(obj.id)) {
      return obj;
    }
    obj = el.object3D = el.object3D || provided_obj || new THREE.Object3D();
    obj.scene = this;
    if (objParent && objParent !== this) {
      objParent = this.addObject(el.parentNode);
      objParent.add(obj);
    } else {
      this.scene.add(obj);
    }
    return obj;
  },

  epsilon: function ( value ) {
    return Math.abs( value ) < 0.000001 ? 0 : value;
  },

  getCSSMatrix: function (matrix) {
    var epsilon = this.epsilon;
    var elements = matrix.elements;

    return 'matrix3d(' +
      epsilon( elements[ 0 ] ) + ',' +
      epsilon( elements[ 1 ] ) + ',' +
      epsilon( elements[ 2 ] ) + ',' +
      epsilon( elements[ 3 ] ) + ',' +
      epsilon( elements[ 4 ] ) + ',' +
      epsilon( elements[ 5 ] ) + ',' +
      epsilon( elements[ 6 ] ) + ',' +
      epsilon( elements[ 7 ] ) + ',' +
      epsilon( elements[ 8 ] ) + ',' +
      epsilon( elements[ 9 ] ) + ',' +
      epsilon( elements[ 10 ] ) + ',' +
      epsilon( elements[ 11 ] ) + ',' +
      epsilon( elements[ 12 ] ) + ',' +
      epsilon( elements[ 13 ] ) + ',' +
      epsilon( elements[ 14 ] ) + ',' +
      epsilon( elements[ 15 ] ) +
    ')';
  },

  setupCamera: function() {
    var fov = this.style.getPropertyValue('--fov') || 45;
    var viewport = this.viewport = this.shadowRoot.querySelector('.viewport');

    // DOM camera
    var perspectiveMatrix = this.perspectiveMatrix(THREE.Math.degToRad(45), this.offsetWidth / this.offsetHeight, 1, 10000);
    var scaled = perspectiveMatrix.clone().scale(new THREE.Vector3(this.offsetWidth, this.offsetHeight, 1));
    var style = this.cameraProjectionTransform = this.getCSSMatrix(scaled);
    this.viewporTransform = style;

    // WebGL camera
    var camera = this.camera = new THREE.PerspectiveCamera(45, this.offsetWidth / this.offsetHeight, 1, 10000);
    this.vrControls = new THREE.VRControls( camera );

  },

  perspectiveMatrix: function(fov, aspect, nearz, farz) {
    var matrix = new THREE.Matrix4();
    var range = Math.tan(fov * 0.5) * nearz;

    matrix.elements[0] = (2 * nearz) / ((range * aspect) - (-range * aspect));
    matrix.elements[1] = 0;
    matrix.elements[2] = 0;
    matrix.elements[3] = 0;
    matrix.elements[4] = 0;
    matrix.elements[5] = (2 * nearz) / (2 * range);
    matrix.elements[6] = 0;
    matrix.elements[7] = 0;
    matrix.elements[8] = 0;
    matrix.elements[9] = 0;
    matrix.elements[10] = -(farz + nearz) / (farz - nearz);
    matrix.elements[11] = -1;
    matrix.elements[12] = 0;
    matrix.elements[13] = 0;
    matrix.elements[14] = -(2 * farz * nearz) / (farz - nearz);
    matrix.elements[15] = 0;
    return matrix.transpose();
  },

  setupRenderer: function() {
    // All WebGL setup
    var canvas = this.canvas = this.shadowRoot.querySelector('canvas');

    this.resizeCanvas();
    window.addEventListener('resize', this.resizeCanvas.bind(this), false);

    var renderer = this.renderer = new THREE.WebGLRenderer( { canvas: canvas, antialias: true, alpha: true } );
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( this.canvas.width, this.canvas.height );
    renderer.sortObjects = false;
    this.vrEffect = new THREE.VREffect(renderer);
  },

  setupScene: function() {
    /// All WebGL Setup
    var scene = this.scene = new THREE.Scene();
    createLights();
    function createLights() {
      var directionalLight = new THREE.DirectionalLight(0xffffff);
      directionalLight.position.set(1, 1, 1).normalize();
      scene.add(directionalLight);
    }
  },

  updateChildren: function() {
    var child;
    var i;
    for (i = 0; i < this.children.length; ++i) {
      child = this.children[i];
      if (typeof child.update == 'function') { child.update(); }
      if (typeof child.updateChildren == 'function') { child.updateChildren(); }
    }
  },

  resizeCanvas: function(renderer, camera){
    var canvas = this.canvas;
    // Make it visually fill the positioned parent
    canvas.style.width ='100%';
    canvas.style.height='100%';
    // ...then set the internal size to match
    canvas.width  = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;

    if (this.camera) {
      this.camera.aspect = canvas.width / canvas.height;
      this.camera.updateProjectionMatrix();
    }

    if (this.renderer) {
      // notify the renderer of the size change
      this.renderer.setSize( canvas.width, canvas.height );
    }

  },

  animate: function() {
    var renderer = this.vrMode? this.vrEffect : this.renderer;
    this.updateChildren();
    this.vrControls.update();
    var orientation = this.vrControls.state.orientation;
    var orientationMatrix;
    var quaternion;
    if (orientation) {
      quaternion = new THREE.Quaternion(orientation.x, -orientation.y, orientation.z, orientation.w);
      orientationMatrix = new THREE.Matrix4().makeRotationFromQuaternion(quaternion);
      this.viewport.style.transform = this.viewporTransform + ' ' + this.getCSSMatrix(orientationMatrix);
    } else {
      this.viewport.style.transform = this.viewporTransform;
    }
    renderer.render(this.scene, this.camera);
  },

  attributeChanged: function(name, from, to) {
    if (name === "angle") {
      this.style.transform = 'rotateY( ' + this.angle + 'deg )';
    }
  },

  filterInvalidDevices: function(devices) {
    var oculusDevices = devices.filter(function (device) {
      return device.deviceName.toLowerCase().indexOf('oculus') !== -1;
    });

    if (oculusDevices.length >= 1) {
      return devices.filter(function (device) {
        return device.deviceName.toLowerCase().indexOf('cardboard') === -1;
      });
    } else {
      return devices;
    }
  },

   processDevices: function(devices) {
      devices = this.filterInvalidDevices(devices);

      var headset = undefined;
      var position = undefined;

      for (var i = 0; i < devices.length; i++) {
        var device = devices[i];
        if (device instanceof HMDVRDevice) {
          headset = device;
        }
        if (device instanceof PositionSensorVRDevice) {
          position = device;
        }
        if (position && headset) {
          this.vr = {
            headset: headset,
            position: position
          };
        }
      }
  },

  getVRDevices: function(callback) {
    return new Promise(function (resolve, reject) {
      if (navigator.getVRDevices) {
        navigator.getVRDevices().then(function (devices) {
          resolve(devices);
        }, reject);
      } else {
        reject('No VR devices found.');
      }
    });
  },

  startVR: function() {
    this.mozRequestFullScreen({
      vrDisplay: this.vr.headset
    });
  },

  resetSensor: function() {
    if (this.vr.position) {
      this.vr.position.resetSensor();
    }
  },

  template: `
    <canvas width="100%" height="100%"></canvas>
    <div class="viewport">
      <content></content>
    </div>

    <style>
      :host {
        position: absolute;
        display: inline-block;
        width: 100%;
        height: 100%;
        background-image:
          radial-gradient(
            #0B6790,
            #14364A
          );
      }

      .viewport {
        position: absolute;
        display: inline-block;
        width: 100%;
        height: 100%;
        transform-style: preserve-3d;
      }

      canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
    </style>`
});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRSCene',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-object', {
  extends: HTMLDivElement.prototype,

  created: function() {
    this.setupShadowRoot();
    this.findScene();
    this.scene.addObject(this);
    this.updateTransform();
  },

  attributeChanged: function(name, from, to) {
    this.updateTransform();
  },

  epsilon: function ( value ) {
    return Math.abs( value ) < 0.000001 ? 0 : value;
  },

  update: function() { /* NOOP */ },

  updateChildren: function() {
    var child;
    var i;
    for (i = 0; i < this.children.length; ++i) {
      child = this.children[i];
      if (typeof child.update == 'function') { child.update(); }
      if (typeof child.updateChildren == 'function') { child.updateChildren(); }
    }
  },

  getCSSMatrix: function (matrix) {
    var epsilon = this.epsilon;
    var elements = matrix.elements;

    return 'matrix3d(' +
      epsilon( elements[ 0 ] ) + ',' +
      epsilon( elements[ 1 ] ) + ',' +
      epsilon( elements[ 2 ] ) + ',' +
      epsilon( elements[ 3 ] ) + ',' +
      epsilon( elements[ 4 ] ) + ',' +
      epsilon( elements[ 5 ] ) + ',' +
      epsilon( elements[ 6 ] ) + ',' +
      epsilon( elements[ 7 ] ) + ',' +
      epsilon( elements[ 8 ] ) + ',' +
      epsilon( elements[ 9 ] ) + ',' +
      epsilon( elements[ 10 ] ) + ',' +
      epsilon( elements[ 11 ] ) + ',' +
      epsilon( elements[ 12 ] ) + ',' +
      epsilon( elements[ 13 ] ) + ',' +
      epsilon( elements[ 14 ] ) + ',' +
      epsilon( elements[ 15 ] ) +
    ')';
  },

  updateTransform: function() {
    // Position
    var x = this.style.getPropertyValue('--x') || 0;
    var y = this.style.getPropertyValue('--y') || 0;
    var z = this.style.getPropertyValue('--z') || 0;
    var translation = new THREE.Matrix4().makeTranslation(x, y, -z);

    // Orientation
    var orientationX = this.style.getPropertyValue('--rotX') || 0;
    var orientationY = this.style.getPropertyValue('--rotY') || 0;
    var orientationZ = this.style.getPropertyValue('--rotZ') || 0;

    var rotX = THREE.Math.degToRad(orientationX);
    var rotY = THREE.Math.degToRad(orientationY);
    var rotZ = THREE.Math.degToRad(orientationZ);
    var rotationX = new THREE.Matrix4().makeRotationX(rotX);
    var rotationY = new THREE.Matrix4().makeRotationY(rotY);
    var rotationZ = new THREE.Matrix4().makeRotationX(rotZ);
    this.style.transform = "translate3d(-50%, -50%, 0) " + this.getCSSMatrix(translation.multiply(rotationZ.multiply(rotationY.multiply(rotationX))));
    this.object3D.position.set(x, -y, -z);
    this.object3D.rotation.order = 'YXZ';
    this.object3D.rotation.set(-rotX, rotY, rotZ);
  },

  findScene: function() {
    var scenes = document.querySelectorAll('vr-scene');
    var perspective;
    for (var i=0; i < scenes.length; ++i) {
      this.scene = scenes[i];
    }
  },

  template: `
    <content></content>
    <style>
      :host {
        left: 50%;
        top: 50%;
        position: absolute;
        transform-style: preserve-3d;
      }
    </style>
  `
});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRObject',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-div', {
  extends: HTMLDivElement.prototype,

  template: `
    <content></content>
    <style>
      :host {
        position: absolute;
        display: block;
        transform-style: preserve-3d;
      }
    </style>
  `
});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRDiv',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-camera', {
  extends: VRObject.prototype,

  updateTransform: function() {
    var elStyles = window.getComputedStyle(this);
    // Position
    var x = elStyles.getPropertyValue('--x') || 0;
    var y = elStyles.getPropertyValue('--y') || 0;
    var z = elStyles.getPropertyValue('--z') || 0;
    var translation = new THREE.Matrix4().makeTranslation(x, y, -z);

    // Orientation
    var orientationX = elStyles.getPropertyValue('--rotX') || 0;
    var orientationY = elStyles.getPropertyValue('--rotY') || 0;
    var orientationZ = elStyles.getPropertyValue('--rotZ') || 0;
    var rotX = THREE.Math.degToRad(orientationX);
    var rotY = THREE.Math.degToRad(orientationY);
    var rotZ = THREE.Math.degToRad(orientationZ);
    var rotationX = new THREE.Matrix4().makeRotationX(rotX);
    var rotationY = new THREE.Matrix4().makeRotationY(rotY);
    var rotationZ = new THREE.Matrix4().makeRotationX(rotZ);
    var matrixCSS = rotationZ.multiply(rotationY.multiply(rotationX.multiply(translation)));

    this.style.transform = 'translate3d(-50%, -50%, 0) ' + this.getCSSMatrix(matrixCSS);

    // Matrix threejs
    rotationX = new THREE.Matrix4().makeRotationX(-rotX);
    rotationY = new THREE.Matrix4().makeRotationY(rotY);
    rotationZ = new THREE.Matrix4().makeRotationX(rotZ);
    translation = new THREE.Matrix4().makeTranslation(x, -y, -z);
    var matrix = rotationZ.multiply(rotationY.multiply(rotationX.multiply(translation)));

    var object3D = this.object3D;
    object3D.matrix = matrix;
    object3D.matrixAutoUpdate = false;
    object3D.matrixWorldNeedsUpdate = true;
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRCamera',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-model', {
  extends: VRObject.prototype,

  created: function() {
    this.setupScene();
    VRObject.prototype.created.call(this);
  },

  setupScene: function() {
    var material = new THREE.MeshLambertMaterial({ color: 'magenta' });
    var model = this.model = new THREE.Mesh(new THREE.BoxGeometry(250, 250, 250), material);
    var x = this.style.getPropertyValue('--x') || 0;
    var y = this.style.getPropertyValue('--y') || 0;
    var z = this.style.getPropertyValue('--z');
    this.raycaster = new THREE.Raycaster();
    model.overdraw = true;
    model.position.set(x, y, -z);
    this.object3D = model;
    this.attachClickHandler();
    //this.animate();
  },

  attachClickHandler: function() {
    var self = this;
    self.mousePos = new THREE.Vector2(0, 0);
    //this.scene.addEventListener('mousemove', onMouseMoved, false);
    //document.addEventListener( 'mousedown', onDocumentMouseDown, false );

    function onMouseMoved ( e ) {
      e.preventDefault();
      self.mousePos.x = ( e.clientX / window.innerWidth ) * 2 - 1;
      self.mousePos.y = - ( e.clientY / window.innerHeight ) * 2 + 1;
    }

    function onDocumentMouseDown( e ) {
      if (self.intersected) {
        self.explode();
      }
      // e.preventDefault();
      // var mouseVector = new THREE.Vector3();
      // mouseVector.x = 2 * (e.clientX / SCREEN_WIDTH) - 1;
      // mouseVector.y = 1 - 2 * ( e.clientY / SCREEN_HEIGHT );
      // var raycaster = projector.pickingRay( mouseVector.clone(), camera );
      // var intersects = raycaster.intersectObject( TARGET );
      // for( var i = 0; i < intersects.length; i++ ) {
      //   var intersection = intersects[ i ],
      //   obj = intersection.object;
      //   cons ole.log("Intersected object", obj);
      // }
    }
  },

  explode: function() {

    var box = this.object3D;
    var scene = this.scene;
    var duration = 8000;
    this.exploding = true;

    // explode geometry into objects
    var pieces = explode( box.geometry, box.material );

    box.material.visible = false;

    // animate objects
    for ( var i = 0; i < pieces.children.length; i ++ ) {

      var object = pieces.children[ i ];

      object.geometry.computeFaceNormals();
      var normal = object.geometry.faces[0].normal.clone();
      var targetPosition = object.position.clone().add( normal.multiplyScalar( 3000 ) );
      //removeBoxFromList( box );
      new TWEEN.Tween( object.position )
        .to( targetPosition, duration )
        .onComplete( deleteBox )
        .start();

      object.material.opacity = 0;
      new TWEEN.Tween( object.material )
        .to( { opacity: 1 }, duration )
        .start();

      var rotation = 2 * Math.PI;
      var targetRotation = { x: rotation, y: rotation, z:rotation };
      new TWEEN.Tween( object.rotation )
        .to( targetRotation, duration )
        .start();

    }

    box.add( pieces );

    function removeBoxFromList( box ) {
      for (var i = 0; i < objects.length; i++) {
        if (objects[i] === box) {
          objects.splice(i, 1);
          return;
        }
      }
    }

    function deleteBox() {
      box.remove( pieces )
      //scene.remove( box );
    }

    function explode( geometry, material ) {

      var pieces = new THREE.Group();
      var material = material.clone();
      material.side = THREE.DoubleSide;

      for ( var i = 0; i < geometry.faces.length; i ++ ) {

        var face = geometry.faces[ i ];

        var vertexA = geometry.vertices[ face.a ].clone();
        var vertexB = geometry.vertices[ face.b ].clone();
        var vertexC = geometry.vertices[ face.c ].clone();

        var geometry2 = new THREE.Geometry();
        geometry2.vertices.push( vertexA, vertexB, vertexC );
        geometry2.faces.push( new THREE.Face3( 0, 1, 2 ) );

        var mesh = new THREE.Mesh( geometry2, material );
        mesh.position.sub( geometry2.center() );
        pieces.add( mesh );

      }

      //sort the pieces
      pieces.children.sort( function ( a, b ) {

        return a.position.z - b.position.z;
        //return a.position.x - b.position.x;     // sort x
        //return b.position.y - a.position.y;   // sort y

      } );

      pieces.rotation.set( 0, 0, 0 )

      return pieces;

    }

  },

  animate: function() {
    var self = this;
    var lastTime = self.lastTime || 0;
    var angularSpeed = self.angularSpeed || 0.2;
    requestAnimationFrame(function() {
      self.animate();
      TWEEN.update();
    });

    if (!this.exploding) {
      var time = (new Date()).getTime();
      var timeDiff = time - lastTime;
      var angleChange = angularSpeed * timeDiff * 2 * Math.PI / 1000;
      self.model.rotation.y += angleChange;
      self.lastTime = time;
      //this.intersectMouse();
    }
  },

  // find intersections
  intersectMouse: function intersect() {
    var raycaster = this.raycaster;
    var objects = [this.object3D];
    raycaster.setFromCamera( this.mousePos, this.scene.camera );
    var intersects = raycaster.intersectObjects( objects );

    if ( intersects.length > 0 ) {

      if ( this.object3D == intersects[ 0 ].object && !this.intersected) {

        this.intersected = this.object3D.material.emissive.getHex();
        this.object3D.material.emissive.setHex( 0xffff00 );

      }

    } else {

      if ( this.intersected ) this.object3D.material.emissive.set( 'black' );
      this.intersected = null;

    }
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRModel',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-billboard', {
  extends: VRObject.prototype,

  created: function() {
    VRObject.prototype.created.call(this);
    this.updateTransform();
  },

  update: function() {
    this.updateTransform();
  },

  updateTransform: function() {
    var camera = document.querySelector('vr-camera');
    var matrix = new THREE.Matrix4();
    matrix.copy( matrix.getInverse(camera.object3D.matrixWorld) );
    matrix.copy( camera.object3D.matrixWorld );

    matrix.transpose();

    matrix.elements[ 3 ] = 0;
    matrix.elements[ 7 ] = 0;
    matrix.elements[ 11 ] = 0;
    matrix.elements[ 15 ] = 1;

    // Position
    var x = this.style.getPropertyValue('--x') || 0;
    var y = this.style.getPropertyValue('--y') || 0;
    var z = this.style.getPropertyValue('--z') || 0;
    var translation = new THREE.Matrix4().makeTranslation(x, y, -z);

    // Orientation
    var orientationX = this.style.getPropertyValue('--rotX') || 0;
    var orientationY = this.style.getPropertyValue('--rotY') || 0;
    var orientationZ = this.style.getPropertyValue('--rotZ') || 0;

    var rotX = THREE.Math.degToRad(orientationX);
    var rotY = THREE.Math.degToRad(orientationY);
    var rotZ = THREE.Math.degToRad(orientationZ);
    var rotationX = new THREE.Matrix4().makeRotationX(rotX);
    var rotationY = new THREE.Matrix4().makeRotationY(rotY);
    var rotationZ = new THREE.Matrix4().makeRotationX(rotZ);

    this.style.transform = 'translate3d(-50%, -50%, 0) ' + this.getCSSMatrix(translation.multiply(rotationZ.multiply(rotationY.multiply(rotationX.multiply(matrix)))));
    this.object3D.position.set(x, -y, -z);
    this.object3D.rotation.order = 'YXZ';
    this.object3D.rotation.set(-rotX, rotY, rotZ);
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRBillboard',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-terrain', {
  extends: VRObject.prototype,

  created: function() {
    var self = this;
    this.setupScene(onLoaded);
    function onLoaded() {
      VRObject.prototype.created.call(self);
      self.generateLabels(noise);
    }
  },

  setupScene: function(onLoaded) {
    var self = this;
    this.terrainSize = 1024;
    new Terrain(noise, this.terrainSize, 2, 64, function(model) {;
      self.object3D = model;
      onLoaded();
    });
  },

  generateLabels: function(noise) {
    var label;
    var max = 15;
    for(var i = 0; i < noise.image.data.length; ++i) {
      var noiseValue = noise.image.data[i];
      var sign1 = (Math.random()*10).toFixed(0) % 2 === 0? -1: 1;
      var sign2 = (Math.random()*10).toFixed(0) % 2 === 0? -1: 1;
      if (noiseValue > 80) {
        label = document.createElement('vr-billboard');
        label.classList.add('peak-label');
        label.style.setProperty('--x',  sign1 * (Math.random() * this.terrainSize));
        label.style.setProperty('--y',  sign2 * (Math.random() * this.terrainSize));
        label.style.setProperty('--z',  -noiseValue);
        label.style.setProperty('--rotX',  -90);
        label.innerHTML = "Landmark " + i;
        this.appendChild(label);
        max-=1;
        if (max == 0) {
          return;
        }
      }
    }
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRTerrain',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-axis-gl', {
  extends: VRObject.prototype,

  created: function() {
    this.setupScene();
    VRObject.prototype.created.call(this);
  },

  setupScene: function() {
    this.object3D = new THREE.AxisHelper( 500 );
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRAxisGL',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

/**
 * Exports
 */

module.exports = component.register('vr-axis-dom', {
  extends: VRObject.prototype,

  template: `
    <div class="axis x-axis"></div>
    <div class="axis y-axis"></div>
    <div class="axis z-axis"></div>
    <style>
    :host {
      left: 50%;
      top: 50%;
      position: absolute;
      transform-style: preserve-3d;
    }

    .axis {
      position: absolute;
      display: inline-block;
    }

    .x-axis {
      height: 1px;
      width: 500px;
      background-color: pink;
    }

    .y-axis {
      height: 500px;
      width: 1px;
      background-color: magent;
      transform: translate3d(0, -500px, 0);
    }

    .z-axis {
      height: 1px;
      width: 500px;
      background-color: violet;
      transform: translate3d(-50%, 0, 250px) rotateY(90deg);
    }
    </style>
  `

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRAxisDOM',this));

/* globals define */
(function(define){'use strict';define(function(require,exports,module){

/**
 * Dependencies
 */

var component = require('gaia-component');

/**
 * Simple logger
 * @type {Function}
 */
var debug = 0 ? console.log.bind(console) : function() {};

var r = "textures/bridge/";
var urls = [ r + "posx.jpg", r + "negx.jpg",
             r + "posy.jpg", r + "negy.jpg",
             r + "posz.jpg", r + "negz.jpg" ];
var textureCube = THREE.ImageUtils.loadTextureCube( urls );
textureCube.format = THREE.RGBFormat;

/**
 * Exports
 */

module.exports = component.register('vr-lambo', {
  extends: VRObject.prototype,

  created: function() {
    var self = this;
    var modelInfo = this.modelInfo;
    var materials = this.materials;
    modelInfo.materials = {
      body: [
        [ "Orange metal",  materials[ "Orange metal" ] ],
        [ "Blue metal",   materials[ "Blue metal" ] ],
        [ "Red metal",    materials[ "Red metal" ] ],
        [ "Green metal",  materials[ "Green metal" ] ],
        [ "Black metal",  materials[ "Black metal" ] ],
        [ "Gold",     materials[ "Gold" ] ],
        [ "Bronze",   materials[ "Bronze" ] ],
        [ "Chrome",   materials[ "Chrome" ] ]
      ],
      mmap: {
        0: materials[ "Black rough" ],   // tires + inside
        1: materials[ "Pure chrome" ],   // wheels + extras chrome
        2: materials[ "Bronze" ],       // back / top / front torso
        3: materials[ "Light glass" ],    // glass
        4: materials[ "Pure chrome" ],   // sides torso
        5: materials[ "Pure chrome" ],   // engine
        6: materials[ "Red glass 50" ],    // backlights
        7: materials[ "Orange glass 50" ]  // backsignals
      }
    };
    this.setupScene(onLoaded);
    function onLoaded() {
      VRObject.prototype.created.call(self);
      var ambient = new THREE.AmbientLight( 0x050505 );
      self.scene.scene.add( ambient );

      var directionalLight = new THREE.DirectionalLight( 0xffffff, 2 );
      directionalLight.position.set( 2, 1.2, 10 ).normalize();
      self.scene.scene.add( directionalLight );

      directionalLight = new THREE.DirectionalLight( 0xffffff, 1 );
      directionalLight.position.set( -2, 1.2, -10 ).normalize();
      self.scene.scene.add( directionalLight );

      var pointLight = new THREE.PointLight( 0xffaa00, 2 );
      pointLight.position.set( 2000, 1200, 10000 );
      self.scene.scene.add( pointLight );
    }
  },

  // common materials
  materials: {
    "Orange":   new THREE.MeshLambertMaterial( { color: 0xff6600, ambient: 0xff2200, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.3 } ),
    "Blue":   new THREE.MeshLambertMaterial( { color: 0x001133, ambient: 0x001133, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.3 } ),
    "Red":    new THREE.MeshLambertMaterial( { color: 0x660000, ambient: 0x330000, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.25 } ),
    "Black":  new THREE.MeshLambertMaterial( { color: 0x000000, ambient: 0x000000, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.15 } ),
    "White":  new THREE.MeshLambertMaterial( { color: 0xffffff, ambient: 0x666666, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.25 } ),

    "Carmine":  new THREE.MeshPhongMaterial( { color: 0x770000, specular:0xffaaaa, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Gold":   new THREE.MeshPhongMaterial( { color: 0xaa9944, specular:0xbbaa99, shininess:50, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Bronze": new THREE.MeshPhongMaterial( { color: 0x150505, specular:0xee6600, shininess:10, envMap: textureCube, combine: THREE.MixOperation, reflectivity: 0.25 } ),
    "Chrome":   new THREE.MeshPhongMaterial( { color: 0xffffff, specular:0xffffff, envMap: textureCube, combine: THREE.MultiplyOperation } ),

    "Orange metal": new THREE.MeshLambertMaterial( { color: 0xff6600, ambient: 0xff2200, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Blue metal":   new THREE.MeshLambertMaterial( { color: 0x001133, ambient: 0x002266, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Red metal":  new THREE.MeshLambertMaterial( { color: 0x770000, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Green metal":  new THREE.MeshLambertMaterial( { color: 0x007711, envMap: textureCube, combine: THREE.MultiplyOperation } ),
    "Black metal":  new THREE.MeshLambertMaterial( { color: 0x222222, envMap: textureCube, combine: THREE.MultiplyOperation } ),

    "Pure chrome":  new THREE.MeshLambertMaterial( { color: 0xffffff, envMap: textureCube } ),
    "Dark chrome":  new THREE.MeshLambertMaterial( { color: 0x444444, envMap: textureCube } ),
    "Darker chrome":new THREE.MeshLambertMaterial( { color: 0x222222, envMap: textureCube } ),

    "Black glass":  new THREE.MeshLambertMaterial( { color: 0x101016, envMap: textureCube, opacity: 0.975, transparent: true } ),
    "Dark glass": new THREE.MeshLambertMaterial( { color: 0x101046, envMap: textureCube, opacity: 0.25, transparent: true } ),
    "Blue glass": new THREE.MeshLambertMaterial( { color: 0x668899, envMap: textureCube, opacity: 0.75, transparent: true } ),
    "Light glass":  new THREE.MeshBasicMaterial( { color: 0x223344, envMap: textureCube, opacity: 0.25, transparent: true, combine: THREE.MixOperation, reflectivity: 0.25 } ),

    "Red glass":  new THREE.MeshLambertMaterial( { color: 0xff0000, opacity: 0.75, transparent: true } ),
    "Yellow glass": new THREE.MeshLambertMaterial( { color: 0xffffaa, opacity: 0.75, transparent: true } ),
    "Orange glass": new THREE.MeshLambertMaterial( { color: 0x995500, opacity: 0.75, transparent: true } ),

    "Orange glass 50":  new THREE.MeshLambertMaterial( { color: 0xffbb00, opacity: 0.5, transparent: true } ),
    "Red glass 50":   new THREE.MeshLambertMaterial( { color: 0xff0000, opacity: 0.5, transparent: true } ),

    "Fullblack rough":  new THREE.MeshLambertMaterial( { color: 0x000000 } ),
    "Black rough":    new THREE.MeshLambertMaterial( { color: 0x050505 } ),
    "Darkgray rough": new THREE.MeshLambertMaterial( { color: 0x090909 } ),
    "Red rough":    new THREE.MeshLambertMaterial( { color: 0x330500 } ),

    "Darkgray shiny": new THREE.MeshPhongMaterial( { color: 0x000000, specular: 0x050505 } ),
    "Gray shiny":   new THREE.MeshPhongMaterial( { color: 0x050505, shininess: 20 } )
  },

  modelInfo: {
    name: "Bugatti Veyron",
    url:  "obj/veyron/VeyronNoUv_bin.js",
    author: '<a href="http://artist-3d.com/free_3d_models/dnm/model_disp.php?uid=1129" target="_blank">Troyano</a>',
    init_rotation: [ 0, 0, 0 ],
    scale: 5.5,
    init_material: 4,
    body_materials: [ 2 ],
    object: null,
    buttons: null,
    materials: null
  },

  setupScene: function(onLoaded) {
    var self = this;
    var loader = new THREE.BinaryLoader(true);
    loader.load(this.modelInfo.url, function(geometry) {
      var modelInfo = self.modelInfo;
      var material = new THREE.MeshFaceMaterial();
      var scale = modelInfo.scale * 1;
      var rotation = modelInfo.init_rotation;
      var materials = modelInfo.materials;
      var initMaterial = modelInfo.init_material;
      var bodyMaterials = modelInfo.body_materials;
      for ( var i in modelInfo.materials.mmap ) {
        material.materials[ i ] = modelInfo.materials.mmap[ i ];
      }
      var mesh = new THREE.Mesh( geometry, material );
      mesh.rotation.x = rotation[ 0 ];
      mesh.rotation.y = rotation[ 1 ];
      mesh.rotation.z = rotation[ 2 ];
      mesh.scale.x = mesh.scale.y = mesh.scale.z = scale;
      var x = parseInt(self.style.getPropertyValue('--x')) || 0;
      var y = parseInt(self.style.getPropertyValue('--y')) || 0;
      var z = parseInt(self.style.getPropertyValue('--z')) || 0;
      mesh.position.set(x, y, -z);
      self.object3D = mesh;
      onLoaded();
    });
  }

});

});})(typeof define=='function'&&define.amd?define
:(function(n,w){'use strict';return typeof module=='object'?function(c){
c(require,exports,module);}:function(c){var m={exports:{}};c(function(n){
return w[n];},m.exports,m);w[n]=m.exports;};})('VRModel',this));

//# sourceMappingURL=data:application/json;base64,